From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alex Bradbury <asb@lowrisc.org>
Subject: Revert upstreamed RISC-V changes

This allows the patch series to be maintained and modified on an ongoing
basis.
---
 docs/CompilerWriterInfo.rst                        |   4 -
 include/llvm/ADT/Triple.h                          |   2 -
 include/llvm/BinaryFormat/ELF.h                    |  17 -
 include/llvm/BinaryFormat/ELFRelocs/RISCV.def      |  59 --
 include/llvm/Object/ELFObjectFile.h                |  13 -
 include/llvm/module.modulemap                      |   1 -
 lib/Object/ELF.cpp                                 |   7 -
 lib/ObjectYAML/ELFYAML.cpp                         |  12 -
 lib/Support/Triple.cpp                             |  21 -
 lib/Target/LLVMBuild.txt                           |   1 -
 lib/Target/RISCV/AsmParser/CMakeLists.txt          |   3 -
 lib/Target/RISCV/AsmParser/LLVMBuild.txt           |  23 -
 lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp      | 867 ---------------------
 lib/Target/RISCV/CMakeLists.txt                    |  32 -
 lib/Target/RISCV/Disassembler/CMakeLists.txt       |   3 -
 lib/Target/RISCV/Disassembler/LLVMBuild.txt        |  24 -
 .../RISCV/Disassembler/RISCVDisassembler.cpp       | 220 ------
 lib/Target/RISCV/InstPrinter/CMakeLists.txt        |   3 -
 lib/Target/RISCV/InstPrinter/LLVMBuild.txt         |  23 -
 lib/Target/RISCV/InstPrinter/RISCVInstPrinter.cpp  |  79 --
 lib/Target/RISCV/InstPrinter/RISCVInstPrinter.h    |  48 --
 lib/Target/RISCV/LLVMBuild.txt                     |  35 -
 lib/Target/RISCV/MCTargetDesc/CMakeLists.txt       |   8 -
 lib/Target/RISCV/MCTargetDesc/LLVMBuild.txt        |  23 -
 lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp  | 238 ------
 lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h      | 110 ---
 .../RISCV/MCTargetDesc/RISCVELFObjectWriter.cpp    |  75 --
 lib/Target/RISCV/MCTargetDesc/RISCVFixupKinds.h    |  52 --
 lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.cpp   |  25 -
 lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.h     |  31 -
 .../RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp      | 196 -----
 lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.cpp      |  99 ---
 lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.h        |  75 --
 .../RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp       |  80 --
 lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.h  |  62 --
 lib/Target/RISCV/RISCV.h                           |  37 -
 lib/Target/RISCV/RISCV.td                          |  88 ---
 lib/Target/RISCV/RISCVAsmPrinter.cpp               |  72 --
 lib/Target/RISCV/RISCVCallingConv.td               |  32 -
 lib/Target/RISCV/RISCVFrameLowering.cpp            |  29 -
 lib/Target/RISCV/RISCVFrameLowering.h              |  41 -
 lib/Target/RISCV/RISCVISelDAGToDAG.cpp             |  88 ---
 lib/Target/RISCV/RISCVISelLowering.cpp             | 559 -------------
 lib/Target/RISCV/RISCVISelLowering.h               |  74 --
 lib/Target/RISCV/RISCVInstrFormats.td              | 285 -------
 lib/Target/RISCV/RISCVInstrFormatsC.td             | 136 ----
 lib/Target/RISCV/RISCVInstrInfo.cpp                |  77 --
 lib/Target/RISCV/RISCVInstrInfo.h                  |  46 --
 lib/Target/RISCV/RISCVInstrInfo.td                 | 496 ------------
 lib/Target/RISCV/RISCVInstrInfoA.td                |  77 --
 lib/Target/RISCV/RISCVInstrInfoC.td                | 190 -----
 lib/Target/RISCV/RISCVInstrInfoD.td                | 161 ----
 lib/Target/RISCV/RISCVInstrInfoF.td                | 189 -----
 lib/Target/RISCV/RISCVInstrInfoM.td                |  36 -
 lib/Target/RISCV/RISCVMCInstLower.cpp              | 105 ---
 lib/Target/RISCV/RISCVRegisterInfo.cpp             |  95 ---
 lib/Target/RISCV/RISCVRegisterInfo.h               |  45 --
 lib/Target/RISCV/RISCVRegisterInfo.td              | 183 -----
 lib/Target/RISCV/RISCVSubtarget.cpp                |  48 --
 lib/Target/RISCV/RISCVSubtarget.h                  |  85 --
 lib/Target/RISCV/RISCVTargetMachine.cpp            |  89 ---
 lib/Target/RISCV/RISCVTargetMachine.h              |  46 --
 lib/Target/RISCV/TargetInfo/CMakeLists.txt         |   3 -
 lib/Target/RISCV/TargetInfo/LLVMBuild.txt          |  23 -
 lib/Target/RISCV/TargetInfo/RISCVTargetInfo.cpp    |  30 -
 test/CodeGen/RISCV/addc-adde-sube-subc.ll          |  30 -
 test/CodeGen/RISCV/alu32.ll                        | 186 -----
 test/CodeGen/RISCV/bare-select.ll                  |  17 -
 test/CodeGen/RISCV/blockaddress.ll                 |  28 -
 test/CodeGen/RISCV/branch.ll                       | 121 ---
 test/CodeGen/RISCV/bswap-ctlz-cttz-ctpop.ll        | 543 -------------
 test/CodeGen/RISCV/calls.ll                        |  83 --
 test/CodeGen/RISCV/div.ll                          | 134 ----
 test/CodeGen/RISCV/i32-icmp.ll                     | 114 ---
 test/CodeGen/RISCV/imm.ll                          |  47 --
 test/CodeGen/RISCV/indirectbr.ll                   |  36 -
 test/CodeGen/RISCV/jumptable.ll                    |  63 --
 test/CodeGen/RISCV/lit.local.cfg                   |   2 -
 test/CodeGen/RISCV/mem.ll                          | 202 -----
 test/CodeGen/RISCV/mul.ll                          |  81 --
 test/CodeGen/RISCV/rem.ll                          |  29 -
 test/CodeGen/RISCV/rotl-rotr.ll                    |  38 -
 test/CodeGen/RISCV/select-cc.ll                    | 100 ---
 test/CodeGen/RISCV/sext-zext-trunc.ll              | 285 -------
 test/CodeGen/RISCV/shifts.ll                       |  45 --
 test/CodeGen/RISCV/wide-mem.ll                     |  34 -
 test/MC/RISCV/elf-header.s                         |  42 -
 test/MC/RISCV/fixups-compressed.s                  |  18 -
 test/MC/RISCV/fixups-diagnostics.s                 |  18 -
 test/MC/RISCV/fixups.s                             |  49 --
 test/MC/RISCV/hilo-constaddr.s                     |  39 -
 test/MC/RISCV/lit.local.cfg                        |   3 -
 test/MC/RISCV/relocations.s                        |  75 --
 test/MC/RISCV/rv32a-invalid.s                      |  17 -
 test/MC/RISCV/rv32a-valid.s                        | 146 ----
 test/MC/RISCV/rv32c-invalid.s                      |  31 -
 test/MC/RISCV/rv32c-valid.s                        |  42 -
 test/MC/RISCV/rv32d-invalid.s                      |  21 -
 test/MC/RISCV/rv32d-valid.s                        | 159 ----
 test/MC/RISCV/rv32f-invalid.s                      |  34 -
 test/MC/RISCV/rv32f-valid.s                        | 164 ----
 test/MC/RISCV/rv32i-invalid.s                      | 139 ----
 test/MC/RISCV/rv32i-valid.s                        | 238 ------
 test/MC/RISCV/rv32m-invalid.s                      |   9 -
 test/MC/RISCV/rv32m-valid.s                        |  33 -
 test/MC/RISCV/rv64a-invalid.s                      |  14 -
 test/MC/RISCV/rv64a-valid.s                        | 189 -----
 test/MC/RISCV/rv64c-invalid.s                      |  18 -
 test/MC/RISCV/rv64c-valid.s                        |  19 -
 test/MC/RISCV/rv64d-invalid.s                      |  11 -
 test/MC/RISCV/rv64d-valid.s                        |  49 --
 test/MC/RISCV/rv64f-invalid.s                      |   9 -
 test/MC/RISCV/rv64f-valid.s                        |  37 -
 test/MC/RISCV/rv64i-invalid.s                      |  20 -
 test/MC/RISCV/rv64i-valid.s                        |  98 ---
 test/MC/RISCV/rv64m-valid.s                        |  20 -
 test/Object/RISCV/elf-flags.yaml                   |  24 -
 test/Object/RISCV/lit.local.cfg                    |   2 -
 tools/llvm-objdump/llvm-objdump.cpp                |   1 -
 tools/llvm-readobj/ELFDumper.cpp                   |  11 -
 unittests/ADT/TripleTest.cpp                       |  36 -
 utils/update_llc_test_checks.py                    |  18 -
 122 files changed, 10107 deletions(-)
 delete mode 100644 include/llvm/BinaryFormat/ELFRelocs/RISCV.def
 delete mode 100644 lib/Target/RISCV/AsmParser/CMakeLists.txt
 delete mode 100644 lib/Target/RISCV/AsmParser/LLVMBuild.txt
 delete mode 100644 lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp
 delete mode 100644 lib/Target/RISCV/CMakeLists.txt
 delete mode 100644 lib/Target/RISCV/Disassembler/CMakeLists.txt
 delete mode 100644 lib/Target/RISCV/Disassembler/LLVMBuild.txt
 delete mode 100644 lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
 delete mode 100644 lib/Target/RISCV/InstPrinter/CMakeLists.txt
 delete mode 100644 lib/Target/RISCV/InstPrinter/LLVMBuild.txt
 delete mode 100644 lib/Target/RISCV/InstPrinter/RISCVInstPrinter.cpp
 delete mode 100644 lib/Target/RISCV/InstPrinter/RISCVInstPrinter.h
 delete mode 100644 lib/Target/RISCV/LLVMBuild.txt
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/CMakeLists.txt
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/LLVMBuild.txt
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVELFObjectWriter.cpp
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVFixupKinds.h
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.cpp
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.h
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.cpp
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.h
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp
 delete mode 100644 lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.h
 delete mode 100644 lib/Target/RISCV/RISCV.h
 delete mode 100644 lib/Target/RISCV/RISCV.td
 delete mode 100644 lib/Target/RISCV/RISCVAsmPrinter.cpp
 delete mode 100644 lib/Target/RISCV/RISCVCallingConv.td
 delete mode 100644 lib/Target/RISCV/RISCVFrameLowering.cpp
 delete mode 100644 lib/Target/RISCV/RISCVFrameLowering.h
 delete mode 100644 lib/Target/RISCV/RISCVISelDAGToDAG.cpp
 delete mode 100644 lib/Target/RISCV/RISCVISelLowering.cpp
 delete mode 100644 lib/Target/RISCV/RISCVISelLowering.h
 delete mode 100644 lib/Target/RISCV/RISCVInstrFormats.td
 delete mode 100644 lib/Target/RISCV/RISCVInstrFormatsC.td
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfo.cpp
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfo.h
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfo.td
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfoA.td
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfoC.td
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfoD.td
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfoF.td
 delete mode 100644 lib/Target/RISCV/RISCVInstrInfoM.td
 delete mode 100644 lib/Target/RISCV/RISCVMCInstLower.cpp
 delete mode 100644 lib/Target/RISCV/RISCVRegisterInfo.cpp
 delete mode 100644 lib/Target/RISCV/RISCVRegisterInfo.h
 delete mode 100644 lib/Target/RISCV/RISCVRegisterInfo.td
 delete mode 100644 lib/Target/RISCV/RISCVSubtarget.cpp
 delete mode 100644 lib/Target/RISCV/RISCVSubtarget.h
 delete mode 100644 lib/Target/RISCV/RISCVTargetMachine.cpp
 delete mode 100644 lib/Target/RISCV/RISCVTargetMachine.h
 delete mode 100644 lib/Target/RISCV/TargetInfo/CMakeLists.txt
 delete mode 100644 lib/Target/RISCV/TargetInfo/LLVMBuild.txt
 delete mode 100644 lib/Target/RISCV/TargetInfo/RISCVTargetInfo.cpp
 delete mode 100644 test/CodeGen/RISCV/addc-adde-sube-subc.ll
 delete mode 100644 test/CodeGen/RISCV/alu32.ll
 delete mode 100644 test/CodeGen/RISCV/bare-select.ll
 delete mode 100644 test/CodeGen/RISCV/blockaddress.ll
 delete mode 100644 test/CodeGen/RISCV/branch.ll
 delete mode 100644 test/CodeGen/RISCV/bswap-ctlz-cttz-ctpop.ll
 delete mode 100644 test/CodeGen/RISCV/calls.ll
 delete mode 100644 test/CodeGen/RISCV/div.ll
 delete mode 100644 test/CodeGen/RISCV/i32-icmp.ll
 delete mode 100644 test/CodeGen/RISCV/imm.ll
 delete mode 100644 test/CodeGen/RISCV/indirectbr.ll
 delete mode 100644 test/CodeGen/RISCV/jumptable.ll
 delete mode 100644 test/CodeGen/RISCV/lit.local.cfg
 delete mode 100644 test/CodeGen/RISCV/mem.ll
 delete mode 100644 test/CodeGen/RISCV/mul.ll
 delete mode 100644 test/CodeGen/RISCV/rem.ll
 delete mode 100644 test/CodeGen/RISCV/rotl-rotr.ll
 delete mode 100644 test/CodeGen/RISCV/select-cc.ll
 delete mode 100644 test/CodeGen/RISCV/sext-zext-trunc.ll
 delete mode 100644 test/CodeGen/RISCV/shifts.ll
 delete mode 100644 test/CodeGen/RISCV/wide-mem.ll
 delete mode 100644 test/MC/RISCV/elf-header.s
 delete mode 100644 test/MC/RISCV/fixups-compressed.s
 delete mode 100644 test/MC/RISCV/fixups-diagnostics.s
 delete mode 100644 test/MC/RISCV/fixups.s
 delete mode 100644 test/MC/RISCV/hilo-constaddr.s
 delete mode 100644 test/MC/RISCV/lit.local.cfg
 delete mode 100644 test/MC/RISCV/relocations.s
 delete mode 100644 test/MC/RISCV/rv32a-invalid.s
 delete mode 100644 test/MC/RISCV/rv32a-valid.s
 delete mode 100644 test/MC/RISCV/rv32c-invalid.s
 delete mode 100644 test/MC/RISCV/rv32c-valid.s
 delete mode 100644 test/MC/RISCV/rv32d-invalid.s
 delete mode 100644 test/MC/RISCV/rv32d-valid.s
 delete mode 100644 test/MC/RISCV/rv32f-invalid.s
 delete mode 100644 test/MC/RISCV/rv32f-valid.s
 delete mode 100644 test/MC/RISCV/rv32i-invalid.s
 delete mode 100644 test/MC/RISCV/rv32i-valid.s
 delete mode 100644 test/MC/RISCV/rv32m-invalid.s
 delete mode 100644 test/MC/RISCV/rv32m-valid.s
 delete mode 100644 test/MC/RISCV/rv64a-invalid.s
 delete mode 100644 test/MC/RISCV/rv64a-valid.s
 delete mode 100644 test/MC/RISCV/rv64c-invalid.s
 delete mode 100644 test/MC/RISCV/rv64c-valid.s
 delete mode 100644 test/MC/RISCV/rv64d-invalid.s
 delete mode 100644 test/MC/RISCV/rv64d-valid.s
 delete mode 100644 test/MC/RISCV/rv64f-invalid.s
 delete mode 100644 test/MC/RISCV/rv64f-valid.s
 delete mode 100644 test/MC/RISCV/rv64i-invalid.s
 delete mode 100644 test/MC/RISCV/rv64i-valid.s
 delete mode 100644 test/MC/RISCV/rv64m-valid.s
 delete mode 100644 test/Object/RISCV/elf-flags.yaml
 delete mode 100644 test/Object/RISCV/lit.local.cfg

diff --git a/docs/CompilerWriterInfo.rst b/docs/CompilerWriterInfo.rst
index 60f102472c6..4e5d8dc2026 100644
--- a/docs/CompilerWriterInfo.rst
+++ b/docs/CompilerWriterInfo.rst
@@ -74,10 +74,6 @@ AMDGPU
 
 Refer to :doc:`AMDGPUUsage` for additional documentation.
 
-RISC-V
-------
-* `RISC-V User-Level ISA Specification <https://riscv.org/specifications/>`_
-
 SPARC
 -----
 
diff --git a/include/llvm/ADT/Triple.h b/include/llvm/ADT/Triple.h
index 74fc8eb8ccb..b1957cb51e7 100644
--- a/include/llvm/ADT/Triple.h
+++ b/include/llvm/ADT/Triple.h
@@ -66,8 +66,6 @@ public:
     ppc64le,        // PPC64LE: powerpc64le
     r600,           // R600: AMD GPUs HD2XXX - HD6XXX
     amdgcn,         // AMDGCN: AMD GCN GPUs
-    riscv32,        // RISC-V (32-bit): riscv32
-    riscv64,        // RISC-V (64-bit): riscv64
     sparc,          // Sparc: sparc
     sparcv9,        // Sparcv9: Sparcv9
     sparcel,        // Sparc: (endianness = little). NB: 'Sparcle' is a CPU variant
diff --git a/include/llvm/BinaryFormat/ELF.h b/include/llvm/BinaryFormat/ELF.h
index 5cedd99fdc0..8bc0475a83c 100644
--- a/include/llvm/BinaryFormat/ELF.h
+++ b/include/llvm/BinaryFormat/ELF.h
@@ -309,7 +309,6 @@ enum {
   EM_NORC = 218,          // Nanoradio Optimized RISC
   EM_CSR_KALIMBA = 219,   // CSR Kalimba architecture family
   EM_AMDGPU = 224,        // AMD GPU architecture
-  EM_RISCV = 243,         // RISC-V
   EM_LANAI = 244,         // Lanai 32-bit processor
   EM_BPF = 247,           // Linux kernel bpf virtual machine
 
@@ -616,22 +615,6 @@ enum {
 #include "ELFRelocs/Lanai.def"
 };
 
-// RISCV Specific e_flags
-enum : unsigned {
-  EF_RISCV_RVC = 0x0001,
-  EF_RISCV_FLOAT_ABI = 0x0006,
-  EF_RISCV_FLOAT_ABI_SOFT = 0x0000,
-  EF_RISCV_FLOAT_ABI_SINGLE = 0x0002,
-  EF_RISCV_FLOAT_ABI_DOUBLE = 0x0004,
-  EF_RISCV_FLOAT_ABI_QUAD = 0x0006,
-  EF_RISCV_RVE = 0x0008
-};
-
-// ELF Relocation types for RISC-V
-enum {
-#include "ELFRelocs/RISCV.def"
-};
-
 // ELF Relocation types for S390/zSeries
 enum {
 #include "ELFRelocs/SystemZ.def"
diff --git a/include/llvm/BinaryFormat/ELFRelocs/RISCV.def b/include/llvm/BinaryFormat/ELFRelocs/RISCV.def
deleted file mode 100644
index 5cc4c0ec302..00000000000
--- a/include/llvm/BinaryFormat/ELFRelocs/RISCV.def
+++ /dev/null
@@ -1,59 +0,0 @@
-
-#ifndef ELF_RELOC
-#error "ELF_RELOC must be defined"
-#endif
-
-ELF_RELOC(R_RISCV_NONE,               0)
-ELF_RELOC(R_RISCV_32,                 1)
-ELF_RELOC(R_RISCV_64,                 2)
-ELF_RELOC(R_RISCV_RELATIVE,           3)
-ELF_RELOC(R_RISCV_COPY,               4)
-ELF_RELOC(R_RISCV_JUMP_SLOT,          5)
-ELF_RELOC(R_RISCV_TLS_DTPMOD32,       6)
-ELF_RELOC(R_RISCV_TLS_DTPMOD64,       7)
-ELF_RELOC(R_RISCV_TLS_DTPREL32,       8)
-ELF_RELOC(R_RISCV_TLS_DTPREL64,       9)
-ELF_RELOC(R_RISCV_TLS_TPREL32,       10)
-ELF_RELOC(R_RISCV_TLS_TPREL64,       11)
-ELF_RELOC(R_RISCV_BRANCH,            16)
-ELF_RELOC(R_RISCV_JAL,               17)
-ELF_RELOC(R_RISCV_CALL,              18)
-ELF_RELOC(R_RISCV_CALL_PLT,          19)
-ELF_RELOC(R_RISCV_GOT_HI20,          20)
-ELF_RELOC(R_RISCV_TLS_GOT_HI20,      21)
-ELF_RELOC(R_RISCV_TLS_GD_HI20,       22)
-ELF_RELOC(R_RISCV_PCREL_HI20,        23)
-ELF_RELOC(R_RISCV_PCREL_LO12_I,      24)
-ELF_RELOC(R_RISCV_PCREL_LO12_S,      25)
-ELF_RELOC(R_RISCV_HI20,              26)
-ELF_RELOC(R_RISCV_LO12_I,            27)
-ELF_RELOC(R_RISCV_LO12_S,            28)
-ELF_RELOC(R_RISCV_TPREL_HI20,        29)
-ELF_RELOC(R_RISCV_TPREL_LO12_I,      30)
-ELF_RELOC(R_RISCV_TPREL_LO12_S,      31)
-ELF_RELOC(R_RISCV_TPREL_ADD,         32)
-ELF_RELOC(R_RISCV_ADD8,              33)
-ELF_RELOC(R_RISCV_ADD16,             34)
-ELF_RELOC(R_RISCV_ADD32,             35)
-ELF_RELOC(R_RISCV_ADD64,             36)
-ELF_RELOC(R_RISCV_SUB8,              37)
-ELF_RELOC(R_RISCV_SUB16,             38)
-ELF_RELOC(R_RISCV_SUB32,             39)
-ELF_RELOC(R_RISCV_SUB64,             40)
-ELF_RELOC(R_RISCV_GNU_VTINHERIT,     41)
-ELF_RELOC(R_RISCV_GNU_VTENTRY,       42)
-ELF_RELOC(R_RISCV_ALIGN,             43)
-ELF_RELOC(R_RISCV_RVC_BRANCH,        44)
-ELF_RELOC(R_RISCV_RVC_JUMP,          45)
-ELF_RELOC(R_RISCV_RVC_LUI,           46)
-ELF_RELOC(R_RISCV_GPREL_I,           47)
-ELF_RELOC(R_RISCV_GPREL_S,           48)
-ELF_RELOC(R_RISCV_TPREL_I,           49)
-ELF_RELOC(R_RISCV_TPREL_S,           50)
-ELF_RELOC(R_RISCV_RELAX,             51)
-ELF_RELOC(R_RISCV_SUB6,              52)
-ELF_RELOC(R_RISCV_SET6,              53)
-ELF_RELOC(R_RISCV_SET8,              54)
-ELF_RELOC(R_RISCV_SET16,             55)
-ELF_RELOC(R_RISCV_SET32,             56)
-ELF_RELOC(R_RISCV_32_PCREL,          57)
diff --git a/include/llvm/Object/ELFObjectFile.h b/include/llvm/Object/ELFObjectFile.h
index 905ce450f7f..75006dcf031 100644
--- a/include/llvm/Object/ELFObjectFile.h
+++ b/include/llvm/Object/ELFObjectFile.h
@@ -981,8 +981,6 @@ StringRef ELFObjectFile<ELFT>::getFileFormatName() const {
       return "ELF32-mips";
     case ELF::EM_PPC:
       return "ELF32-ppc";
-    case ELF::EM_RISCV:
-      return "ELF32-riscv";
     case ELF::EM_SPARC:
     case ELF::EM_SPARC32PLUS:
       return "ELF32-sparc";
@@ -1003,8 +1001,6 @@ StringRef ELFObjectFile<ELFT>::getFileFormatName() const {
       return (IsLittleEndian ? "ELF64-aarch64-little" : "ELF64-aarch64-big");
     case ELF::EM_PPC64:
       return "ELF64-ppc64";
-    case ELF::EM_RISCV:
-      return "ELF64-riscv";
     case ELF::EM_S390:
       return "ELF64-s390";
     case ELF::EM_SPARCV9:
@@ -1058,15 +1054,6 @@ unsigned ELFObjectFile<ELFT>::getArch() const {
     return Triple::ppc;
   case ELF::EM_PPC64:
     return IsLittleEndian ? Triple::ppc64le : Triple::ppc64;
-  case ELF::EM_RISCV:
-    switch (EF.getHeader()->e_ident[ELF::EI_CLASS]) {
-    case ELF::ELFCLASS32:
-      return Triple::riscv32;
-    case ELF::ELFCLASS64:
-      return Triple::riscv64;
-    default:
-      report_fatal_error("Invalid ELFCLASS!");
-    }
   case ELF::EM_S390:
     return Triple::systemz;
 
diff --git a/include/llvm/module.modulemap b/include/llvm/module.modulemap
index 382942be64a..47c32d3aa91 100644
--- a/include/llvm/module.modulemap
+++ b/include/llvm/module.modulemap
@@ -56,7 +56,6 @@ module LLVM_BinaryFormat {
     textual header "BinaryFormat/ELFRelocs/Mips.def"
     textual header "BinaryFormat/ELFRelocs/PowerPC64.def"
     textual header "BinaryFormat/ELFRelocs/PowerPC.def"
-    textual header "BinaryFormat/ELFRelocs/RISCV.def"
     textual header "BinaryFormat/ELFRelocs/Sparc.def"
     textual header "BinaryFormat/ELFRelocs/SystemZ.def"
     textual header "BinaryFormat/ELFRelocs/x86_64.def"
diff --git a/lib/Object/ELF.cpp b/lib/Object/ELF.cpp
index c72a1258c1e..1caa0ccaa18 100644
--- a/lib/Object/ELF.cpp
+++ b/lib/Object/ELF.cpp
@@ -102,13 +102,6 @@ StringRef llvm::object::getELFRelocationTypeName(uint32_t Machine,
       break;
     }
     break;
-  case ELF::EM_RISCV:
-    switch (Type) {
-#include "llvm/BinaryFormat/ELFRelocs/RISCV.def"
-    default:
-      break;
-    }
-    break;
   case ELF::EM_S390:
     switch (Type) {
 #include "llvm/BinaryFormat/ELFRelocs/SystemZ.def"
diff --git a/lib/ObjectYAML/ELFYAML.cpp b/lib/ObjectYAML/ELFYAML.cpp
index 7e7f3d1fdde..ccd1cbbc209 100644
--- a/lib/ObjectYAML/ELFYAML.cpp
+++ b/lib/ObjectYAML/ELFYAML.cpp
@@ -213,7 +213,6 @@ void ScalarEnumerationTraits<ELFYAML::ELF_EM>::enumeration(
   ECase(EM_78KOR);
   ECase(EM_56800EX);
   ECase(EM_AMDGPU);
-  ECase(EM_RISCV);
   ECase(EM_LANAI);
   ECase(EM_BPF);
 #undef ECase
@@ -360,14 +359,6 @@ void ScalarBitSetTraits<ELFYAML::ELF_EF>::bitset(IO &IO,
     BCase(EF_AVR_ARCH_XMEGA6);
     BCase(EF_AVR_ARCH_XMEGA7);
     break;
-  case ELF::EM_RISCV:
-    BCase(EF_RISCV_RVC);
-    BCaseMask(EF_RISCV_FLOAT_ABI_SOFT, EF_RISCV_FLOAT_ABI);
-    BCaseMask(EF_RISCV_FLOAT_ABI_SINGLE, EF_RISCV_FLOAT_ABI);
-    BCaseMask(EF_RISCV_FLOAT_ABI_DOUBLE, EF_RISCV_FLOAT_ABI);
-    BCaseMask(EF_RISCV_FLOAT_ABI_QUAD, EF_RISCV_FLOAT_ABI);
-    BCase(EF_RISCV_RVE);
-    break;
   case ELF::EM_AMDGPU:
     BCaseMask(EF_AMDGPU_ARCH_R600, EF_AMDGPU_ARCH);
     BCaseMask(EF_AMDGPU_ARCH_GCN, EF_AMDGPU_ARCH);
@@ -595,9 +586,6 @@ void ScalarEnumerationTraits<ELFYAML::ELF_REL>::enumeration(
   case ELF::EM_ARC:
 #include "llvm/BinaryFormat/ELFRelocs/ARC.def"
     break;
-  case ELF::EM_RISCV:
-#include "llvm/BinaryFormat/ELFRelocs/RISCV.def"
-    break;
   case ELF::EM_LANAI:
 #include "llvm/BinaryFormat/ELFRelocs/Lanai.def"
     break;
diff --git a/lib/Support/Triple.cpp b/lib/Support/Triple.cpp
index 4f0a30042b7..6412bc9511f 100644
--- a/lib/Support/Triple.cpp
+++ b/lib/Support/Triple.cpp
@@ -41,8 +41,6 @@ StringRef Triple::getArchTypeName(ArchType Kind) {
   case ppc:            return "powerpc";
   case r600:           return "r600";
   case amdgcn:         return "amdgcn";
-  case riscv32:        return "riscv32";
-  case riscv64:        return "riscv64";
   case sparc:          return "sparc";
   case sparcv9:        return "sparcv9";
   case sparcel:        return "sparcel";
@@ -143,9 +141,6 @@ StringRef Triple::getArchTypePrefix(ArchType Kind) {
   case shave:       return "shave";
   case wasm32:
   case wasm64:      return "wasm";
-
-  case riscv32:
-  case riscv64:     return "riscv";
   }
 }
 
@@ -279,8 +274,6 @@ Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
     .Case("ppc64le", ppc64le)
     .Case("r600", r600)
     .Case("amdgcn", amdgcn)
-    .Case("riscv32", riscv32)
-    .Case("riscv64", riscv64)
     .Case("hexagon", hexagon)
     .Case("sparc", sparc)
     .Case("sparcel", sparcel)
@@ -406,8 +399,6 @@ static Triple::ArchType parseArch(StringRef ArchName) {
     .Case("nios2", Triple::nios2)
     .Case("r600", Triple::r600)
     .Case("amdgcn", Triple::amdgcn)
-    .Case("riscv32", Triple::riscv32)
-    .Case("riscv64", Triple::riscv64)
     .Case("hexagon", Triple::hexagon)
     .Cases("s390x", "systemz", Triple::systemz)
     .Case("sparc", Triple::sparc)
@@ -658,8 +649,6 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::r600:
   case Triple::renderscript32:
   case Triple::renderscript64:
-  case Triple::riscv32:
-  case Triple::riscv64:
   case Triple::shave:
   case Triple::sparc:
   case Triple::sparcel:
@@ -1196,7 +1185,6 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::nvptx:
   case llvm::Triple::ppc:
   case llvm::Triple::r600:
-  case llvm::Triple::riscv32:
   case llvm::Triple::sparc:
   case llvm::Triple::sparcel:
   case llvm::Triple::tce:
@@ -1226,7 +1214,6 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::nvptx64:
   case llvm::Triple::ppc64:
   case llvm::Triple::ppc64le:
-  case llvm::Triple::riscv64:
   case llvm::Triple::sparcv9:
   case llvm::Triple::systemz:
   case llvm::Triple::x86_64:
@@ -1281,7 +1268,6 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::nvptx:
   case Triple::ppc:
   case Triple::r600:
-  case Triple::riscv32:
   case Triple::sparc:
   case Triple::sparcel:
   case Triple::tce:
@@ -1305,7 +1291,6 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::nvptx64:        T.setArch(Triple::nvptx);   break;
   case Triple::ppc64:          T.setArch(Triple::ppc);     break;
   case Triple::sparcv9:        T.setArch(Triple::sparc);   break;
-  case Triple::riscv64:        T.setArch(Triple::riscv32); break;
   case Triple::x86_64:         T.setArch(Triple::x86);     break;
   case Triple::amdil64:        T.setArch(Triple::amdil);   break;
   case Triple::hsail64:        T.setArch(Triple::hsail);   break;
@@ -1350,7 +1335,6 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::nvptx64:
   case Triple::ppc64:
   case Triple::ppc64le:
-  case Triple::riscv64:
   case Triple::sparcv9:
   case Triple::systemz:
   case Triple::x86_64:
@@ -1367,7 +1351,6 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::nvptx:           T.setArch(Triple::nvptx64);    break;
   case Triple::ppc:             T.setArch(Triple::ppc64);      break;
   case Triple::sparc:           T.setArch(Triple::sparcv9);    break;
-  case Triple::riscv32:         T.setArch(Triple::riscv64);    break;
   case Triple::x86:             T.setArch(Triple::x86_64);     break;
   case Triple::amdil:           T.setArch(Triple::amdil64);    break;
   case Triple::hsail:           T.setArch(Triple::hsail64);    break;
@@ -1402,8 +1385,6 @@ Triple Triple::getBigEndianArchVariant() const {
   case Triple::nvptx64:
   case Triple::nvptx:
   case Triple::r600:
-  case Triple::riscv32:
-  case Triple::riscv64:
   case Triple::shave:
   case Triple::spir64:
   case Triple::spir:
@@ -1490,8 +1471,6 @@ bool Triple::isLittleEndian() const {
   case Triple::nvptx:
   case Triple::ppc64le:
   case Triple::r600:
-  case Triple::riscv32:
-  case Triple::riscv64:
   case Triple::shave:
   case Triple::sparcel:
   case Triple::spir64:
diff --git a/lib/Target/LLVMBuild.txt b/lib/Target/LLVMBuild.txt
index 0d899a9c782..87d5ce11751 100644
--- a/lib/Target/LLVMBuild.txt
+++ b/lib/Target/LLVMBuild.txt
@@ -32,7 +32,6 @@ subdirectories =
  Mips
  Nios2
  PowerPC
- RISCV
  Sparc
  SystemZ
  WebAssembly
diff --git a/lib/Target/RISCV/AsmParser/CMakeLists.txt b/lib/Target/RISCV/AsmParser/CMakeLists.txt
deleted file mode 100644
index 10d0c89537c..00000000000
--- a/lib/Target/RISCV/AsmParser/CMakeLists.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-add_llvm_library(LLVMRISCVAsmParser
-  RISCVAsmParser.cpp
-  )
diff --git a/lib/Target/RISCV/AsmParser/LLVMBuild.txt b/lib/Target/RISCV/AsmParser/LLVMBuild.txt
deleted file mode 100644
index a9ad92c872e..00000000000
--- a/lib/Target/RISCV/AsmParser/LLVMBuild.txt
+++ /dev/null
@@ -1,23 +0,0 @@
-;===- ./lib/Target/RISCV/AsmParser/LLVMBuild.txt ---------------*- Conf -*--===;
-;
-;                     The LLVM Compiler Infrastructure
-;
-; This file is distributed under the University of Illinois Open Source
-; License. See LICENSE.TXT for details.
-;
-;===------------------------------------------------------------------------===;
-;
-; This is an LLVMBuild description file for the components in this subdirectory.
-;
-; For more information on the LLVMBuild system, please see:
-;
-;   http://llvm.org/docs/LLVMBuild.html
-;
-;===------------------------------------------------------------------------===;
-
-[component_0]
-type = Library
-name = RISCVAsmParser
-parent = RISCV
-required_libraries = MC MCParser RISCVDesc RISCVInfo Support
-add_to_library_groups = RISCV
diff --git a/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp b/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp
deleted file mode 100644
index cde00f5d515..00000000000
--- a/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp
+++ /dev/null
@@ -1,867 +0,0 @@
-//===-- RISCVAsmParser.cpp - Parse RISCV assembly to MCInst instructions --===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-#include "MCTargetDesc/RISCVBaseInfo.h"
-#include "MCTargetDesc/RISCVMCExpr.h"
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "llvm/ADT/STLExtras.h"
-#include "llvm/ADT/StringSwitch.h"
-#include "llvm/MC/MCContext.h"
-#include "llvm/MC/MCExpr.h"
-#include "llvm/MC/MCInst.h"
-#include "llvm/MC/MCParser/MCAsmLexer.h"
-#include "llvm/MC/MCParser/MCParsedAsmOperand.h"
-#include "llvm/MC/MCParser/MCTargetAsmParser.h"
-#include "llvm/MC/MCRegisterInfo.h"
-#include "llvm/MC/MCStreamer.h"
-#include "llvm/MC/MCSubtargetInfo.h"
-#include "llvm/Support/Casting.h"
-#include "llvm/Support/TargetRegistry.h"
-
-using namespace llvm;
-
-namespace {
-struct RISCVOperand;
-
-class RISCVAsmParser : public MCTargetAsmParser {
-  SMLoc getLoc() const { return getParser().getTok().getLoc(); }
-  bool isRV64() const { return getSTI().hasFeature(RISCV::Feature64Bit); }
-
-  unsigned validateTargetOperandClass(MCParsedAsmOperand &Op,
-                                      unsigned Kind) override;
-
-  bool generateImmOutOfRangeError(OperandVector &Operands, uint64_t ErrorInfo,
-                                  int Lower, int Upper, Twine Msg);
-
-  bool MatchAndEmitInstruction(SMLoc IDLoc, unsigned &Opcode,
-                               OperandVector &Operands, MCStreamer &Out,
-                               uint64_t &ErrorInfo,
-                               bool MatchingInlineAsm) override;
-
-  bool ParseRegister(unsigned &RegNo, SMLoc &StartLoc, SMLoc &EndLoc) override;
-
-  bool ParseInstruction(ParseInstructionInfo &Info, StringRef Name,
-                        SMLoc NameLoc, OperandVector &Operands) override;
-
-  bool ParseDirective(AsmToken DirectiveID) override;
-
-// Auto-generated instruction matching functions
-#define GET_ASSEMBLER_HEADER
-#include "RISCVGenAsmMatcher.inc"
-
-  OperandMatchResultTy parseImmediate(OperandVector &Operands);
-  OperandMatchResultTy parseRegister(OperandVector &Operands,
-                                     bool AllowParens = false);
-  OperandMatchResultTy parseMemOpBaseReg(OperandVector &Operands);
-  OperandMatchResultTy parseOperandWithModifier(OperandVector &Operands);
-
-  bool parseOperand(OperandVector &Operands);
-
-public:
-  enum RISCVMatchResultTy {
-    Match_Dummy = FIRST_TARGET_MATCH_RESULT_TY,
-#define GET_OPERAND_DIAGNOSTIC_TYPES
-#include "RISCVGenAsmMatcher.inc"
-#undef GET_OPERAND_DIAGNOSTIC_TYPES
-  };
-
-  static bool classifySymbolRef(const MCExpr *Expr,
-                                RISCVMCExpr::VariantKind &Kind,
-                                int64_t &Addend);
-
-  RISCVAsmParser(const MCSubtargetInfo &STI, MCAsmParser &Parser,
-                 const MCInstrInfo &MII, const MCTargetOptions &Options)
-      : MCTargetAsmParser(Options, STI, MII) {
-    setAvailableFeatures(ComputeAvailableFeatures(STI.getFeatureBits()));
-  }
-};
-
-/// RISCVOperand - Instances of this class represent a parsed machine
-/// instruction
-struct RISCVOperand : public MCParsedAsmOperand {
-
-  enum KindTy {
-    Token,
-    Register,
-    Immediate,
-  } Kind;
-
-  bool IsRV64;
-
-  struct RegOp {
-    unsigned RegNum;
-  };
-
-  struct ImmOp {
-    const MCExpr *Val;
-  };
-
-  SMLoc StartLoc, EndLoc;
-  union {
-    StringRef Tok;
-    RegOp Reg;
-    ImmOp Imm;
-  };
-
-  RISCVOperand(KindTy K) : MCParsedAsmOperand(), Kind(K) {}
-
-public:
-  RISCVOperand(const RISCVOperand &o) : MCParsedAsmOperand() {
-    Kind = o.Kind;
-    IsRV64 = o.IsRV64;
-    StartLoc = o.StartLoc;
-    EndLoc = o.EndLoc;
-    switch (Kind) {
-    case Register:
-      Reg = o.Reg;
-      break;
-    case Immediate:
-      Imm = o.Imm;
-      break;
-    case Token:
-      Tok = o.Tok;
-      break;
-    }
-  }
-
-  bool isToken() const override { return Kind == Token; }
-  bool isReg() const override { return Kind == Register; }
-  bool isImm() const override { return Kind == Immediate; }
-  bool isMem() const override { return false; }
-
-  bool evaluateConstantImm(int64_t &Imm, RISCVMCExpr::VariantKind &VK) const {
-    const MCExpr *Val = getImm();
-    bool Ret = false;
-    if (auto *RE = dyn_cast<RISCVMCExpr>(Val)) {
-      Ret = RE->evaluateAsConstant(Imm);
-      VK = RE->getKind();
-    } else if (auto CE = dyn_cast<MCConstantExpr>(Val)) {
-      Ret = true;
-      VK = RISCVMCExpr::VK_RISCV_None;
-      Imm = CE->getValue();
-    }
-    return Ret;
-  }
-
-  // True if operand is a symbol with no modifiers, or a constant with no
-  // modifiers and isShiftedInt<N-1, 1>(Op).
-  template <int N> bool isBareSimmNLsb0() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    if (!isImm())
-      return false;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    bool IsValid;
-    if (!IsConstantImm)
-      IsValid = RISCVAsmParser::classifySymbolRef(getImm(), VK, Imm);
-    else
-      IsValid = isShiftedInt<N - 1, 1>(Imm);
-    return IsValid && VK == RISCVMCExpr::VK_RISCV_None;
-  }
-
-  // Predicate methods for AsmOperands defined in RISCVInstrInfo.td
-
-  /// Return true if the operand is a valid for the fence instruction e.g.
-  /// ('iorw').
-  bool isFenceArg() const {
-    if (!isImm())
-      return false;
-    const MCExpr *Val = getImm();
-    auto *SVal = dyn_cast<MCSymbolRefExpr>(Val);
-    if (!SVal || SVal->getKind() != MCSymbolRefExpr::VK_None)
-      return false;
-
-    StringRef Str = SVal->getSymbol().getName();
-    // Letters must be unique, taken from 'iorw', and in ascending order. This
-    // holds as long as each individual character is one of 'iorw' and is
-    // greater than the previous character.
-    char Prev = '\0';
-    for (char c : Str) {
-      if (c != 'i' && c != 'o' && c != 'r' && c != 'w')
-        return false;
-      if (c <= Prev)
-        return false;
-      Prev = c;
-    }
-    return true;
-  }
-
-  /// Return true if the operand is a valid floating point rounding mode.
-  bool isFRMArg() const {
-    if (!isImm())
-      return false;
-    const MCExpr *Val = getImm();
-    auto *SVal = dyn_cast<MCSymbolRefExpr>(Val);
-    if (!SVal || SVal->getKind() != MCSymbolRefExpr::VK_None)
-      return false;
-
-    StringRef Str = SVal->getSymbol().getName();
-
-    return RISCVFPRndMode::stringToRoundingMode(Str) != RISCVFPRndMode::Invalid;
-  }
-
-  bool isUImmLog2XLen() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    if (!isImm())
-      return false;
-    if (!evaluateConstantImm(Imm, VK) || VK != RISCVMCExpr::VK_RISCV_None)
-      return false;
-    return (isRV64() && isUInt<6>(Imm)) || isUInt<5>(Imm);
-  }
-
-  bool isUImm5() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    if (!isImm())
-      return false;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    return IsConstantImm && isUInt<5>(Imm) && VK == RISCVMCExpr::VK_RISCV_None;
-  }
-
-  bool isUImm7Lsb00() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    return IsConstantImm && isShiftedUInt<5, 2>(Imm) &&
-           VK == RISCVMCExpr::VK_RISCV_None;
-  }
-
-  bool isUImm8Lsb00() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    return IsConstantImm && isShiftedUInt<6, 2>(Imm) &&
-           VK == RISCVMCExpr::VK_RISCV_None;
-  }
-
-  bool isUImm8Lsb000() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    return IsConstantImm && isShiftedUInt<5, 3>(Imm) &&
-           VK == RISCVMCExpr::VK_RISCV_None;
-  }
-
-  bool isSImm9Lsb0() const { return isBareSimmNLsb0<9>(); }
-
-  bool isUImm9Lsb000() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    return IsConstantImm && isShiftedUInt<6, 3>(Imm) &&
-           VK == RISCVMCExpr::VK_RISCV_None;
-  }
-
-  bool isSImm12() const {
-    RISCVMCExpr::VariantKind VK;
-    int64_t Imm;
-    bool IsValid;
-    if (!isImm())
-      return false;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    if (!IsConstantImm)
-      IsValid = RISCVAsmParser::classifySymbolRef(getImm(), VK, Imm);
-    else
-      IsValid = isInt<12>(Imm);
-    return IsValid &&
-           (VK == RISCVMCExpr::VK_RISCV_None || VK == RISCVMCExpr::VK_RISCV_LO);
-  }
-
-  bool isSImm12Lsb0() const { return isBareSimmNLsb0<12>(); }
-
-  bool isUImm12() const {
-    int64_t Imm;
-    RISCVMCExpr::VariantKind VK;
-    if (!isImm())
-      return false;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    return IsConstantImm && isUInt<12>(Imm) && VK == RISCVMCExpr::VK_RISCV_None;
-  }
-
-  bool isSImm13Lsb0() const { return isBareSimmNLsb0<13>(); }
-
-  bool isUImm20() const {
-    RISCVMCExpr::VariantKind VK;
-    int64_t Imm;
-    bool IsValid;
-    if (!isImm())
-      return false;
-    bool IsConstantImm = evaluateConstantImm(Imm, VK);
-    if (!IsConstantImm)
-      IsValid = RISCVAsmParser::classifySymbolRef(getImm(), VK, Imm);
-    else
-      IsValid = isUInt<20>(Imm);
-    return IsValid && (VK == RISCVMCExpr::VK_RISCV_None ||
-                       VK == RISCVMCExpr::VK_RISCV_HI ||
-                       VK == RISCVMCExpr::VK_RISCV_PCREL_HI);
-  }
-
-  bool isSImm21Lsb0() const { return isBareSimmNLsb0<21>(); }
-
-  /// getStartLoc - Gets location of the first token of this operand
-  SMLoc getStartLoc() const override { return StartLoc; }
-  /// getEndLoc - Gets location of the last token of this operand
-  SMLoc getEndLoc() const override { return EndLoc; }
-  /// True if this operand is for an RV64 instruction
-  bool isRV64() const { return IsRV64; }
-
-  unsigned getReg() const override {
-    assert(Kind == Register && "Invalid type access!");
-    return Reg.RegNum;
-  }
-
-  const MCExpr *getImm() const {
-    assert(Kind == Immediate && "Invalid type access!");
-    return Imm.Val;
-  }
-
-  StringRef getToken() const {
-    assert(Kind == Token && "Invalid type access!");
-    return Tok;
-  }
-
-  void print(raw_ostream &OS) const override {
-    switch (Kind) {
-    case Immediate:
-      OS << *getImm();
-      break;
-    case Register:
-      OS << "<register x";
-      OS << getReg() << ">";
-      break;
-    case Token:
-      OS << "'" << getToken() << "'";
-      break;
-    }
-  }
-
-  static std::unique_ptr<RISCVOperand> createToken(StringRef Str, SMLoc S,
-                                                   bool IsRV64) {
-    auto Op = make_unique<RISCVOperand>(Token);
-    Op->Tok = Str;
-    Op->StartLoc = S;
-    Op->EndLoc = S;
-    Op->IsRV64 = IsRV64;
-    return Op;
-  }
-
-  static std::unique_ptr<RISCVOperand> createReg(unsigned RegNo, SMLoc S,
-                                                 SMLoc E, bool IsRV64) {
-    auto Op = make_unique<RISCVOperand>(Register);
-    Op->Reg.RegNum = RegNo;
-    Op->StartLoc = S;
-    Op->EndLoc = E;
-    Op->IsRV64 = IsRV64;
-    return Op;
-  }
-
-  static std::unique_ptr<RISCVOperand> createImm(const MCExpr *Val, SMLoc S,
-                                                 SMLoc E, bool IsRV64) {
-    auto Op = make_unique<RISCVOperand>(Immediate);
-    Op->Imm.Val = Val;
-    Op->StartLoc = S;
-    Op->EndLoc = E;
-    Op->IsRV64 = IsRV64;
-    return Op;
-  }
-
-  void addExpr(MCInst &Inst, const MCExpr *Expr) const {
-    assert(Expr && "Expr shouldn't be null!");
-    int64_t Imm = 0;
-    bool IsConstant = false;
-    if (auto *RE = dyn_cast<RISCVMCExpr>(Expr)) {
-      IsConstant = RE->evaluateAsConstant(Imm);
-    } else if (auto *CE = dyn_cast<MCConstantExpr>(Expr)) {
-      IsConstant = true;
-      Imm = CE->getValue();
-    }
-
-    if (IsConstant)
-      Inst.addOperand(MCOperand::createImm(Imm));
-    else
-      Inst.addOperand(MCOperand::createExpr(Expr));
-  }
-
-  // Used by the TableGen Code
-  void addRegOperands(MCInst &Inst, unsigned N) const {
-    assert(N == 1 && "Invalid number of operands!");
-    Inst.addOperand(MCOperand::createReg(getReg()));
-  }
-
-  void addImmOperands(MCInst &Inst, unsigned N) const {
-    assert(N == 1 && "Invalid number of operands!");
-    addExpr(Inst, getImm());
-  }
-
-  void addFenceArgOperands(MCInst &Inst, unsigned N) const {
-    assert(N == 1 && "Invalid number of operands!");
-    // isFenceArg has validated the operand, meaning this cast is safe
-    auto SE = cast<MCSymbolRefExpr>(getImm());
-
-    unsigned Imm = 0;
-    for (char c : SE->getSymbol().getName()) {
-      switch (c) {
-        default: llvm_unreachable("FenceArg must contain only [iorw]");
-        case 'i': Imm |= RISCVFenceField::I; break;
-        case 'o': Imm |= RISCVFenceField::O; break;
-        case 'r': Imm |= RISCVFenceField::R; break;
-        case 'w': Imm |= RISCVFenceField::W; break;
-      }
-    }
-    Inst.addOperand(MCOperand::createImm(Imm));
-  }
-
-  // Returns the rounding mode represented by this RISCVOperand. Should only
-  // be called after checking isFRMArg.
-  RISCVFPRndMode::RoundingMode getRoundingMode() const {
-    // isFRMArg has validated the operand, meaning this cast is safe.
-    auto SE = cast<MCSymbolRefExpr>(getImm());
-    RISCVFPRndMode::RoundingMode FRM =
-        RISCVFPRndMode::stringToRoundingMode(SE->getSymbol().getName());
-    assert(FRM != RISCVFPRndMode::Invalid && "Invalid rounding mode");
-    return FRM;
-  }
-
-  void addFRMArgOperands(MCInst &Inst, unsigned N) const {
-    assert(N == 1 && "Invalid number of operands!");
-    Inst.addOperand(MCOperand::createImm(getRoundingMode()));
-  }
-};
-} // end anonymous namespace.
-
-#define GET_REGISTER_MATCHER
-#define GET_MATCHER_IMPLEMENTATION
-#include "RISCVGenAsmMatcher.inc"
-
-// Return the matching FPR64 register for the given FPR32.
-// FIXME: Ideally this function could be removed in favour of using
-// information from TableGen.
-unsigned convertFPR32ToFPR64(unsigned Reg) {
-  switch (Reg) {
-    default:
-      llvm_unreachable("Not a recognised FPR32 register");
-    case RISCV::F0_32: return RISCV::F0_64;
-    case RISCV::F1_32: return RISCV::F1_64;
-    case RISCV::F2_32: return RISCV::F2_64;
-    case RISCV::F3_32: return RISCV::F3_64;
-    case RISCV::F4_32: return RISCV::F4_64;
-    case RISCV::F5_32: return RISCV::F5_64;
-    case RISCV::F6_32: return RISCV::F6_64;
-    case RISCV::F7_32: return RISCV::F7_64;
-    case RISCV::F8_32: return RISCV::F8_64;
-    case RISCV::F9_32: return RISCV::F9_64;
-    case RISCV::F10_32: return RISCV::F10_64;
-    case RISCV::F11_32: return RISCV::F11_64;
-    case RISCV::F12_32: return RISCV::F12_64;
-    case RISCV::F13_32: return RISCV::F13_64;
-    case RISCV::F14_32: return RISCV::F14_64;
-    case RISCV::F15_32: return RISCV::F15_64;
-    case RISCV::F16_32: return RISCV::F16_64;
-    case RISCV::F17_32: return RISCV::F17_64;
-    case RISCV::F18_32: return RISCV::F18_64;
-    case RISCV::F19_32: return RISCV::F19_64;
-    case RISCV::F20_32: return RISCV::F20_64;
-    case RISCV::F21_32: return RISCV::F21_64;
-    case RISCV::F22_32: return RISCV::F22_64;
-    case RISCV::F23_32: return RISCV::F23_64;
-    case RISCV::F24_32: return RISCV::F24_64;
-    case RISCV::F25_32: return RISCV::F25_64;
-    case RISCV::F26_32: return RISCV::F26_64;
-    case RISCV::F27_32: return RISCV::F27_64;
-    case RISCV::F28_32: return RISCV::F28_64;
-    case RISCV::F29_32: return RISCV::F29_64;
-    case RISCV::F30_32: return RISCV::F30_64;
-    case RISCV::F31_32: return RISCV::F31_64;
-  }
-}
-
-unsigned RISCVAsmParser::validateTargetOperandClass(MCParsedAsmOperand &AsmOp,
-                                                    unsigned Kind) {
-  RISCVOperand &Op = static_cast<RISCVOperand &>(AsmOp);
-  if (!Op.isReg())
-    return Match_InvalidOperand;
-
-  unsigned Reg = Op.getReg();
-  bool IsRegFPR32 =
-      RISCVMCRegisterClasses[RISCV::FPR32RegClassID].contains(Reg);
-
-  // As the parser couldn't differentiate an FPR32 from an FPR64, coerce the
-  // register from FPR32 to FPR64 if necessary.
-  if (IsRegFPR32 && Kind == MCK_FPR64) {
-    Op.Reg.RegNum = convertFPR32ToFPR64(Reg);
-    return Match_Success;
-  }
-  return Match_InvalidOperand;
-}
-
-bool RISCVAsmParser::generateImmOutOfRangeError(
-    OperandVector &Operands, uint64_t ErrorInfo, int Lower, int Upper,
-    Twine Msg = "immediate must be an integer in the range") {
-  SMLoc ErrorLoc = ((RISCVOperand &)*Operands[ErrorInfo]).getStartLoc();
-  return Error(ErrorLoc, Msg + " [" + Twine(Lower) + ", " + Twine(Upper) + "]");
-}
-
-bool RISCVAsmParser::MatchAndEmitInstruction(SMLoc IDLoc, unsigned &Opcode,
-                                             OperandVector &Operands,
-                                             MCStreamer &Out,
-                                             uint64_t &ErrorInfo,
-                                             bool MatchingInlineAsm) {
-  MCInst Inst;
-
-  switch (MatchInstructionImpl(Operands, Inst, ErrorInfo, MatchingInlineAsm)) {
-  default:
-    break;
-  case Match_Success:
-    Inst.setLoc(IDLoc);
-    Out.EmitInstruction(Inst, getSTI());
-    return false;
-  case Match_MissingFeature:
-    return Error(IDLoc, "instruction use requires an option to be enabled");
-  case Match_MnemonicFail:
-    return Error(IDLoc, "unrecognized instruction mnemonic");
-  case Match_InvalidOperand: {
-    SMLoc ErrorLoc = IDLoc;
-    if (ErrorInfo != ~0U) {
-      if (ErrorInfo >= Operands.size())
-        return Error(ErrorLoc, "too few operands for instruction");
-
-      ErrorLoc = ((RISCVOperand &)*Operands[ErrorInfo]).getStartLoc();
-      if (ErrorLoc == SMLoc())
-        ErrorLoc = IDLoc;
-    }
-    return Error(ErrorLoc, "invalid operand for instruction");
-  }
-  case Match_InvalidUImmLog2XLen:
-    if (isRV64())
-      return generateImmOutOfRangeError(Operands, ErrorInfo, 0, (1 << 6) - 1);
-    return generateImmOutOfRangeError(Operands, ErrorInfo, 0, (1 << 5) - 1);
-  case Match_InvalidUImm5:
-    return generateImmOutOfRangeError(Operands, ErrorInfo, 0, (1 << 5) - 1);
-  case Match_InvalidUImm7Lsb00:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, 0, (1 << 7) - 4,
-        "immediate must be a multiple of 4 bytes in the range");
-  case Match_InvalidUImm8Lsb00:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, 0, (1 << 8) - 4,
-        "immediate must be a multiple of 4 bytes in the range");
-  case Match_InvalidUImm8Lsb000:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, 0, (1 << 8) - 8,
-        "immediate must be a multiple of 8 bytes in the range");
-  case Match_InvalidSImm9Lsb0:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, -(1 << 8), (1 << 8) - 2,
-        "immediate must be a multiple of 2 bytes in the range");
-  case Match_InvalidUImm9Lsb000:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, 0, (1 << 9) - 8,
-        "immediate must be a multiple of 8 bytes in the range");
-  case Match_InvalidSImm12:
-    return generateImmOutOfRangeError(Operands, ErrorInfo, -(1 << 11),
-                                      (1 << 11) - 1);
-  case Match_InvalidSImm12Lsb0:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, -(1 << 11), (1 << 11) - 2,
-        "immediate must be a multiple of 2 bytes in the range");
-  case Match_InvalidUImm12:
-    return generateImmOutOfRangeError(Operands, ErrorInfo, 0, (1 << 12) - 1);
-  case Match_InvalidSImm13Lsb0:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, -(1 << 12), (1 << 12) - 2,
-        "immediate must be a multiple of 2 bytes in the range");
-  case Match_InvalidUImm20:
-    return generateImmOutOfRangeError(Operands, ErrorInfo, 0, (1 << 20) - 1);
-  case Match_InvalidSImm21Lsb0:
-    return generateImmOutOfRangeError(
-        Operands, ErrorInfo, -(1 << 20), (1 << 20) - 2,
-        "immediate must be a multiple of 2 bytes in the range");
-  case Match_InvalidFenceArg: {
-    SMLoc ErrorLoc = ((RISCVOperand &)*Operands[ErrorInfo]).getStartLoc();
-    return Error(
-        ErrorLoc,
-        "operand must be formed of letters selected in-order from 'iorw'");
-  }
-  case Match_InvalidFRMArg: {
-    SMLoc ErrorLoc = ((RISCVOperand &)*Operands[ErrorInfo]).getStartLoc();
-    return Error(
-        ErrorLoc,
-        "operand must be a valid floating point rounding mode mnemonic");
-  }
-  }
-
-  llvm_unreachable("Unknown match type detected!");
-}
-
-bool RISCVAsmParser::ParseRegister(unsigned &RegNo, SMLoc &StartLoc,
-                                   SMLoc &EndLoc) {
-  const AsmToken &Tok = getParser().getTok();
-  StartLoc = Tok.getLoc();
-  EndLoc = Tok.getEndLoc();
-  RegNo = 0;
-  StringRef Name = getLexer().getTok().getIdentifier();
-
-  if (!MatchRegisterName(Name) || !MatchRegisterAltName(Name)) {
-    getParser().Lex(); // Eat identifier token.
-    return false;
-  }
-
-  return Error(StartLoc, "invalid register name");
-}
-
-OperandMatchResultTy RISCVAsmParser::parseRegister(OperandVector &Operands,
-                                                   bool AllowParens) {
-  SMLoc FirstS = getLoc();
-  bool HadParens = false;
-  AsmToken Buf[2];
-
-  // If this a parenthesised register name is allowed, parse it atomically
-  if (AllowParens && getLexer().is(AsmToken::LParen)) {
-    size_t ReadCount = getLexer().peekTokens(Buf);
-    if (ReadCount == 2 && Buf[1].getKind() == AsmToken::RParen) {
-      HadParens = true;
-      getParser().Lex(); // Eat '('
-    }
-  }
-
-  switch (getLexer().getKind()) {
-  default:
-    return MatchOperand_NoMatch;
-  case AsmToken::Identifier:
-    StringRef Name = getLexer().getTok().getIdentifier();
-    unsigned RegNo = MatchRegisterName(Name);
-    if (RegNo == 0) {
-      RegNo = MatchRegisterAltName(Name);
-      if (RegNo == 0) {
-        if (HadParens)
-          getLexer().UnLex(Buf[0]);
-        return MatchOperand_NoMatch;
-      }
-    }
-    if (HadParens)
-      Operands.push_back(RISCVOperand::createToken("(", FirstS, isRV64()));
-    SMLoc S = getLoc();
-    SMLoc E = SMLoc::getFromPointer(S.getPointer() - 1);
-    getLexer().Lex();
-    Operands.push_back(RISCVOperand::createReg(RegNo, S, E, isRV64()));
-  }
-
-  if (HadParens) {
-    getParser().Lex(); // Eat ')'
-    Operands.push_back(RISCVOperand::createToken(")", getLoc(), isRV64()));
-  }
-
-  return MatchOperand_Success;
-}
-
-OperandMatchResultTy RISCVAsmParser::parseImmediate(OperandVector &Operands) {
-  SMLoc S = getLoc();
-  SMLoc E = SMLoc::getFromPointer(S.getPointer() - 1);
-  const MCExpr *Res;
-
-  switch (getLexer().getKind()) {
-  default:
-    return MatchOperand_NoMatch;
-  case AsmToken::LParen:
-  case AsmToken::Minus:
-  case AsmToken::Plus:
-  case AsmToken::Integer:
-  case AsmToken::String:
-    if (getParser().parseExpression(Res))
-      return MatchOperand_ParseFail;
-    break;
-  case AsmToken::Identifier: {
-    StringRef Identifier;
-    if (getParser().parseIdentifier(Identifier))
-      return MatchOperand_ParseFail;
-    MCSymbol *Sym = getContext().getOrCreateSymbol(Identifier);
-    Res = MCSymbolRefExpr::create(Sym, MCSymbolRefExpr::VK_None, getContext());
-    break;
-  }
-  case AsmToken::Percent:
-    return parseOperandWithModifier(Operands);
-  }
-
-  Operands.push_back(RISCVOperand::createImm(Res, S, E, isRV64()));
-  return MatchOperand_Success;
-}
-
-OperandMatchResultTy
-RISCVAsmParser::parseOperandWithModifier(OperandVector &Operands) {
-  SMLoc S = getLoc();
-  SMLoc E = SMLoc::getFromPointer(S.getPointer() - 1);
-
-  if (getLexer().getKind() != AsmToken::Percent) {
-    Error(getLoc(), "expected '%' for operand modifier");
-    return MatchOperand_ParseFail;
-  }
-
-  getParser().Lex(); // Eat '%'
-
-  if (getLexer().getKind() != AsmToken::Identifier) {
-    Error(getLoc(), "expected valid identifier for operand modifier");
-    return MatchOperand_ParseFail;
-  }
-  StringRef Identifier = getParser().getTok().getIdentifier();
-  RISCVMCExpr::VariantKind VK = RISCVMCExpr::getVariantKindForName(Identifier);
-  if (VK == RISCVMCExpr::VK_RISCV_Invalid) {
-    Error(getLoc(), "unrecognized operand modifier");
-    return MatchOperand_ParseFail;
-  }
-
-  getParser().Lex(); // Eat the identifier
-  if (getLexer().getKind() != AsmToken::LParen) {
-    Error(getLoc(), "expected '('");
-    return MatchOperand_ParseFail;
-  }
-  getParser().Lex(); // Eat '('
-
-  const MCExpr *SubExpr;
-  if (getParser().parseParenExpression(SubExpr, E)) {
-    return MatchOperand_ParseFail;
-  }
-
-  const MCExpr *ModExpr = RISCVMCExpr::create(SubExpr, VK, getContext());
-  Operands.push_back(RISCVOperand::createImm(ModExpr, S, E, isRV64()));
-  return MatchOperand_Success;
-}
-
-OperandMatchResultTy
-RISCVAsmParser::parseMemOpBaseReg(OperandVector &Operands) {
-  if (getLexer().isNot(AsmToken::LParen)) {
-    Error(getLoc(), "expected '('");
-    return MatchOperand_ParseFail;
-  }
-
-  getParser().Lex(); // Eat '('
-  Operands.push_back(RISCVOperand::createToken("(", getLoc(), isRV64()));
-
-  if (parseRegister(Operands) != MatchOperand_Success) {
-    Error(getLoc(), "expected register");
-    return MatchOperand_ParseFail;
-  }
-
-  if (getLexer().isNot(AsmToken::RParen)) {
-    Error(getLoc(), "expected ')'");
-    return MatchOperand_ParseFail;
-  }
-
-  getParser().Lex(); // Eat ')'
-  Operands.push_back(RISCVOperand::createToken(")", getLoc(), isRV64()));
-
-  return MatchOperand_Success;
-}
-
-/// Looks at a token type and creates the relevant operand
-/// from this information, adding to Operands.
-/// If operand was parsed, returns false, else true.
-bool RISCVAsmParser::parseOperand(OperandVector &Operands) {
-  // Attempt to parse token as register
-  if (parseRegister(Operands, true) == MatchOperand_Success)
-    return false;
-
-  // Attempt to parse token as an immediate
-  if (parseImmediate(Operands) == MatchOperand_Success) {
-    // Parse memory base register if present
-    if (getLexer().is(AsmToken::LParen))
-      return parseMemOpBaseReg(Operands) != MatchOperand_Success;
-    return false;
-  }
-
-  // Finally we have exhausted all options and must declare defeat.
-  Error(getLoc(), "unknown operand");
-  return true;
-}
-
-bool RISCVAsmParser::ParseInstruction(ParseInstructionInfo &Info,
-                                      StringRef Name, SMLoc NameLoc,
-                                      OperandVector &Operands) {
-  // First operand is token for instruction
-  Operands.push_back(RISCVOperand::createToken(Name, NameLoc, isRV64()));
-
-  // If there are no more operands, then finish
-  if (getLexer().is(AsmToken::EndOfStatement))
-    return false;
-
-  // Parse first operand
-  if (parseOperand(Operands))
-    return true;
-
-  // Parse until end of statement, consuming commas between operands
-  while (getLexer().is(AsmToken::Comma)) {
-    // Consume comma token
-    getLexer().Lex();
-
-    // Parse next operand
-    if (parseOperand(Operands))
-      return true;
-  }
-
-  if (getLexer().isNot(AsmToken::EndOfStatement)) {
-    SMLoc Loc = getLexer().getLoc();
-    getParser().eatToEndOfStatement();
-    return Error(Loc, "unexpected token");
-  }
-
-  getParser().Lex(); // Consume the EndOfStatement.
-  return false;
-}
-
-bool RISCVAsmParser::classifySymbolRef(const MCExpr *Expr,
-                                       RISCVMCExpr::VariantKind &Kind,
-                                       int64_t &Addend) {
-  Kind = RISCVMCExpr::VK_RISCV_None;
-  Addend = 0;
-
-  if (const RISCVMCExpr *RE = dyn_cast<RISCVMCExpr>(Expr)) {
-    Kind = RE->getKind();
-    Expr = RE->getSubExpr();
-  }
-
-  // It's a simple symbol reference or constant with no addend.
-  if (isa<MCConstantExpr>(Expr) || isa<MCSymbolRefExpr>(Expr))
-    return true;
-
-  const MCBinaryExpr *BE = dyn_cast<MCBinaryExpr>(Expr);
-  if (!BE)
-    return false;
-
-  if (!isa<MCSymbolRefExpr>(BE->getLHS()))
-    return false;
-
-  if (BE->getOpcode() != MCBinaryExpr::Add &&
-      BE->getOpcode() != MCBinaryExpr::Sub)
-    return false;
-
-  // We are able to support the subtraction of two symbol references
-  if (BE->getOpcode() == MCBinaryExpr::Sub &&
-      isa<MCSymbolRefExpr>(BE->getRHS()))
-    return true;
-
-  // See if the addend is is a constant, otherwise there's more going
-  // on here than we can deal with.
-  auto AddendExpr = dyn_cast<MCConstantExpr>(BE->getRHS());
-  if (!AddendExpr)
-    return false;
-
-  Addend = AddendExpr->getValue();
-  if (BE->getOpcode() == MCBinaryExpr::Sub)
-    Addend = -Addend;
-
-  // It's some symbol reference + a constant addend
-  return Kind != RISCVMCExpr::VK_RISCV_Invalid;
-}
-
-bool RISCVAsmParser::ParseDirective(AsmToken DirectiveID) { return true; }
-
-extern "C" void LLVMInitializeRISCVAsmParser() {
-  RegisterMCAsmParser<RISCVAsmParser> X(getTheRISCV32Target());
-  RegisterMCAsmParser<RISCVAsmParser> Y(getTheRISCV64Target());
-}
diff --git a/lib/Target/RISCV/CMakeLists.txt b/lib/Target/RISCV/CMakeLists.txt
deleted file mode 100644
index bac4d4c353d..00000000000
--- a/lib/Target/RISCV/CMakeLists.txt
+++ /dev/null
@@ -1,32 +0,0 @@
-set(LLVM_TARGET_DEFINITIONS RISCV.td)
-
-tablegen(LLVM RISCVGenRegisterInfo.inc -gen-register-info)
-tablegen(LLVM RISCVGenInstrInfo.inc -gen-instr-info)
-tablegen(LLVM RISCVGenMCCodeEmitter.inc -gen-emitter)
-tablegen(LLVM RISCVGenMCPseudoLowering.inc -gen-pseudo-lowering)
-tablegen(LLVM RISCVGenAsmMatcher.inc -gen-asm-matcher)
-tablegen(LLVM RISCVGenAsmWriter.inc -gen-asm-writer)
-tablegen(LLVM RISCVGenCallingConv.inc -gen-callingconv)
-tablegen(LLVM RISCVGenDAGISel.inc -gen-dag-isel)
-tablegen(LLVM RISCVGenSubtargetInfo.inc -gen-subtarget)
-tablegen(LLVM RISCVGenDisassemblerTables.inc -gen-disassembler)
-
-add_public_tablegen_target(RISCVCommonTableGen)
-
-add_llvm_target(RISCVCodeGen
-  RISCVAsmPrinter.cpp
-  RISCVFrameLowering.cpp
-  RISCVInstrInfo.cpp
-  RISCVISelDAGToDAG.cpp
-  RISCVISelLowering.cpp
-  RISCVMCInstLower.cpp
-  RISCVRegisterInfo.cpp
-  RISCVSubtarget.cpp
-  RISCVTargetMachine.cpp
-  )
-
-add_subdirectory(AsmParser)
-add_subdirectory(Disassembler)
-add_subdirectory(InstPrinter)
-add_subdirectory(MCTargetDesc)
-add_subdirectory(TargetInfo)
diff --git a/lib/Target/RISCV/Disassembler/CMakeLists.txt b/lib/Target/RISCV/Disassembler/CMakeLists.txt
deleted file mode 100644
index 39bd2b7669f..00000000000
--- a/lib/Target/RISCV/Disassembler/CMakeLists.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-add_llvm_library(LLVMRISCVDisassembler
-  RISCVDisassembler.cpp
-  )
diff --git a/lib/Target/RISCV/Disassembler/LLVMBuild.txt b/lib/Target/RISCV/Disassembler/LLVMBuild.txt
deleted file mode 100644
index 340e89d4cf3..00000000000
--- a/lib/Target/RISCV/Disassembler/LLVMBuild.txt
+++ /dev/null
@@ -1,24 +0,0 @@
-;===- ./lib/Target/RISCV/Disassembler/LLVMBuild.txt ------------*- Conf -*--===;
-;
-;                     The LLVM Compiler Infrastructure
-;
-; This file is distributed under the University of Illinois Open Source
-; License. See LICENSE.TXT for details.
-;
-;===------------------------------------------------------------------------===;
-;
-; This is an LLVMBuild description file for the components in this subdirectory.
-;
-; For more information on the LLVMBuild system, please see:
-;
-;   http://llvm.org/docs/LLVMBuild.html
-;
-;===------------------------------------------------------------------------===;
-
-[component_0]
-type = Library
-name = RISCVDisassembler
-parent = RISCV
-required_libraries = MCDisassembler RISCVInfo Support
-add_to_library_groups = RISCV
-
diff --git a/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp b/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
deleted file mode 100644
index 91c0b5a9d24..00000000000
--- a/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
+++ /dev/null
@@ -1,220 +0,0 @@
-//===-- RISCVDisassembler.cpp - Disassembler for RISCV --------------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file implements the RISCVDisassembler class.
-//
-//===----------------------------------------------------------------------===//
-
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "llvm/MC/MCContext.h"
-#include "llvm/MC/MCDisassembler/MCDisassembler.h"
-#include "llvm/MC/MCFixedLenDisassembler.h"
-#include "llvm/MC/MCInst.h"
-#include "llvm/MC/MCRegisterInfo.h"
-#include "llvm/MC/MCSubtargetInfo.h"
-#include "llvm/Support/Endian.h"
-#include "llvm/Support/TargetRegistry.h"
-
-using namespace llvm;
-
-#define DEBUG_TYPE "riscv-disassembler"
-
-typedef MCDisassembler::DecodeStatus DecodeStatus;
-
-namespace {
-class RISCVDisassembler : public MCDisassembler {
-
-public:
-  RISCVDisassembler(const MCSubtargetInfo &STI, MCContext &Ctx)
-      : MCDisassembler(STI, Ctx) {}
-
-  DecodeStatus getInstruction(MCInst &Instr, uint64_t &Size,
-                              ArrayRef<uint8_t> Bytes, uint64_t Address,
-                              raw_ostream &VStream,
-                              raw_ostream &CStream) const override;
-};
-} // end anonymous namespace
-
-static MCDisassembler *createRISCVDisassembler(const Target &T,
-                                               const MCSubtargetInfo &STI,
-                                               MCContext &Ctx) {
-  return new RISCVDisassembler(STI, Ctx);
-}
-
-extern "C" void LLVMInitializeRISCVDisassembler() {
-  // Register the disassembler for each target.
-  TargetRegistry::RegisterMCDisassembler(getTheRISCV32Target(),
-                                         createRISCVDisassembler);
-  TargetRegistry::RegisterMCDisassembler(getTheRISCV64Target(),
-                                         createRISCVDisassembler);
-}
-
-static const unsigned GPRDecoderTable[] = {
-  RISCV::X0,  RISCV::X1,  RISCV::X2,  RISCV::X3,
-  RISCV::X4,  RISCV::X5,  RISCV::X6,  RISCV::X7,
-  RISCV::X8,  RISCV::X9,  RISCV::X10, RISCV::X11,
-  RISCV::X12, RISCV::X13, RISCV::X14, RISCV::X15,
-  RISCV::X16, RISCV::X17, RISCV::X18, RISCV::X19,
-  RISCV::X20, RISCV::X21, RISCV::X22, RISCV::X23,
-  RISCV::X24, RISCV::X25, RISCV::X26, RISCV::X27,
-  RISCV::X28, RISCV::X29, RISCV::X30, RISCV::X31
-};
-
-static DecodeStatus DecodeGPRRegisterClass(MCInst &Inst, uint64_t RegNo,
-                                           uint64_t Address,
-                                           const void *Decoder) {
-   if (RegNo > sizeof(GPRDecoderTable))
-     return MCDisassembler::Fail;
-
-   // We must define our own mapping from RegNo to register identifier.
-   // Accessing index RegNo in the register class will work in the case that
-   // registers were added in ascending order, but not in general.
-   unsigned Reg = GPRDecoderTable[RegNo];
-   Inst.addOperand(MCOperand::createReg(Reg));
-   return MCDisassembler::Success;
-}
-
-static const unsigned FPR32DecoderTable[] = {
-  RISCV::F0_32,  RISCV::F1_32,  RISCV::F2_32,  RISCV::F3_32,
-  RISCV::F4_32,  RISCV::F5_32,  RISCV::F6_32,  RISCV::F7_32,
-  RISCV::F8_32,  RISCV::F9_32,  RISCV::F10_32, RISCV::F11_32,
-  RISCV::F12_32, RISCV::F13_32, RISCV::F14_32, RISCV::F15_32,
-  RISCV::F16_32, RISCV::F17_32, RISCV::F18_32, RISCV::F19_32,
-  RISCV::F20_32, RISCV::F21_32, RISCV::F22_32, RISCV::F23_32,
-  RISCV::F24_32, RISCV::F25_32, RISCV::F26_32, RISCV::F27_32,
-  RISCV::F28_32, RISCV::F29_32, RISCV::F30_32, RISCV::F31_32
-};
-
-static DecodeStatus DecodeFPR32RegisterClass(MCInst &Inst, uint64_t RegNo,
-                                             uint64_t Address,
-                                             const void *Decoder) {
-  if (RegNo > sizeof(FPR32DecoderTable))
-    return MCDisassembler::Fail;
-
-  // We must define our own mapping from RegNo to register identifier.
-  // Accessing index RegNo in the register class will work in the case that
-  // registers were added in ascending order, but not in general.
-  unsigned Reg = FPR32DecoderTable[RegNo];
-  Inst.addOperand(MCOperand::createReg(Reg));
-  return MCDisassembler::Success;
-}
-
-static const unsigned FPR64DecoderTable[] = {
-  RISCV::F0_64,  RISCV::F1_64,  RISCV::F2_64,  RISCV::F3_64,
-  RISCV::F4_64,  RISCV::F5_64,  RISCV::F6_64,  RISCV::F7_64,
-  RISCV::F8_64,  RISCV::F9_64,  RISCV::F10_64, RISCV::F11_64,
-  RISCV::F12_64, RISCV::F13_64, RISCV::F14_64, RISCV::F15_64,
-  RISCV::F16_64, RISCV::F17_64, RISCV::F18_64, RISCV::F19_64,
-  RISCV::F20_64, RISCV::F21_64, RISCV::F22_64, RISCV::F23_64,
-  RISCV::F24_64, RISCV::F25_64, RISCV::F26_64, RISCV::F27_64,
-  RISCV::F28_64, RISCV::F29_64, RISCV::F30_64, RISCV::F31_64
-};
-
-static DecodeStatus DecodeFPR64RegisterClass(MCInst &Inst, uint64_t RegNo,
-                                             uint64_t Address,
-                                             const void *Decoder) {
-  if (RegNo > sizeof(FPR64DecoderTable))
-    return MCDisassembler::Fail;
-
-  // We must define our own mapping from RegNo to register identifier.
-  // Accessing index RegNo in the register class will work in the case that
-  // registers were added in ascending order, but not in general.
-  unsigned Reg = FPR64DecoderTable[RegNo];
-  Inst.addOperand(MCOperand::createReg(Reg));
-  return MCDisassembler::Success;
-}
-
-static DecodeStatus DecodeGPRNoX0RegisterClass(MCInst &Inst, uint64_t RegNo,
-                                               uint64_t Address,
-                                               const void *Decoder) {
-   if (RegNo == 0) {
-     return MCDisassembler::Fail;
-   }
-
-   return DecodeGPRRegisterClass(Inst, RegNo, Address, Decoder);
-}
-
-static DecodeStatus DecodeGPRCRegisterClass(MCInst &Inst, uint64_t RegNo,
-                                            uint64_t Address,
-                                            const void *Decoder) {
-  if (RegNo > 8)
-    return MCDisassembler::Fail;
-
-  unsigned Reg = GPRDecoderTable[RegNo + 8];
-  Inst.addOperand(MCOperand::createReg(Reg));
-  return MCDisassembler::Success;
-}
-
-// Add implied SP operand for instructions *SP compressed instructions. The SP
-// operand isn't explicitly encoded in the instruction.
-static void addImplySP(MCInst &Inst, int64_t Address, const void *Decoder) {
-  if (Inst.getOpcode() == RISCV::CLWSP || Inst.getOpcode() == RISCV::CSWSP ||
-      Inst.getOpcode() == RISCV::CLDSP || Inst.getOpcode() == RISCV::CSDSP) {
-    DecodeGPRRegisterClass(Inst, 2, Address, Decoder);
-  }
-}
-
-template <unsigned N>
-static DecodeStatus decodeUImmOperand(MCInst &Inst, uint64_t Imm,
-                                      int64_t Address, const void *Decoder) {
-  assert(isUInt<N>(Imm) && "Invalid immediate");
-  addImplySP(Inst, Address, Decoder);
-  Inst.addOperand(MCOperand::createImm(Imm));
-  return MCDisassembler::Success;
-}
-
-template <unsigned N>
-static DecodeStatus decodeSImmOperand(MCInst &Inst, uint64_t Imm,
-                                      int64_t Address, const void *Decoder) {
-  assert(isUInt<N>(Imm) && "Invalid immediate");
-  // Sign-extend the number in the bottom N bits of Imm
-  Inst.addOperand(MCOperand::createImm(SignExtend64<N>(Imm)));
-  return MCDisassembler::Success;
-}
-
-template <unsigned N>
-static DecodeStatus decodeSImmOperandAndLsl1(MCInst &Inst, uint64_t Imm,
-                                             int64_t Address,
-                                             const void *Decoder) {
-  assert(isUInt<N>(Imm) && "Invalid immediate");
-  // Sign-extend the number in the bottom N bits of Imm after accounting for
-  // the fact that the N bit immediate is stored in N-1 bits (the LSB is
-  // always zero)
-  Inst.addOperand(MCOperand::createImm(SignExtend64<N>(Imm << 1)));
-  return MCDisassembler::Success;
-}
-
-#include "RISCVGenDisassemblerTables.inc"
-
-DecodeStatus RISCVDisassembler::getInstruction(MCInst &MI, uint64_t &Size,
-                                               ArrayRef<uint8_t> Bytes,
-                                               uint64_t Address,
-                                               raw_ostream &OS,
-                                               raw_ostream &CS) const {
-  // TODO: This will need modification when supporting instruction set
-  // extensions with instructions > 32-bits (up to 176 bits wide).
-  uint32_t Insn;
-  DecodeStatus Result;
-
-  // It's a 32 bit instruction if bit 0 and 1 are 1.
-  if ((Bytes[0] & 0x3) == 0x3) {
-    Insn = support::endian::read32le(Bytes.data());
-    DEBUG(dbgs() << "Trying RISCV32 table :\n");
-    Result = decodeInstruction(DecoderTable32, MI, Insn, Address, this, STI);
-    Size = 4;
-  } else {
-    Insn = support::endian::read16le(Bytes.data());
-    DEBUG(dbgs() << "Trying RISCV_C table (16-bit Instruction):\n");
-    // Calling the auto-generated decoder function.
-    Result = decodeInstruction(DecoderTable16, MI, Insn, Address, this, STI);
-    Size = 2;
-  }
-
-  return Result;
-}
diff --git a/lib/Target/RISCV/InstPrinter/CMakeLists.txt b/lib/Target/RISCV/InstPrinter/CMakeLists.txt
deleted file mode 100644
index 7f91743fb93..00000000000
--- a/lib/Target/RISCV/InstPrinter/CMakeLists.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-add_llvm_library(LLVMRISCVAsmPrinter
-  RISCVInstPrinter.cpp
-  )
diff --git a/lib/Target/RISCV/InstPrinter/LLVMBuild.txt b/lib/Target/RISCV/InstPrinter/LLVMBuild.txt
deleted file mode 100644
index 5f4545e3d67..00000000000
--- a/lib/Target/RISCV/InstPrinter/LLVMBuild.txt
+++ /dev/null
@@ -1,23 +0,0 @@
-;===- ./lib/Target/RISCV/InstPrinter/LLVMBuild.txt -------------*- Conf -*--===;
-;
-;                     The LLVM Compiler Infrastructure
-;
-; This file is distributed under the University of Illinois Open Source
-; License. See LICENSE.TXT for details.
-;
-;===------------------------------------------------------------------------===;
-;
-; This is an LLVMBuild description file for the components in this subdirectory.
-;
-; For more information on the LLVMBuild system, please see:
-;
-;   http://llvm.org/docs/LLVMBuild.html
-;
-;===------------------------------------------------------------------------===;
-
-[component_0]
-type = Library
-name = RISCVAsmPrinter
-parent = RISCV
-required_libraries = MC Support
-add_to_library_groups = RISCV
diff --git a/lib/Target/RISCV/InstPrinter/RISCVInstPrinter.cpp b/lib/Target/RISCV/InstPrinter/RISCVInstPrinter.cpp
deleted file mode 100644
index a396025ccc4..00000000000
--- a/lib/Target/RISCV/InstPrinter/RISCVInstPrinter.cpp
+++ /dev/null
@@ -1,79 +0,0 @@
-//===-- RISCVInstPrinter.cpp - Convert RISCV MCInst to asm syntax ---------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This class prints an RISCV MCInst to a .s file.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVInstPrinter.h"
-#include "MCTargetDesc/RISCVBaseInfo.h"
-#include "llvm/MC/MCAsmInfo.h"
-#include "llvm/MC/MCExpr.h"
-#include "llvm/MC/MCInst.h"
-#include "llvm/MC/MCRegisterInfo.h"
-#include "llvm/MC/MCSymbol.h"
-#include "llvm/Support/ErrorHandling.h"
-#include "llvm/Support/FormattedStream.h"
-using namespace llvm;
-
-#define DEBUG_TYPE "asm-printer"
-
-// Include the auto-generated portion of the assembly writer.
-#define PRINT_ALIAS_INSTR
-#include "RISCVGenAsmWriter.inc"
-
-void RISCVInstPrinter::printInst(const MCInst *MI, raw_ostream &O,
-                                 StringRef Annot, const MCSubtargetInfo &STI) {
-  if (!printAliasInstr(MI, O))
-    printInstruction(MI, O);
-  printAnnotation(O, Annot);
-}
-
-void RISCVInstPrinter::printRegName(raw_ostream &O, unsigned RegNo) const {
-  O << getRegisterName(RegNo);
-}
-
-void RISCVInstPrinter::printOperand(const MCInst *MI, unsigned OpNo,
-                                    raw_ostream &O, const char *Modifier) {
-  assert((Modifier == 0 || Modifier[0] == 0) && "No modifiers supported");
-  const MCOperand &MO = MI->getOperand(OpNo);
-
-  if (MO.isReg()) {
-    printRegName(O, MO.getReg());
-    return;
-  }
-
-  if (MO.isImm()) {
-    O << MO.getImm();
-    return;
-  }
-
-  assert(MO.isExpr() && "Unknown operand kind in printOperand");
-  MO.getExpr()->print(O, &MAI);
-}
-
-void RISCVInstPrinter::printFenceArg(const MCInst *MI, unsigned OpNo,
-                                     raw_ostream &O) {
-  unsigned FenceArg = MI->getOperand(OpNo).getImm();
-  if ((FenceArg & RISCVFenceField::I) != 0)
-    O << 'i';
-  if ((FenceArg & RISCVFenceField::O) != 0)
-    O << 'o';
-  if ((FenceArg & RISCVFenceField::R) != 0)
-    O << 'r';
-  if ((FenceArg & RISCVFenceField::W) != 0)
-    O << 'w';
-}
-
-void RISCVInstPrinter::printFRMArg(const MCInst *MI, unsigned OpNo,
-                                   raw_ostream &O) {
-  auto FRMArg =
-      static_cast<RISCVFPRndMode::RoundingMode>(MI->getOperand(OpNo).getImm());
-  O << RISCVFPRndMode::roundingModeToString(FRMArg);
-}
diff --git a/lib/Target/RISCV/InstPrinter/RISCVInstPrinter.h b/lib/Target/RISCV/InstPrinter/RISCVInstPrinter.h
deleted file mode 100644
index 58f3f841015..00000000000
--- a/lib/Target/RISCV/InstPrinter/RISCVInstPrinter.h
+++ /dev/null
@@ -1,48 +0,0 @@
-//===-- RISCVInstPrinter.h - Convert RISCV MCInst to asm syntax ---*- C++ -*--//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This class prints a RISCV MCInst to a .s file.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_INSTPRINTER_RISCVINSTPRINTER_H
-#define LLVM_LIB_TARGET_RISCV_INSTPRINTER_RISCVINSTPRINTER_H
-
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "llvm/MC/MCInstPrinter.h"
-
-namespace llvm {
-class MCOperand;
-
-class RISCVInstPrinter : public MCInstPrinter {
-public:
-  RISCVInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
-                   const MCRegisterInfo &MRI)
-      : MCInstPrinter(MAI, MII, MRI) {}
-
-  void printInst(const MCInst *MI, raw_ostream &O, StringRef Annot,
-                 const MCSubtargetInfo &STI) override;
-  void printRegName(raw_ostream &O, unsigned RegNo) const override;
-
-  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O,
-                    const char *Modifier = nullptr);
-  void printFenceArg(const MCInst *MI, unsigned OpNo, raw_ostream &O);
-  void printFRMArg(const MCInst *MI, unsigned OpNo, raw_ostream &O);
-
-  // Autogenerated by tblgen.
-  void printInstruction(const MCInst *MI, raw_ostream &O);
-  bool printAliasInstr(const MCInst *MI, raw_ostream &O);
-  void printCustomAliasOperand(const MCInst *MI, unsigned OpIdx,
-                               unsigned PrintMethodIdx, raw_ostream &O);
-  static const char *getRegisterName(unsigned RegNo,
-                                     unsigned AltIdx = RISCV::ABIRegAltName);
-};
-}
-
-#endif
diff --git a/lib/Target/RISCV/LLVMBuild.txt b/lib/Target/RISCV/LLVMBuild.txt
deleted file mode 100644
index ab21565b0c2..00000000000
--- a/lib/Target/RISCV/LLVMBuild.txt
+++ /dev/null
@@ -1,35 +0,0 @@
-;===- ./lib/Target/RISCV/LLVMBuild.txt -------------------------*- Conf -*--===;
-;
-;                     The LLVM Compiler Infrastructure
-;
-; This file is distributed under the University of Illinois Open Source
-; License. See LICENSE.TXT for details.
-;
-;===------------------------------------------------------------------------===;
-;
-; This is an LLVMBuild description file for the components in this subdirectory.
-;
-; For more information on the LLVMBuild system, please see:
-;
-;   http://llvm.org/docs/LLVMBuild.html
-;
-;===------------------------------------------------------------------------===;
-
-[common]
-subdirectories = AsmParser Disassembler InstPrinter TargetInfo MCTargetDesc
-
-[component_0]
-type = TargetGroup
-name = RISCV
-parent = Target
-has_asmparser = 1
-has_asmprinter = 1
-has_disassembler = 1
-
-[component_1]
-type = Library
-name = RISCVCodeGen
-parent = RISCV
-required_libraries = AsmPrinter Core CodeGen MC RISCVAsmPrinter RISCVDesc
-  RISCVInfo SelectionDAG Support Target
-add_to_library_groups = RISCV
diff --git a/lib/Target/RISCV/MCTargetDesc/CMakeLists.txt b/lib/Target/RISCV/MCTargetDesc/CMakeLists.txt
deleted file mode 100644
index 60429647edd..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-add_llvm_library(LLVMRISCVDesc
-  RISCVAsmBackend.cpp
-  RISCVELFObjectWriter.cpp
-  RISCVMCAsmInfo.cpp
-  RISCVMCCodeEmitter.cpp
-  RISCVMCExpr.cpp
-  RISCVMCTargetDesc.cpp
-)
diff --git a/lib/Target/RISCV/MCTargetDesc/LLVMBuild.txt b/lib/Target/RISCV/MCTargetDesc/LLVMBuild.txt
deleted file mode 100644
index 92daae30e3f..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/LLVMBuild.txt
+++ /dev/null
@@ -1,23 +0,0 @@
-;===- ./lib/Target/RISCV/MCTargetDesc/LLVMBuild.txt ------------*- Conf -*--===;
-;
-;                     The LLVM Compiler Infrastructure
-;
-; This file is distributed under the University of Illinois Open Source
-; License. See LICENSE.TXT for details.
-;
-;===------------------------------------------------------------------------===;
-;
-; This is an LLVMBuild description file for the components in this subdirectory.
-;
-; For more information on the LLVMBuild system, please see:
-;
-;   http://llvm.org/docs/LLVMBuild.html
-;
-;===------------------------------------------------------------------------===;
-
-[component_0]
-type = Library
-name = RISCVDesc
-parent = RISCV
-required_libraries = MC RISCVAsmPrinter RISCVInfo Support
-add_to_library_groups = RISCV
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp b/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp
deleted file mode 100644
index b91467fe145..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp
+++ /dev/null
@@ -1,238 +0,0 @@
-//===-- RISCVAsmBackend.cpp - RISCV Assembler Backend ---------------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-#include "MCTargetDesc/RISCVFixupKinds.h"
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "llvm/ADT/APInt.h"
-#include "llvm/MC/MCAsmBackend.h"
-#include "llvm/MC/MCAssembler.h"
-#include "llvm/MC/MCContext.h"
-#include "llvm/MC/MCDirectives.h"
-#include "llvm/MC/MCELFObjectWriter.h"
-#include "llvm/MC/MCExpr.h"
-#include "llvm/MC/MCFixupKindInfo.h"
-#include "llvm/MC/MCObjectWriter.h"
-#include "llvm/MC/MCSubtargetInfo.h"
-#include "llvm/MC/MCSymbol.h"
-#include "llvm/Support/ErrorHandling.h"
-#include "llvm/Support/raw_ostream.h"
-
-using namespace llvm;
-
-namespace {
-class RISCVAsmBackend : public MCAsmBackend {
-  uint8_t OSABI;
-  bool Is64Bit;
-
-public:
-  RISCVAsmBackend(uint8_t OSABI, bool Is64Bit)
-      : MCAsmBackend(), OSABI(OSABI), Is64Bit(Is64Bit) {}
-  ~RISCVAsmBackend() override {}
-
-  void applyFixup(const MCAssembler &Asm, const MCFixup &Fixup,
-                  const MCValue &Target, MutableArrayRef<char> Data,
-                  uint64_t Value, bool IsResolved) const override;
-
-  std::unique_ptr<MCObjectWriter>
-  createObjectWriter(raw_pwrite_stream &OS) const override;
-
-  bool fixupNeedsRelaxation(const MCFixup &Fixup, uint64_t Value,
-                            const MCRelaxableFragment *DF,
-                            const MCAsmLayout &Layout) const override {
-    return false;
-  }
-
-  unsigned getNumFixupKinds() const override {
-    return RISCV::NumTargetFixupKinds;
-  }
-
-  const MCFixupKindInfo &getFixupKindInfo(MCFixupKind Kind) const override {
-    const static MCFixupKindInfo Infos[RISCV::NumTargetFixupKinds] = {
-      // This table *must* be in the order that the fixup_* kinds are defined in
-      // RISCVFixupKinds.h.
-      //
-      // name                    offset bits  flags
-      { "fixup_riscv_hi20",       12,     20,  0 },
-      { "fixup_riscv_lo12_i",     20,     12,  0 },
-      { "fixup_riscv_lo12_s",      0,     32,  0 },
-      { "fixup_riscv_pcrel_hi20", 12,     20,  MCFixupKindInfo::FKF_IsPCRel },
-      { "fixup_riscv_jal",        12,     20,  MCFixupKindInfo::FKF_IsPCRel },
-      { "fixup_riscv_branch",      0,     32,  MCFixupKindInfo::FKF_IsPCRel },
-      { "fixup_riscv_rvc_jump",    2,     11,  MCFixupKindInfo::FKF_IsPCRel },
-      { "fixup_riscv_rvc_branch",  0,     16,  MCFixupKindInfo::FKF_IsPCRel }
-    };
-
-    if (Kind < FirstTargetFixupKind)
-      return MCAsmBackend::getFixupKindInfo(Kind);
-
-    assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
-           "Invalid kind!");
-    return Infos[Kind - FirstTargetFixupKind];
-  }
-
-  bool mayNeedRelaxation(const MCInst &Inst) const override { return false; }
-
-  void relaxInstruction(const MCInst &Inst, const MCSubtargetInfo &STI,
-                        MCInst &Res) const override {
-
-    report_fatal_error("RISCVAsmBackend::relaxInstruction() unimplemented");
-  }
-
-  bool writeNopData(uint64_t Count, MCObjectWriter *OW) const override;
-};
-
-bool RISCVAsmBackend::writeNopData(uint64_t Count, MCObjectWriter *OW) const {
-  // Once support for the compressed instruction set is added, we will be able
-  // to conditionally support 16-bit NOPs
-  if ((Count % 4) != 0)
-    return false;
-
-  // The canonical nop on RISC-V is addi x0, x0, 0
-  for (uint64_t i = 0; i < Count; i += 4)
-    OW->write32(0x13);
-
-  return true;
-}
-
-static uint64_t adjustFixupValue(const MCFixup &Fixup, uint64_t Value,
-                                 MCContext &Ctx) {
-  unsigned Kind = Fixup.getKind();
-  switch (Kind) {
-  default:
-    llvm_unreachable("Unknown fixup kind!");
-  case FK_Data_1:
-  case FK_Data_2:
-  case FK_Data_4:
-  case FK_Data_8:
-    return Value;
-  case RISCV::fixup_riscv_lo12_i:
-    return Value & 0xfff;
-  case RISCV::fixup_riscv_lo12_s:
-    return (((Value >> 5) & 0x7f) << 25) | ((Value & 0x1f) << 7);
-  case RISCV::fixup_riscv_hi20:
-  case RISCV::fixup_riscv_pcrel_hi20:
-    // Add 1 if bit 11 is 1, to compensate for low 12 bits being negative.
-    return ((Value + 0x800) >> 12) & 0xfffff;
-  case RISCV::fixup_riscv_jal: {
-    if (!isInt<21>(Value))
-      Ctx.reportError(Fixup.getLoc(), "fixup value out of range");
-    if (Value & 0x1)
-      Ctx.reportError(Fixup.getLoc(), "fixup value must be 2-byte aligned");
-    // Need to produce imm[19|10:1|11|19:12] from the 21-bit Value.
-    unsigned Sbit = (Value >> 20) & 0x1;
-    unsigned Hi8 = (Value >> 12) & 0xff;
-    unsigned Mid1 = (Value >> 11) & 0x1;
-    unsigned Lo10 = (Value >> 1) & 0x3ff;
-    // Inst{31} = Sbit;
-    // Inst{30-21} = Lo10;
-    // Inst{20} = Mid1;
-    // Inst{19-12} = Hi8;
-    Value = (Sbit << 19) | (Lo10 << 9) | (Mid1 << 8) | Hi8;
-    return Value;
-  }
-  case RISCV::fixup_riscv_branch: {
-    if (!isInt<13>(Value))
-      Ctx.reportError(Fixup.getLoc(), "fixup value out of range");
-    if (Value & 0x1)
-      Ctx.reportError(Fixup.getLoc(), "fixup value must be 2-byte aligned");
-    // Need to extract imm[12], imm[10:5], imm[4:1], imm[11] from the 13-bit
-    // Value.
-    unsigned Sbit = (Value >> 12) & 0x1;
-    unsigned Hi1 = (Value >> 11) & 0x1;
-    unsigned Mid6 = (Value >> 5) & 0x3f;
-    unsigned Lo4 = (Value >> 1) & 0xf;
-    // Inst{31} = Sbit;
-    // Inst{30-25} = Mid6;
-    // Inst{11-8} = Lo4;
-    // Inst{7} = Hi1;
-    Value = (Sbit << 31) | (Mid6 << 25) | (Lo4 << 8) | (Hi1 << 7);
-    return Value;
-  }
-  case RISCV::fixup_riscv_rvc_jump: {
-    // Need to produce offset[11|4|9:8|10|6|7|3:1|5] from the 11-bit Value.
-    unsigned Bit11  = (Value >> 11) & 0x1;
-    unsigned Bit4   = (Value >> 4) & 0x1;
-    unsigned Bit9_8 = (Value >> 8) & 0x3;
-    unsigned Bit10  = (Value >> 10) & 0x1;
-    unsigned Bit6   = (Value >> 6) & 0x1;
-    unsigned Bit7   = (Value >> 7) & 0x1;
-    unsigned Bit3_1 = (Value >> 1) & 0x7;
-    unsigned Bit5   = (Value >> 5) & 0x1;
-    Value = (Bit11 << 10) | (Bit4 << 9) | (Bit9_8 << 7) | (Bit10 << 6) |
-            (Bit6 << 5) | (Bit7 << 4) | (Bit3_1 << 1) | Bit5;
-    return Value;
-  }
-  case RISCV::fixup_riscv_rvc_branch: {
-    // Need to produce offset[8|4:3], [reg 3 bit], offset[7:6|2:1|5]
-    unsigned Bit8   = (Value >> 8) & 0x1;
-    unsigned Bit7_6 = (Value >> 6) & 0x3;
-    unsigned Bit5   = (Value >> 5) & 0x1;
-    unsigned Bit4_3 = (Value >> 3) & 0x3;
-    unsigned Bit2_1 = (Value >> 1) & 0x3;
-    Value = (Bit8 << 12) | (Bit4_3 << 10) | (Bit7_6 << 5) | (Bit2_1 << 3) |
-            (Bit5 << 2);
-    return Value;
-  }
-
-  }
-}
-
-static unsigned getSize(unsigned Kind) {
-  switch (Kind) {
-  default:
-    return 4;
-  case RISCV::fixup_riscv_rvc_jump:
-  case RISCV::fixup_riscv_rvc_branch:
-    return 2;
-  }
-}
-
-void RISCVAsmBackend::applyFixup(const MCAssembler &Asm, const MCFixup &Fixup,
-                                 const MCValue &Target,
-                                 MutableArrayRef<char> Data, uint64_t Value,
-                                 bool IsResolved) const {
-  MCContext &Ctx = Asm.getContext();
-  MCFixupKindInfo Info = getFixupKindInfo(Fixup.getKind());
-  if (!Value)
-    return; // Doesn't change encoding.
-  // Apply any target-specific value adjustments.
-  Value = adjustFixupValue(Fixup, Value, Ctx);
-
-  // Shift the value into position.
-  Value <<= Info.TargetOffset;
-
-  unsigned Offset = Fixup.getOffset();
-  unsigned FullSize = getSize(Fixup.getKind());
-
-#ifndef NDEBUG
-  unsigned NumBytes = (Info.TargetSize + 7) / 8;
-  assert(Offset + NumBytes <= Data.size() && "Invalid fixup offset!");
-#endif
-
-  // For each byte of the fragment that the fixup touches, mask in the
-  // bits from the fixup value.
-  for (unsigned i = 0; i != FullSize; ++i) {
-    Data[Offset + i] |= uint8_t((Value >> (i * 8)) & 0xff);
-  }
-}
-
-std::unique_ptr<MCObjectWriter>
-RISCVAsmBackend::createObjectWriter(raw_pwrite_stream &OS) const {
-  return createRISCVELFObjectWriter(OS, OSABI, Is64Bit);
-}
-
-} // end anonymous namespace
-
-MCAsmBackend *llvm::createRISCVAsmBackend(const Target &T,
-                                          const MCRegisterInfo &MRI,
-                                          const Triple &TT, StringRef CPU,
-                                          const MCTargetOptions &Options) {
-  uint8_t OSABI = MCELFObjectTargetWriter::getOSABI(TT.getOS());
-  return new RISCVAsmBackend(OSABI, TT.isArch64Bit());
-}
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h b/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
deleted file mode 100644
index b278a2ed390..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
+++ /dev/null
@@ -1,110 +0,0 @@
-//===-- RISCVBaseInfo.h - Top level definitions for RISCV MC ----*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains small standalone enum definitions for the RISCV target
-// useful for the compiler back-end and the MC libraries.
-//
-//===----------------------------------------------------------------------===//
-#ifndef LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVBASEINFO_H
-#define LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVBASEINFO_H
-
-#include "RISCVMCTargetDesc.h"
-#include "llvm/ADT/StringRef.h"
-#include "llvm/ADT/StringSwitch.h"
-
-namespace llvm {
-
-// RISCVII - This namespace holds all of the target specific flags that
-// instruction info tracks. All definitions must match RISCVInstrFormats.td.
-namespace RISCVII {
-enum {
-  InstFormatPseudo = 0,
-  InstFormatR = 1,
-  InstFormatR4 = 2,
-  InstFormatI = 3,
-  InstFormatS = 4,
-  InstFormatB = 5,
-  InstFormatU = 6,
-  InstFormatJ = 7,
-  InstFormatCR = 8,
-  InstFormatCI = 9,
-  InstFormatCSS = 10,
-  InstFormatCIW = 11,
-  InstFormatCL = 12,
-  InstFormatCS = 13,
-  InstFormatCB = 14,
-  InstFormatCJ = 15,
-  InstFormatOther = 16,
-
-  InstFormatMask = 31
-};
-
-enum {
-  MO_None,
-  MO_LO,
-  MO_HI,
-  MO_PCREL_HI,
-};
-} // namespace RISCVII
-
-// Describes the predecessor/successor bits used in the FENCE instruction.
-namespace RISCVFenceField {
-enum FenceField {
-  I = 8,
-  O = 4,
-  R = 2,
-  W = 1
-};
-}
-
-// Describes the supported floating point rounding mode encodings.
-namespace RISCVFPRndMode {
-enum RoundingMode {
-  RNE = 0,
-  RTZ = 1,
-  RDN = 2,
-  RUP = 3,
-  RMM = 4,
-  DYN = 7,
-  Invalid
-};
-
-inline static StringRef roundingModeToString(RoundingMode RndMode) {
-  switch (RndMode) {
-  default:
-    llvm_unreachable("Unknown floating point rounding mode");
-  case RISCVFPRndMode::RNE:
-    return "rne";
-  case RISCVFPRndMode::RTZ:
-    return "rtz";
-  case RISCVFPRndMode::RDN:
-    return "rdn";
-  case RISCVFPRndMode::RUP:
-    return "rup";
-  case RISCVFPRndMode::RMM:
-    return "rmm";
-  case RISCVFPRndMode::DYN:
-    return "dyn";
-  }
-}
-
-inline static RoundingMode stringToRoundingMode(StringRef Str) {
-  return StringSwitch<RoundingMode>(Str)
-      .Case("rne", RISCVFPRndMode::RNE)
-      .Case("rtz", RISCVFPRndMode::RTZ)
-      .Case("rdn", RISCVFPRndMode::RDN)
-      .Case("rup", RISCVFPRndMode::RUP)
-      .Case("rmm", RISCVFPRndMode::RMM)
-      .Case("dyn", RISCVFPRndMode::DYN)
-      .Default(RISCVFPRndMode::Invalid);
-}
-} // namespace RISCVFPRndMode
-} // namespace llvm
-
-#endif
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVELFObjectWriter.cpp b/lib/Target/RISCV/MCTargetDesc/RISCVELFObjectWriter.cpp
deleted file mode 100644
index ad53228c104..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVELFObjectWriter.cpp
+++ /dev/null
@@ -1,75 +0,0 @@
-//===-- RISCVELFObjectWriter.cpp - RISCV ELF Writer -----------------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-#include "MCTargetDesc/RISCVFixupKinds.h"
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "llvm/MC/MCELFObjectWriter.h"
-#include "llvm/MC/MCFixup.h"
-#include "llvm/MC/MCObjectWriter.h"
-#include "llvm/Support/ErrorHandling.h"
-
-using namespace llvm;
-
-namespace {
-class RISCVELFObjectWriter : public MCELFObjectTargetWriter {
-public:
-  RISCVELFObjectWriter(uint8_t OSABI, bool Is64Bit);
-
-  ~RISCVELFObjectWriter() override;
-
-protected:
-  unsigned getRelocType(MCContext &Ctx, const MCValue &Target,
-                        const MCFixup &Fixup, bool IsPCRel) const override;
-};
-}
-
-RISCVELFObjectWriter::RISCVELFObjectWriter(uint8_t OSABI, bool Is64Bit)
-    : MCELFObjectTargetWriter(Is64Bit, OSABI, ELF::EM_RISCV,
-                              /*HasRelocationAddend*/ true) {}
-
-RISCVELFObjectWriter::~RISCVELFObjectWriter() {}
-
-unsigned RISCVELFObjectWriter::getRelocType(MCContext &Ctx,
-                                            const MCValue &Target,
-                                            const MCFixup &Fixup,
-                                            bool IsPCRel) const {
-  // Determine the type of the relocation
-  switch ((unsigned)Fixup.getKind()) {
-  default:
-    llvm_unreachable("invalid fixup kind!");
-  case FK_Data_4:
-    return ELF::R_RISCV_32;
-  case FK_Data_8:
-    return ELF::R_RISCV_64;
-  case RISCV::fixup_riscv_hi20:
-    return ELF::R_RISCV_HI20;
-  case RISCV::fixup_riscv_lo12_i:
-    return ELF::R_RISCV_LO12_I;
-  case RISCV::fixup_riscv_lo12_s:
-    return ELF::R_RISCV_LO12_S;
-  case RISCV::fixup_riscv_pcrel_hi20:
-    return ELF::R_RISCV_PCREL_HI20;
-  case RISCV::fixup_riscv_jal:
-    return ELF::R_RISCV_JAL;
-  case RISCV::fixup_riscv_branch:
-    return ELF::R_RISCV_BRANCH;
-  case RISCV::fixup_riscv_rvc_jump:
-    return ELF::R_RISCV_RVC_JUMP;
-  case RISCV::fixup_riscv_rvc_branch:
-    return ELF::R_RISCV_RVC_BRANCH;
-  }
-}
-
-std::unique_ptr<MCObjectWriter>
-llvm::createRISCVELFObjectWriter(raw_pwrite_stream &OS, uint8_t OSABI,
-                                 bool Is64Bit) {
-  return createELFObjectWriter(
-      llvm::make_unique<RISCVELFObjectWriter>(OSABI, Is64Bit), OS,
-      /*IsLittleEndian=*/true);
-}
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVFixupKinds.h b/lib/Target/RISCV/MCTargetDesc/RISCVFixupKinds.h
deleted file mode 100644
index cfb5d99e79f..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVFixupKinds.h
+++ /dev/null
@@ -1,52 +0,0 @@
-//===-- RISCVFixupKinds.h - RISCV Specific Fixup Entries --------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVFIXUPKINDS_H
-#define LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVFIXUPKINDS_H
-
-#include "llvm/MC/MCFixup.h"
-
-#undef RISCV
-
-namespace llvm {
-namespace RISCV {
-enum Fixups {
-  // fixup_riscv_hi20 - 20-bit fixup corresponding to hi(foo) for
-  // instructions like lui
-  fixup_riscv_hi20 = FirstTargetFixupKind,
-  // fixup_riscv_lo12_i - 12-bit fixup corresponding to lo(foo) for
-  // instructions like addi
-  fixup_riscv_lo12_i,
-  // fixup_riscv_lo12_s - 12-bit fixup corresponding to lo(foo) for
-  // the S-type store instructions
-  fixup_riscv_lo12_s,
-  // fixup_riscv_pcrel_hi20 - 20-bit fixup corresponding to pcrel_hi(foo) for
-  // instructions like auipc
-  fixup_riscv_pcrel_hi20,
-  // fixup_riscv_jal - 20-bit fixup for symbol references in the jal
-  // instruction
-  fixup_riscv_jal,
-  // fixup_riscv_branch - 12-bit fixup for symbol references in the branch
-  // instructions
-  fixup_riscv_branch,
-  // fixup_riscv_rvc_jump - 11-bit fixup for symbol references in the
-  // compressed jump instruction
-  fixup_riscv_rvc_jump,
-  // fixup_riscv_rvc_branch - 8-bit fixup for symbol references in the
-  // compressed branch instruction
-  fixup_riscv_rvc_branch,
-
-  // fixup_riscv_invalid - used as a sentinel and a marker, must be last fixup
-  fixup_riscv_invalid,
-  NumTargetFixupKinds = fixup_riscv_invalid - FirstTargetFixupKind
-};
-} // end namespace RISCV
-} // end namespace llvm
-
-#endif
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.cpp b/lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.cpp
deleted file mode 100644
index d622911e92c..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.cpp
+++ /dev/null
@@ -1,25 +0,0 @@
-//===-- RISCVMCAsmInfo.cpp - RISCV Asm properties -------------------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the declarations of the RISCVMCAsmInfo properties.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVMCAsmInfo.h"
-#include "llvm/ADT/Triple.h"
-using namespace llvm;
-
-void RISCVMCAsmInfo::anchor() {}
-
-RISCVMCAsmInfo::RISCVMCAsmInfo(const Triple &TT) {
-  CodePointerSize = CalleeSaveStackSlotSize = TT.isArch64Bit() ? 8 : 4;
-  CommentString = "#";
-  AlignmentIsInBytes = false;
-  SupportsDebugInformation = true;
-}
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.h b/lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.h
deleted file mode 100644
index 901a1eba8af..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCAsmInfo.h
+++ /dev/null
@@ -1,31 +0,0 @@
-//===-- RISCVMCAsmInfo.h - RISCV Asm Info ----------------------*- C++ -*--===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the declaration of the RISCVMCAsmInfo class.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVMCASMINFO_H
-#define LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVMCASMINFO_H
-
-#include "llvm/MC/MCAsmInfoELF.h"
-
-namespace llvm {
-class Triple;
-
-class RISCVMCAsmInfo : public MCAsmInfoELF {
-  void anchor() override;
-
-public:
-  explicit RISCVMCAsmInfo(const Triple &TargetTriple);
-};
-
-} // namespace llvm
-
-#endif
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp b/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp
deleted file mode 100644
index 641997e67e0..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp
+++ /dev/null
@@ -1,196 +0,0 @@
-//===-- RISCVMCCodeEmitter.cpp - Convert RISCV code to machine code -------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file implements the RISCVMCCodeEmitter class.
-//
-//===----------------------------------------------------------------------===//
-
-#include "MCTargetDesc/RISCVBaseInfo.h"
-#include "MCTargetDesc/RISCVFixupKinds.h"
-#include "MCTargetDesc/RISCVMCExpr.h"
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "llvm/ADT/Statistic.h"
-#include "llvm/MC/MCAsmInfo.h"
-#include "llvm/MC/MCCodeEmitter.h"
-#include "llvm/MC/MCContext.h"
-#include "llvm/MC/MCExpr.h"
-#include "llvm/MC/MCInst.h"
-#include "llvm/MC/MCInstrInfo.h"
-#include "llvm/MC/MCRegisterInfo.h"
-#include "llvm/MC/MCSymbol.h"
-#include "llvm/Support/Casting.h"
-#include "llvm/Support/EndianStream.h"
-#include "llvm/Support/raw_ostream.h"
-
-using namespace llvm;
-
-#define DEBUG_TYPE "mccodeemitter"
-
-STATISTIC(MCNumEmitted, "Number of MC instructions emitted");
-STATISTIC(MCNumFixups, "Number of MC fixups created");
-
-namespace {
-class RISCVMCCodeEmitter : public MCCodeEmitter {
-  RISCVMCCodeEmitter(const RISCVMCCodeEmitter &) = delete;
-  void operator=(const RISCVMCCodeEmitter &) = delete;
-  MCContext &Ctx;
-  MCInstrInfo const &MCII;
-
-public:
-  RISCVMCCodeEmitter(MCContext &ctx, MCInstrInfo const &MCII)
-      : Ctx(ctx), MCII(MCII) {}
-
-  ~RISCVMCCodeEmitter() override {}
-
-  void encodeInstruction(const MCInst &MI, raw_ostream &OS,
-                         SmallVectorImpl<MCFixup> &Fixups,
-                         const MCSubtargetInfo &STI) const override;
-
-  /// TableGen'erated function for getting the binary encoding for an
-  /// instruction.
-  uint64_t getBinaryCodeForInstr(const MCInst &MI,
-                                 SmallVectorImpl<MCFixup> &Fixups,
-                                 const MCSubtargetInfo &STI) const;
-
-  /// Return binary encoding of operand. If the machine operand requires
-  /// relocation, record the relocation and return zero.
-  unsigned getMachineOpValue(const MCInst &MI, const MCOperand &MO,
-                             SmallVectorImpl<MCFixup> &Fixups,
-                             const MCSubtargetInfo &STI) const;
-
-  unsigned getImmOpValueAsr1(const MCInst &MI, unsigned OpNo,
-                             SmallVectorImpl<MCFixup> &Fixups,
-                             const MCSubtargetInfo &STI) const;
-
-  unsigned getImmOpValue(const MCInst &MI, unsigned OpNo,
-                         SmallVectorImpl<MCFixup> &Fixups,
-                         const MCSubtargetInfo &STI) const;
-};
-} // end anonymous namespace
-
-MCCodeEmitter *llvm::createRISCVMCCodeEmitter(const MCInstrInfo &MCII,
-                                              const MCRegisterInfo &MRI,
-                                              MCContext &Ctx) {
-  return new RISCVMCCodeEmitter(Ctx, MCII);
-}
-
-void RISCVMCCodeEmitter::encodeInstruction(const MCInst &MI, raw_ostream &OS,
-                                           SmallVectorImpl<MCFixup> &Fixups,
-                                           const MCSubtargetInfo &STI) const {
-  const MCInstrDesc &Desc = MCII.get(MI.getOpcode());
-  // Get byte count of instruction.
-  unsigned Size = Desc.getSize();
-
-  switch (Size) {
-  default:
-    llvm_unreachable("Unhandled encodeInstruction length!");
-  case 2: {
-    uint16_t Bits = getBinaryCodeForInstr(MI, Fixups, STI);
-    support::endian::Writer<support::little>(OS).write<uint16_t>(Bits);
-    break;
-  }
-  case 4: {
-    uint32_t Bits = getBinaryCodeForInstr(MI, Fixups, STI);
-    support::endian::Writer<support::little>(OS).write(Bits);
-    break;
-  }
-  }
-
-  ++MCNumEmitted; // Keep track of the # of mi's emitted.
-}
-
-unsigned
-RISCVMCCodeEmitter::getMachineOpValue(const MCInst &MI, const MCOperand &MO,
-                                      SmallVectorImpl<MCFixup> &Fixups,
-                                      const MCSubtargetInfo &STI) const {
-
-  if (MO.isReg())
-    return Ctx.getRegisterInfo()->getEncodingValue(MO.getReg());
-
-  if (MO.isImm())
-    return static_cast<unsigned>(MO.getImm());
-
-  llvm_unreachable("Unhandled expression!");
-  return 0;
-}
-
-unsigned
-RISCVMCCodeEmitter::getImmOpValueAsr1(const MCInst &MI, unsigned OpNo,
-                                      SmallVectorImpl<MCFixup> &Fixups,
-                                      const MCSubtargetInfo &STI) const {
-  const MCOperand &MO = MI.getOperand(OpNo);
-
-  if (MO.isImm()) {
-    unsigned Res = MO.getImm();
-    assert((Res & 1) == 0 && "LSB is non-zero");
-    return Res >> 1;
-  }
-
-  return getImmOpValue(MI, OpNo, Fixups, STI);
-}
-
-unsigned RISCVMCCodeEmitter::getImmOpValue(const MCInst &MI, unsigned OpNo,
-                                           SmallVectorImpl<MCFixup> &Fixups,
-                                           const MCSubtargetInfo &STI) const {
-
-  const MCOperand &MO = MI.getOperand(OpNo);
-
-  MCInstrDesc const &Desc = MCII.get(MI.getOpcode());
-  unsigned MIFrm = Desc.TSFlags & RISCVII::InstFormatMask;
-
-  // If the destination is an immediate, there is nothing to do
-  if (MO.isImm())
-    return MO.getImm();
-
-  assert(MO.isExpr() &&
-         "getImmOpValue expects only expressions or immediates");
-  const MCExpr *Expr = MO.getExpr();
-  MCExpr::ExprKind Kind = Expr->getKind();
-  RISCV::Fixups FixupKind = RISCV::fixup_riscv_invalid;
-  if (Kind == MCExpr::Target) {
-    const RISCVMCExpr *RVExpr = cast<RISCVMCExpr>(Expr);
-
-    switch (RVExpr->getKind()) {
-    case RISCVMCExpr::VK_RISCV_None:
-    case RISCVMCExpr::VK_RISCV_Invalid:
-      llvm_unreachable("Unhandled fixup kind!");
-    case RISCVMCExpr::VK_RISCV_LO:
-      FixupKind = MIFrm == RISCVII::InstFormatI ? RISCV::fixup_riscv_lo12_i
-                                                : RISCV::fixup_riscv_lo12_s;
-      break;
-    case RISCVMCExpr::VK_RISCV_HI:
-      FixupKind = RISCV::fixup_riscv_hi20;
-      break;
-    case RISCVMCExpr::VK_RISCV_PCREL_HI:
-      FixupKind = RISCV::fixup_riscv_pcrel_hi20;
-      break;
-    }
-  } else if (Kind == MCExpr::SymbolRef &&
-             cast<MCSymbolRefExpr>(Expr)->getKind() == MCSymbolRefExpr::VK_None) {
-    if (Desc.getOpcode() == RISCV::JAL) {
-      FixupKind = RISCV::fixup_riscv_jal;
-    } else if (MIFrm == RISCVII::InstFormatB) {
-      FixupKind = RISCV::fixup_riscv_branch;
-    } else if (MIFrm == RISCVII::InstFormatCJ) {
-      FixupKind = RISCV::fixup_riscv_rvc_jump;
-    } else if (MIFrm == RISCVII::InstFormatCB) {
-      FixupKind = RISCV::fixup_riscv_rvc_branch;
-    }
-  }
-
-  assert(FixupKind != RISCV::fixup_riscv_invalid && "Unhandled expression!");
-
-  Fixups.push_back(
-      MCFixup::create(0, Expr, MCFixupKind(FixupKind), MI.getLoc()));
-  ++MCNumFixups;
-
-  return 0;
-}
-
-#include "RISCVGenMCCodeEmitter.inc"
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.cpp b/lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.cpp
deleted file mode 100644
index b36236ea155..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.cpp
+++ /dev/null
@@ -1,99 +0,0 @@
-//===-- RISCVMCExpr.cpp - RISCV specific MC expression classes ------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the implementation of the assembly expression modifiers
-// accepted by the RISCV architecture (e.g. ":lo12:", ":gottprel_g1:", ...).
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVMCExpr.h"
-#include "llvm/MC/MCAssembler.h"
-#include "llvm/MC/MCContext.h"
-#include "llvm/MC/MCStreamer.h"
-#include "llvm/MC/MCSymbolELF.h"
-#include "llvm/MC/MCValue.h"
-#include "llvm/Object/ELF.h"
-#include "llvm/Support/ErrorHandling.h"
-
-using namespace llvm;
-
-#define DEBUG_TYPE "riscvmcexpr"
-
-const RISCVMCExpr *RISCVMCExpr::create(const MCExpr *Expr, VariantKind Kind,
-                                       MCContext &Ctx) {
-  return new (Ctx) RISCVMCExpr(Expr, Kind);
-}
-
-void RISCVMCExpr::printImpl(raw_ostream &OS, const MCAsmInfo *MAI) const {
-  bool HasVariant = getKind() != VK_RISCV_None;
-  if (HasVariant)
-    OS << '%' << getVariantKindName(getKind()) << '(';
-  Expr->print(OS, MAI);
-  if (HasVariant)
-    OS << ')';
-}
-
-bool RISCVMCExpr::evaluateAsRelocatableImpl(MCValue &Res,
-                                            const MCAsmLayout *Layout,
-                                            const MCFixup *Fixup) const {
-  return getSubExpr()->evaluateAsRelocatable(Res, Layout, Fixup);
-}
-
-void RISCVMCExpr::visitUsedExpr(MCStreamer &Streamer) const {
-  Streamer.visitUsedExpr(*getSubExpr());
-}
-
-RISCVMCExpr::VariantKind RISCVMCExpr::getVariantKindForName(StringRef name) {
-  return StringSwitch<RISCVMCExpr::VariantKind>(name)
-      .Case("lo", VK_RISCV_LO)
-      .Case("hi", VK_RISCV_HI)
-      .Case("pcrel_hi", VK_RISCV_PCREL_HI)
-      .Default(VK_RISCV_Invalid);
-}
-
-StringRef RISCVMCExpr::getVariantKindName(VariantKind Kind) {
-  switch (Kind) {
-  default:
-    llvm_unreachable("Invalid ELF symbol kind");
-  case VK_RISCV_LO:
-    return "lo";
-  case VK_RISCV_HI:
-    return "hi";
-  case VK_RISCV_PCREL_HI:
-    return "pcrel_hi";
-  }
-}
-
-bool RISCVMCExpr::evaluateAsConstant(int64_t &Res) const {
-  MCValue Value;
-
-  if (Kind == VK_RISCV_PCREL_HI)
-    return false;
-
-  if (!getSubExpr()->evaluateAsRelocatable(Value, nullptr, nullptr))
-    return false;
-
-  if (!Value.isAbsolute())
-    return false;
-
-  Res = evaluateAsInt64(Value.getConstant());
-  return true;
-}
-
-int64_t RISCVMCExpr::evaluateAsInt64(int64_t Value) const {
-  switch (Kind) {
-  default:
-    llvm_unreachable("Invalid kind");
-  case VK_RISCV_LO:
-    return SignExtend64<12>(Value);
-  case VK_RISCV_HI:
-    // Add 1 if bit 11 is 1, to compensate for low 12 bits being negative.
-    return ((Value + 0x800) >> 12) & 0xfffff;
-  }
-}
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.h b/lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.h
deleted file mode 100644
index 69b55ca6f7c..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCExpr.h
+++ /dev/null
@@ -1,75 +0,0 @@
-//===-- RISCVMCExpr.h - RISCV specific MC expression classes ----*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file describes RISCV-specific MCExprs, used for modifiers like
-// "%hi" or "%lo" etc.,
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVMCEXPR_H
-#define LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVMCEXPR_H
-
-#include "llvm/MC/MCExpr.h"
-
-namespace llvm {
-
-class StringRef;
-class RISCVMCExpr : public MCTargetExpr {
-public:
-  enum VariantKind {
-    VK_RISCV_None,
-    VK_RISCV_LO,
-    VK_RISCV_HI,
-    VK_RISCV_PCREL_HI,
-    VK_RISCV_Invalid
-  };
-
-private:
-  const MCExpr *Expr;
-  const VariantKind Kind;
-
-  int64_t evaluateAsInt64(int64_t Value) const;
-
-  explicit RISCVMCExpr(const MCExpr *Expr, VariantKind Kind)
-      : Expr(Expr), Kind(Kind) {}
-
-public:
-  static const RISCVMCExpr *create(const MCExpr *Expr, VariantKind Kind,
-                                   MCContext &Ctx);
-
-  VariantKind getKind() const { return Kind; }
-
-  const MCExpr *getSubExpr() const { return Expr; }
-
-  void printImpl(raw_ostream &OS, const MCAsmInfo *MAI) const override;
-  bool evaluateAsRelocatableImpl(MCValue &Res, const MCAsmLayout *Layout,
-                                 const MCFixup *Fixup) const override;
-  void visitUsedExpr(MCStreamer &Streamer) const override;
-  MCFragment *findAssociatedFragment() const override {
-    return getSubExpr()->findAssociatedFragment();
-  }
-
-  // There are no TLS RISCVMCExprs at the moment.
-  void fixELFSymbolsInTLSFixups(MCAssembler &Asm) const override {}
-
-  bool evaluateAsConstant(int64_t &Res) const;
-
-  static bool classof(const MCExpr *E) {
-    return E->getKind() == MCExpr::Target;
-  }
-
-  static bool classof(const RISCVMCExpr *) { return true; }
-
-  static VariantKind getVariantKindForName(StringRef name);
-  static StringRef getVariantKindName(VariantKind Kind);
-};
-
-} // end namespace llvm.
-
-#endif
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp b/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp
deleted file mode 100644
index 45de976ec6c..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp
+++ /dev/null
@@ -1,80 +0,0 @@
-//===-- RISCVMCTargetDesc.cpp - RISCV Target Descriptions -----------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-///
-/// This file provides RISCV-specific target descriptions.
-///
-//===----------------------------------------------------------------------===//
-
-#include "RISCVMCTargetDesc.h"
-#include "InstPrinter/RISCVInstPrinter.h"
-#include "RISCVMCAsmInfo.h"
-#include "llvm/ADT/STLExtras.h"
-#include "llvm/MC/MCAsmInfo.h"
-#include "llvm/MC/MCInstrInfo.h"
-#include "llvm/MC/MCRegisterInfo.h"
-#include "llvm/MC/MCStreamer.h"
-#include "llvm/MC/MCSubtargetInfo.h"
-#include "llvm/Support/ErrorHandling.h"
-#include "llvm/Support/TargetRegistry.h"
-
-#define GET_INSTRINFO_MC_DESC
-#include "RISCVGenInstrInfo.inc"
-
-#define GET_REGINFO_MC_DESC
-#include "RISCVGenRegisterInfo.inc"
-
-#define GET_SUBTARGETINFO_MC_DESC
-#include "RISCVGenSubtargetInfo.inc"
-
-using namespace llvm;
-
-static MCInstrInfo *createRISCVMCInstrInfo() {
-  MCInstrInfo *X = new MCInstrInfo();
-  InitRISCVMCInstrInfo(X);
-  return X;
-}
-
-static MCRegisterInfo *createRISCVMCRegisterInfo(const Triple &TT) {
-  MCRegisterInfo *X = new MCRegisterInfo();
-  InitRISCVMCRegisterInfo(X, RISCV::X1);
-  return X;
-}
-
-static MCAsmInfo *createRISCVMCAsmInfo(const MCRegisterInfo &MRI,
-                                       const Triple &TT) {
-  return new RISCVMCAsmInfo(TT);
-}
-
-static MCSubtargetInfo *createRISCVMCSubtargetInfo(const Triple &TT,
-                                                   StringRef CPU, StringRef FS) {
-  std::string CPUName = CPU;
-  if (CPUName.empty())
-    CPUName = TT.isArch64Bit() ? "generic-rv64" : "generic-rv32";
-  return createRISCVMCSubtargetInfoImpl(TT, CPUName, FS);
-}
-
-static MCInstPrinter *createRISCVMCInstPrinter(const Triple &T,
-                                               unsigned SyntaxVariant,
-                                               const MCAsmInfo &MAI,
-                                               const MCInstrInfo &MII,
-                                               const MCRegisterInfo &MRI) {
-  return new RISCVInstPrinter(MAI, MII, MRI);
-}
-
-extern "C" void LLVMInitializeRISCVTargetMC() {
-  for (Target *T : {&getTheRISCV32Target(), &getTheRISCV64Target()}) {
-    TargetRegistry::RegisterMCAsmInfo(*T, createRISCVMCAsmInfo);
-    TargetRegistry::RegisterMCInstrInfo(*T, createRISCVMCInstrInfo);
-    TargetRegistry::RegisterMCRegInfo(*T, createRISCVMCRegisterInfo);
-    TargetRegistry::RegisterMCAsmBackend(*T, createRISCVAsmBackend);
-    TargetRegistry::RegisterMCCodeEmitter(*T, createRISCVMCCodeEmitter);
-    TargetRegistry::RegisterMCInstPrinter(*T, createRISCVMCInstPrinter);
-    TargetRegistry::RegisterMCSubtargetInfo(*T, createRISCVMCSubtargetInfo);
-  }
-}
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.h b/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.h
deleted file mode 100644
index bea2f8800fa..00000000000
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.h
+++ /dev/null
@@ -1,62 +0,0 @@
-//===-- RISCVMCTargetDesc.h - RISCV Target Descriptions ---------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file provides RISCV specific target descriptions.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVMCTARGETDESC_H
-#define LLVM_LIB_TARGET_RISCV_MCTARGETDESC_RISCVMCTARGETDESC_H
-
-#include "llvm/Config/config.h"
-#include "llvm/MC/MCTargetOptions.h"
-#include "llvm/Support/DataTypes.h"
-#include <memory>
-
-namespace llvm {
-class MCAsmBackend;
-class MCCodeEmitter;
-class MCContext;
-class MCInstrInfo;
-class MCObjectWriter;
-class MCRegisterInfo;
-class MCSubtargetInfo;
-class StringRef;
-class Target;
-class Triple;
-class raw_ostream;
-class raw_pwrite_stream;
-
-Target &getTheRISCV32Target();
-Target &getTheRISCV64Target();
-
-MCCodeEmitter *createRISCVMCCodeEmitter(const MCInstrInfo &MCII,
-                                        const MCRegisterInfo &MRI,
-                                        MCContext &Ctx);
-
-MCAsmBackend *createRISCVAsmBackend(const Target &T, const MCRegisterInfo &MRI,
-                                    const Triple &TT, StringRef CPU,
-                                    const MCTargetOptions &Options);
-
-std::unique_ptr<MCObjectWriter>
-createRISCVELFObjectWriter(raw_pwrite_stream &OS, uint8_t OSABI, bool Is64Bit);
-}
-
-// Defines symbolic names for RISC-V registers.
-#define GET_REGINFO_ENUM
-#include "RISCVGenRegisterInfo.inc"
-
-// Defines symbolic names for RISC-V instructions.
-#define GET_INSTRINFO_ENUM
-#include "RISCVGenInstrInfo.inc"
-
-#define GET_SUBTARGETINFO_ENUM
-#include "RISCVGenSubtargetInfo.inc"
-
-#endif
diff --git a/lib/Target/RISCV/RISCV.h b/lib/Target/RISCV/RISCV.h
deleted file mode 100644
index 884cb2e5014..00000000000
--- a/lib/Target/RISCV/RISCV.h
+++ /dev/null
@@ -1,37 +0,0 @@
-//===-- RISCV.h - Top-level interface for RISCV -----------------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the entry points for global functions defined in the LLVM
-// RISC-V back-end.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_RISCV_H
-#define LLVM_LIB_TARGET_RISCV_RISCV_H
-
-#include "MCTargetDesc/RISCVBaseInfo.h"
-
-namespace llvm {
-class RISCVTargetMachine;
-class AsmPrinter;
-class FunctionPass;
-class MCInst;
-class MCOperand;
-class MachineInstr;
-class MachineOperand;
-
-void LowerRISCVMachineInstrToMCInst(const MachineInstr *MI, MCInst &OutMI,
-                                    const AsmPrinter &AP);
-bool LowerRISCVMachineOperandToMCOperand(const MachineOperand &MO,
-                                         MCOperand &MCOp, const AsmPrinter &AP);
-
-FunctionPass *createRISCVISelDag(RISCVTargetMachine &TM);
-}
-
-#endif
diff --git a/lib/Target/RISCV/RISCV.td b/lib/Target/RISCV/RISCV.td
deleted file mode 100644
index be339770ed1..00000000000
--- a/lib/Target/RISCV/RISCV.td
+++ /dev/null
@@ -1,88 +0,0 @@
-//===-- RISCV.td - Describe the RISCV Target Machine -------*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-include "llvm/Target/Target.td"
-
-//===----------------------------------------------------------------------===//
-// RISC-V subtarget features and instruction predicates.
-//===----------------------------------------------------------------------===//
-
-def FeatureStdExtM
-    : SubtargetFeature<"m", "HasStdExtM", "true",
-                       "'M' (Integer Multiplication and Division)">;
-def HasStdExtM : Predicate<"Subtarget->hasStdExtM()">,
-                           AssemblerPredicate<"FeatureStdExtM">;
-
-def FeatureStdExtA
-    : SubtargetFeature<"a", "HasStdExtA", "true",
-                       "'A' (Atomic Instructions)">;
-def HasStdExtA : Predicate<"Subtarget->hasStdExtA()">,
-                           AssemblerPredicate<"FeatureStdExtA">;
-
-def FeatureStdExtF
-    : SubtargetFeature<"f", "HasStdExtF", "true",
-                       "'F' (Single-Precision Floating-Point)">;
-def HasStdExtF : Predicate<"Subtarget->hasStdExtF()">,
-                           AssemblerPredicate<"FeatureStdExtF">;
-
-def FeatureStdExtD
-    : SubtargetFeature<"d", "HasStdExtD", "true",
-                       "'D' (Double-Precision Floating-Point)",
-                       [FeatureStdExtF]>;
-def HasStdExtD : Predicate<"Subtarget->hasStdExtD()">,
-                           AssemblerPredicate<"FeatureStdExtD">;
-
-def FeatureStdExtC
-    : SubtargetFeature<"c", "HasStdExtC", "true",
-                       "'C' (Compressed Instructions)">;
-def HasStdExtC : Predicate<"Subtarget->hasStdExtC()">,
-                           AssemblerPredicate<"FeatureStdExtC">;
-
-
-def Feature64Bit
-    : SubtargetFeature<"64bit", "HasRV64", "true", "Implements RV64">;
-def IsRV64 : Predicate<"Subtarget->is64Bit()">,
-                       AssemblerPredicate<"Feature64Bit">;
-
-def RV64           : HwMode<"+64bit">;
-def RV32           : HwMode<"-64bit">;
-
-//===----------------------------------------------------------------------===//
-// Registers, calling conventions, instruction descriptions.
-//===----------------------------------------------------------------------===//
-
-include "RISCVRegisterInfo.td"
-include "RISCVCallingConv.td"
-include "RISCVInstrInfo.td"
-
-//===----------------------------------------------------------------------===//
-// RISC-V processors supported.
-//===----------------------------------------------------------------------===//
-
-def : ProcessorModel<"generic-rv32", NoSchedModel, []>;
-
-def : ProcessorModel<"generic-rv64", NoSchedModel, [Feature64Bit]>;
-
-//===----------------------------------------------------------------------===//
-// Define the RISC-V target.
-//===----------------------------------------------------------------------===//
-
-def RISCVInstrInfo : InstrInfo {
-  let guessInstructionProperties = 0;
-}
-
-def RISCVAsmParser : AsmParser {
-  let ShouldEmitMatchRegisterAltName = 1;
-  let AllowDuplicateRegisterNames = 1;
-}
-
-def RISCV : Target {
-  let InstructionSet = RISCVInstrInfo;
-  let AssemblyParsers = [RISCVAsmParser];
-}
diff --git a/lib/Target/RISCV/RISCVAsmPrinter.cpp b/lib/Target/RISCV/RISCVAsmPrinter.cpp
deleted file mode 100644
index 4808e6c73c5..00000000000
--- a/lib/Target/RISCV/RISCVAsmPrinter.cpp
+++ /dev/null
@@ -1,72 +0,0 @@
-//===-- RISCVAsmPrinter.cpp - RISCV LLVM assembly writer ------------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains a printer that converts from our internal representation
-// of machine-dependent LLVM code to the RISCV assembly language.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCV.h"
-#include "InstPrinter/RISCVInstPrinter.h"
-#include "RISCVTargetMachine.h"
-#include "llvm/CodeGen/AsmPrinter.h"
-#include "llvm/CodeGen/MachineConstantPool.h"
-#include "llvm/CodeGen/MachineFunctionPass.h"
-#include "llvm/CodeGen/MachineInstr.h"
-#include "llvm/CodeGen/MachineModuleInfo.h"
-#include "llvm/MC/MCAsmInfo.h"
-#include "llvm/MC/MCInst.h"
-#include "llvm/MC/MCStreamer.h"
-#include "llvm/MC/MCSymbol.h"
-#include "llvm/Support/TargetRegistry.h"
-#include "llvm/Support/raw_ostream.h"
-using namespace llvm;
-
-#define DEBUG_TYPE "asm-printer"
-
-namespace {
-class RISCVAsmPrinter : public AsmPrinter {
-public:
-  explicit RISCVAsmPrinter(TargetMachine &TM,
-                           std::unique_ptr<MCStreamer> Streamer)
-      : AsmPrinter(TM, std::move(Streamer)) {}
-
-  StringRef getPassName() const override { return "RISCV Assembly Printer"; }
-
-  void EmitInstruction(const MachineInstr *MI) override;
-
-  bool emitPseudoExpansionLowering(MCStreamer &OutStreamer,
-                                   const MachineInstr *MI);
-
-  // Wrapper needed for tblgenned pseudo lowering.
-  bool lowerOperand(const MachineOperand &MO, MCOperand &MCOp) const {
-    return LowerRISCVMachineOperandToMCOperand(MO, MCOp, *this);
-  }
-};
-}
-
-// Simple pseudo-instructions have their lowering (with expansion to real
-// instructions) auto-generated.
-#include "RISCVGenMCPseudoLowering.inc"
-
-void RISCVAsmPrinter::EmitInstruction(const MachineInstr *MI) {
-  // Do any auto-generated pseudo lowerings.
-  if (emitPseudoExpansionLowering(*OutStreamer, MI))
-    return;
-
-  MCInst TmpInst;
-  LowerRISCVMachineInstrToMCInst(MI, TmpInst, *this);
-  EmitToStreamer(*OutStreamer, TmpInst);
-}
-
-// Force static initialization.
-extern "C" void LLVMInitializeRISCVAsmPrinter() {
-  RegisterAsmPrinter<RISCVAsmPrinter> X(getTheRISCV32Target());
-  RegisterAsmPrinter<RISCVAsmPrinter> Y(getTheRISCV64Target());
-}
diff --git a/lib/Target/RISCV/RISCVCallingConv.td b/lib/Target/RISCV/RISCVCallingConv.td
deleted file mode 100644
index 0b7a523424c..00000000000
--- a/lib/Target/RISCV/RISCVCallingConv.td
+++ /dev/null
@@ -1,32 +0,0 @@
-//===-- RISCVCallingConv.td - Calling Conventions RISCV ----*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This describes the calling conventions for the RISCV architecture.
-//
-//===----------------------------------------------------------------------===//
-
-// RISCV 32-bit C return-value convention.
-def RetCC_RISCV32 : CallingConv<[CCIfType<[i32], CCAssignToReg<[X10, X11]>>]>;
-
-// RISCV 32-bit C Calling convention.
-def CC_RISCV32 : CallingConv<[
-  // Promote i8/i16 args to i32
-  CCIfType<[ i8, i16 ], CCPromoteToType<i32>>,
-
-  // All arguments get passed in integer registers if there is space.
-  CCIfType<[i32], CCAssignToReg<[ X10, X11, X12, X13, X14, X15, X16, X17]>>,
-
-  // Could be assigned to the stack in 8-byte aligned units, but unsupported
-  CCAssignToStack<8, 8>
-]>;
-
-def CSR : CalleeSavedRegs<(add X1, X3, X4, X8, X9, (sequence "X%u", 18, 27))>;
-
-// Needed for implementation of RISCVRegisterInfo::getNoPreservedMask()
-def CSR_NoRegs : CalleeSavedRegs<(add)>;
diff --git a/lib/Target/RISCV/RISCVFrameLowering.cpp b/lib/Target/RISCV/RISCVFrameLowering.cpp
deleted file mode 100644
index fd3b258e26c..00000000000
--- a/lib/Target/RISCV/RISCVFrameLowering.cpp
+++ /dev/null
@@ -1,29 +0,0 @@
-//===-- RISCVFrameLowering.cpp - RISCV Frame Information ------------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the RISCV implementation of TargetFrameLowering class.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVFrameLowering.h"
-#include "RISCVSubtarget.h"
-#include "llvm/CodeGen/MachineFrameInfo.h"
-#include "llvm/CodeGen/MachineFunction.h"
-#include "llvm/CodeGen/MachineInstrBuilder.h"
-#include "llvm/CodeGen/MachineRegisterInfo.h"
-
-using namespace llvm;
-
-bool RISCVFrameLowering::hasFP(const MachineFunction &MF) const { return true; }
-
-void RISCVFrameLowering::emitPrologue(MachineFunction &MF,
-                                      MachineBasicBlock &MBB) const {}
-
-void RISCVFrameLowering::emitEpilogue(MachineFunction &MF,
-                                      MachineBasicBlock &MBB) const {}
diff --git a/lib/Target/RISCV/RISCVFrameLowering.h b/lib/Target/RISCV/RISCVFrameLowering.h
deleted file mode 100644
index 0b2c7a40298..00000000000
--- a/lib/Target/RISCV/RISCVFrameLowering.h
+++ /dev/null
@@ -1,41 +0,0 @@
-//===-- RISCVFrameLowering.h - Define frame lowering for RISCV -*- C++ -*--===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This class implements RISCV-specific bits of TargetFrameLowering class.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_RISCVFRAMELOWERING_H
-#define LLVM_LIB_TARGET_RISCV_RISCVFRAMELOWERING_H
-
-#include "llvm/CodeGen/TargetFrameLowering.h"
-
-namespace llvm {
-class RISCVSubtarget;
-
-class RISCVFrameLowering : public TargetFrameLowering {
-public:
-  explicit RISCVFrameLowering(const RISCVSubtarget &STI)
-      : TargetFrameLowering(StackGrowsDown,
-                            /*StackAlignment=*/16,
-                            /*LocalAreaOffset=*/0) {}
-
-  void emitPrologue(MachineFunction &MF, MachineBasicBlock &MBB) const override;
-  void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const override;
-
-  bool hasFP(const MachineFunction &MF) const override;
-
-  MachineBasicBlock::iterator
-  eliminateCallFramePseudoInstr(MachineFunction &MF, MachineBasicBlock &MBB,
-                                MachineBasicBlock::iterator MI) const override {
-    return MBB.erase(MI);
-  }
-};
-}
-#endif
diff --git a/lib/Target/RISCV/RISCVISelDAGToDAG.cpp b/lib/Target/RISCV/RISCVISelDAGToDAG.cpp
deleted file mode 100644
index 5b038df4ae3..00000000000
--- a/lib/Target/RISCV/RISCVISelDAGToDAG.cpp
+++ /dev/null
@@ -1,88 +0,0 @@
-//===-- RISCVISelDAGToDAG.cpp - A dag to dag inst selector for RISCV ------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file defines an instruction selector for the RISCV target.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCV.h"
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "RISCVTargetMachine.h"
-#include "llvm/CodeGen/SelectionDAGISel.h"
-#include "llvm/Support/Debug.h"
-#include "llvm/Support/MathExtras.h"
-#include "llvm/Support/raw_ostream.h"
-using namespace llvm;
-
-#define DEBUG_TYPE "riscv-isel"
-
-// RISCV-specific code to select RISCV machine instructions for
-// SelectionDAG operations.
-namespace {
-class RISCVDAGToDAGISel final : public SelectionDAGISel {
-  const RISCVSubtarget *Subtarget;
-
-public:
-  explicit RISCVDAGToDAGISel(RISCVTargetMachine &TargetMachine)
-      : SelectionDAGISel(TargetMachine) {}
-
-  StringRef getPassName() const override {
-    return "RISCV DAG->DAG Pattern Instruction Selection";
-  }
-
-  bool runOnMachineFunction(MachineFunction &MF) override {
-    Subtarget = &MF.getSubtarget<RISCVSubtarget>();
-    return SelectionDAGISel::runOnMachineFunction(MF);
-  }
-
-  void Select(SDNode *Node) override;
-
-// Include the pieces autogenerated from the target description.
-#include "RISCVGenDAGISel.inc"
-};
-}
-
-void RISCVDAGToDAGISel::Select(SDNode *Node) {
-  unsigned Opcode = Node->getOpcode();
-  MVT XLenVT = Subtarget->getXLenVT();
-
-  // Dump information about the Node being selected.
-  DEBUG(dbgs() << "Selecting: "; Node->dump(CurDAG); dbgs() << "\n");
-
-  // If we have a custom node, we have already selected
-  if (Node->isMachineOpcode()) {
-    DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
-    Node->setNodeId(-1);
-    return;
-  }
-
-  // Instruction Selection not handled by the auto-generated tablegen selection
-  // should be handled here.
-  EVT VT = Node->getValueType(0);
-  if (Opcode == ISD::Constant && VT == XLenVT) {
-    auto *ConstNode = cast<ConstantSDNode>(Node);
-    // Materialize zero constants as copies from X0. This allows the coalescer
-    // to propagate these into other instructions.
-    if (ConstNode->isNullValue()) {
-      SDValue New = CurDAG->getCopyFromReg(CurDAG->getEntryNode(), SDLoc(Node),
-                                           RISCV::X0, XLenVT);
-      ReplaceNode(Node, New.getNode());
-      return;
-    }
-  }
-
-  // Select the default instruction.
-  SelectCode(Node);
-}
-
-// This pass converts a legalized DAG into a RISCV-specific DAG, ready
-// for instruction scheduling.
-FunctionPass *llvm::createRISCVISelDag(RISCVTargetMachine &TM) {
-  return new RISCVDAGToDAGISel(TM);
-}
diff --git a/lib/Target/RISCV/RISCVISelLowering.cpp b/lib/Target/RISCV/RISCVISelLowering.cpp
deleted file mode 100644
index 4801884e242..00000000000
--- a/lib/Target/RISCV/RISCVISelLowering.cpp
+++ /dev/null
@@ -1,559 +0,0 @@
-//===-- RISCVISelLowering.cpp - RISCV DAG Lowering Implementation  --------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file defines the interfaces that RISCV uses to lower LLVM code into a
-// selection DAG.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVISelLowering.h"
-#include "RISCV.h"
-#include "RISCVRegisterInfo.h"
-#include "RISCVSubtarget.h"
-#include "RISCVTargetMachine.h"
-#include "llvm/CodeGen/CallingConvLower.h"
-#include "llvm/CodeGen/MachineFrameInfo.h"
-#include "llvm/CodeGen/MachineFunction.h"
-#include "llvm/CodeGen/MachineInstrBuilder.h"
-#include "llvm/CodeGen/MachineRegisterInfo.h"
-#include "llvm/CodeGen/SelectionDAGISel.h"
-#include "llvm/CodeGen/TargetLoweringObjectFileImpl.h"
-#include "llvm/CodeGen/ValueTypes.h"
-#include "llvm/IR/DiagnosticInfo.h"
-#include "llvm/IR/DiagnosticPrinter.h"
-#include "llvm/Support/Debug.h"
-#include "llvm/Support/ErrorHandling.h"
-#include "llvm/Support/raw_ostream.h"
-
-using namespace llvm;
-
-#define DEBUG_TYPE "riscv-lower"
-
-RISCVTargetLowering::RISCVTargetLowering(const TargetMachine &TM,
-                                         const RISCVSubtarget &STI)
-    : TargetLowering(TM), Subtarget(STI) {
-
-  MVT XLenVT = Subtarget.getXLenVT();
-
-  // Set up the register classes.
-  addRegisterClass(XLenVT, &RISCV::GPRRegClass);
-
-  // Compute derived properties from the register classes.
-  computeRegisterProperties(STI.getRegisterInfo());
-
-  setStackPointerRegisterToSaveRestore(RISCV::X2);
-
-  for (auto N : {ISD::EXTLOAD, ISD::SEXTLOAD, ISD::ZEXTLOAD})
-    setLoadExtAction(N, XLenVT, MVT::i1, Promote);
-
-  // TODO: add all necessary setOperationAction calls.
-  setOperationAction(ISD::BR_JT, MVT::Other, Expand);
-  setOperationAction(ISD::BR_CC, XLenVT, Expand);
-  setOperationAction(ISD::SELECT, XLenVT, Custom);
-  setOperationAction(ISD::SELECT_CC, XLenVT, Expand);
-
-  for (auto VT : {MVT::i1, MVT::i8, MVT::i16})
-    setOperationAction(ISD::SIGN_EXTEND_INREG, VT, Expand);
-
-  setOperationAction(ISD::ADDC, XLenVT, Expand);
-  setOperationAction(ISD::ADDE, XLenVT, Expand);
-  setOperationAction(ISD::SUBC, XLenVT, Expand);
-  setOperationAction(ISD::SUBE, XLenVT, Expand);
-
-  setOperationAction(ISD::SREM, XLenVT, Expand);
-  setOperationAction(ISD::SDIVREM, XLenVT, Expand);
-  setOperationAction(ISD::SDIV, XLenVT, Expand);
-  setOperationAction(ISD::UREM, XLenVT, Expand);
-  setOperationAction(ISD::UDIVREM, XLenVT, Expand);
-  setOperationAction(ISD::UDIV, XLenVT, Expand);
-
-  setOperationAction(ISD::MUL, XLenVT, Expand);
-  setOperationAction(ISD::SMUL_LOHI, XLenVT, Expand);
-  setOperationAction(ISD::UMUL_LOHI, XLenVT, Expand);
-  setOperationAction(ISD::MULHS, XLenVT, Expand);
-  setOperationAction(ISD::MULHU, XLenVT, Expand);
-
-  setOperationAction(ISD::SHL_PARTS, XLenVT, Expand);
-  setOperationAction(ISD::SRL_PARTS, XLenVT, Expand);
-  setOperationAction(ISD::SRA_PARTS, XLenVT, Expand);
-
-  setOperationAction(ISD::ROTL, XLenVT, Expand);
-  setOperationAction(ISD::ROTR, XLenVT, Expand);
-  setOperationAction(ISD::BSWAP, XLenVT, Expand);
-  setOperationAction(ISD::CTTZ, XLenVT, Expand);
-  setOperationAction(ISD::CTLZ, XLenVT, Expand);
-  setOperationAction(ISD::CTPOP, XLenVT, Expand);
-
-  setOperationAction(ISD::GlobalAddress, XLenVT, Custom);
-  setOperationAction(ISD::BlockAddress, XLenVT, Custom);
-
-  setBooleanContents(ZeroOrOneBooleanContent);
-
-  // Function alignments (log2).
-  setMinFunctionAlignment(3);
-  setPrefFunctionAlignment(3);
-
-  // Effectively disable jump table generation.
-  setMinimumJumpTableEntries(INT_MAX);
-}
-
-// Changes the condition code and swaps operands if necessary, so the SetCC
-// operation matches one of the comparisons supported directly in the RISC-V
-// ISA.
-static void normaliseSetCC(SDValue &LHS, SDValue &RHS, ISD::CondCode &CC) {
-  switch (CC) {
-  default:
-    break;
-  case ISD::SETGT:
-  case ISD::SETLE:
-  case ISD::SETUGT:
-  case ISD::SETULE:
-    CC = ISD::getSetCCSwappedOperands(CC);
-    std::swap(LHS, RHS);
-    break;
-  }
-}
-
-// Return the RISC-V branch opcode that matches the given DAG integer
-// condition code. The CondCode must be one of those supported by the RISC-V
-// ISA (see normaliseSetCC).
-static unsigned getBranchOpcodeForIntCondCode(ISD::CondCode CC) {
-  switch (CC) {
-  default:
-    llvm_unreachable("Unsupported CondCode");
-  case ISD::SETEQ:
-    return RISCV::BEQ;
-  case ISD::SETNE:
-    return RISCV::BNE;
-  case ISD::SETLT:
-    return RISCV::BLT;
-  case ISD::SETGE:
-    return RISCV::BGE;
-  case ISD::SETULT:
-    return RISCV::BLTU;
-  case ISD::SETUGE:
-    return RISCV::BGEU;
-  }
-}
-
-SDValue RISCVTargetLowering::LowerOperation(SDValue Op,
-                                            SelectionDAG &DAG) const {
-  switch (Op.getOpcode()) {
-  default:
-    report_fatal_error("unimplemented operand");
-  case ISD::GlobalAddress:
-    return lowerGlobalAddress(Op, DAG);
-  case ISD::BlockAddress:
-    return lowerBlockAddress(Op, DAG);
-  case ISD::SELECT:
-    return lowerSELECT(Op, DAG);
-  }
-}
-
-SDValue RISCVTargetLowering::lowerGlobalAddress(SDValue Op,
-                                                SelectionDAG &DAG) const {
-  SDLoc DL(Op);
-  EVT Ty = Op.getValueType();
-  GlobalAddressSDNode *N = cast<GlobalAddressSDNode>(Op);
-  const GlobalValue *GV = N->getGlobal();
-  int64_t Offset = N->getOffset();
-
-  if (isPositionIndependent() || Subtarget.is64Bit())
-    report_fatal_error("Unable to lowerGlobalAddress");
-
-  SDValue GAHi =
-    DAG.getTargetGlobalAddress(GV, DL, Ty, Offset, RISCVII::MO_HI);
-  SDValue GALo =
-    DAG.getTargetGlobalAddress(GV, DL, Ty, Offset, RISCVII::MO_LO);
-  SDValue MNHi = SDValue(DAG.getMachineNode(RISCV::LUI, DL, Ty, GAHi), 0);
-  SDValue MNLo =
-    SDValue(DAG.getMachineNode(RISCV::ADDI, DL, Ty, MNHi, GALo), 0);
-  return MNLo;
-}
-
-SDValue RISCVTargetLowering::lowerBlockAddress(SDValue Op,
-                                               SelectionDAG &DAG) const {
-  SDLoc DL(Op);
-  EVT Ty = Op.getValueType();
-  BlockAddressSDNode *N = cast<BlockAddressSDNode>(Op);
-  const BlockAddress *BA = N->getBlockAddress();
-  int64_t Offset = N->getOffset();
-
-  if (isPositionIndependent() || Subtarget.is64Bit())
-    report_fatal_error("Unable to lowerBlockAddress");
-
-  SDValue BAHi = DAG.getTargetBlockAddress(BA, Ty, Offset, RISCVII::MO_HI);
-  SDValue BALo = DAG.getTargetBlockAddress(BA, Ty, Offset, RISCVII::MO_LO);
-  SDValue MNHi = SDValue(DAG.getMachineNode(RISCV::LUI, DL, Ty, BAHi), 0);
-  SDValue MNLo =
-    SDValue(DAG.getMachineNode(RISCV::ADDI, DL, Ty, MNHi, BALo), 0);
-  return MNLo;
-}
-
-SDValue RISCVTargetLowering::lowerExternalSymbol(SDValue Op,
-                                                 SelectionDAG &DAG) const {
-  SDLoc DL(Op);
-  EVT Ty = Op.getValueType();
-  ExternalSymbolSDNode *N = cast<ExternalSymbolSDNode>(Op);
-  const char *Sym = N->getSymbol();
-
-  // TODO: should also handle gp-relative loads.
-
-  if (isPositionIndependent() || Subtarget.is64Bit())
-    report_fatal_error("Unable to lowerExternalSymbol");
-
-  SDValue GAHi = DAG.getTargetExternalSymbol(Sym, Ty, RISCVII::MO_HI);
-  SDValue GALo = DAG.getTargetExternalSymbol(Sym, Ty, RISCVII::MO_LO);
-  SDValue MNHi = SDValue(DAG.getMachineNode(RISCV::LUI, DL, Ty, GAHi), 0);
-  SDValue MNLo =
-    SDValue(DAG.getMachineNode(RISCV::ADDI, DL, Ty, MNHi, GALo), 0);
-  return MNLo;
-}
-
-SDValue RISCVTargetLowering::lowerSELECT(SDValue Op, SelectionDAG &DAG) const {
-  SDValue CondV = Op.getOperand(0);
-  SDValue TrueV = Op.getOperand(1);
-  SDValue FalseV = Op.getOperand(2);
-  SDLoc DL(Op);
-  MVT XLenVT = Subtarget.getXLenVT();
-
-  // If the result type is XLenVT and CondV is the output of a SETCC node
-  // which also operated on XLenVT inputs, then merge the SETCC node into the
-  // lowered RISCVISD::SELECT_CC to take advantage of the integer
-  // compare+branch instructions. i.e.:
-  // (select (setcc lhs, rhs, cc), truev, falsev)
-  // -> (riscvisd::select_cc lhs, rhs, cc, truev, falsev)
-  if (Op.getSimpleValueType() == XLenVT && CondV.getOpcode() == ISD::SETCC &&
-      CondV.getOperand(0).getSimpleValueType() == XLenVT) {
-    SDValue LHS = CondV.getOperand(0);
-    SDValue RHS = CondV.getOperand(1);
-    auto CC = cast<CondCodeSDNode>(CondV.getOperand(2));
-    ISD::CondCode CCVal = CC->get();
-
-    normaliseSetCC(LHS, RHS, CCVal);
-
-    SDValue TargetCC = DAG.getConstant(CCVal, DL, XLenVT);
-    SDVTList VTs = DAG.getVTList(Op.getValueType(), MVT::Glue);
-    SDValue Ops[] = {LHS, RHS, TargetCC, TrueV, FalseV};
-    return DAG.getNode(RISCVISD::SELECT_CC, DL, VTs, Ops);
-  }
-
-  // Otherwise:
-  // (select condv, truev, falsev)
-  // -> (riscvisd::select_cc condv, zero, setne, truev, falsev)
-  SDValue Zero = DAG.getConstant(0, DL, XLenVT);
-  SDValue SetNE = DAG.getConstant(ISD::SETNE, DL, XLenVT);
-
-  SDVTList VTs = DAG.getVTList(Op.getValueType(), MVT::Glue);
-  SDValue Ops[] = {CondV, Zero, SetNE, TrueV, FalseV};
-
-  return DAG.getNode(RISCVISD::SELECT_CC, DL, VTs, Ops);
-}
-
-MachineBasicBlock *
-RISCVTargetLowering::EmitInstrWithCustomInserter(MachineInstr &MI,
-                                                 MachineBasicBlock *BB) const {
-  const TargetInstrInfo &TII = *BB->getParent()->getSubtarget().getInstrInfo();
-  DebugLoc DL = MI.getDebugLoc();
-
-  assert(MI.getOpcode() == RISCV::Select_GPR_Using_CC_GPR &&
-         "Unexpected instr type to insert");
-
-  // To "insert" a SELECT instruction, we actually have to insert the triangle
-  // control-flow pattern.  The incoming instruction knows the destination vreg
-  // to set, the condition code register to branch on, the true/false values to
-  // select between, and the condcode to use to select the appropriate branch.
-  //
-  // We produce the following control flow:
-  //     HeadMBB
-  //     |  \
-  //     |  IfFalseMBB
-  //     | /
-  //    TailMBB
-  const BasicBlock *LLVM_BB = BB->getBasicBlock();
-  MachineFunction::iterator I = ++BB->getIterator();
-
-  MachineBasicBlock *HeadMBB = BB;
-  MachineFunction *F = BB->getParent();
-  MachineBasicBlock *TailMBB = F->CreateMachineBasicBlock(LLVM_BB);
-  MachineBasicBlock *IfFalseMBB = F->CreateMachineBasicBlock(LLVM_BB);
-
-  F->insert(I, IfFalseMBB);
-  F->insert(I, TailMBB);
-  // Move all remaining instructions to TailMBB.
-  TailMBB->splice(TailMBB->begin(), HeadMBB,
-                  std::next(MachineBasicBlock::iterator(MI)), HeadMBB->end());
-  // Update machine-CFG edges by transferring all successors of the current
-  // block to the new block which will contain the Phi node for the select.
-  TailMBB->transferSuccessorsAndUpdatePHIs(HeadMBB);
-  // Set the successors for HeadMBB.
-  HeadMBB->addSuccessor(IfFalseMBB);
-  HeadMBB->addSuccessor(TailMBB);
-
-  // Insert appropriate branch.
-  unsigned LHS = MI.getOperand(1).getReg();
-  unsigned RHS = MI.getOperand(2).getReg();
-  auto CC = static_cast<ISD::CondCode>(MI.getOperand(3).getImm());
-  unsigned Opcode = getBranchOpcodeForIntCondCode(CC);
-
-  BuildMI(HeadMBB, DL, TII.get(Opcode))
-    .addReg(LHS)
-    .addReg(RHS)
-    .addMBB(TailMBB);
-
-  // IfFalseMBB just falls through to TailMBB.
-  IfFalseMBB->addSuccessor(TailMBB);
-
-  // %Result = phi [ %TrueValue, HeadMBB ], [ %FalseValue, IfFalseMBB ]
-  BuildMI(*TailMBB, TailMBB->begin(), DL, TII.get(RISCV::PHI),
-          MI.getOperand(0).getReg())
-      .addReg(MI.getOperand(4).getReg())
-      .addMBB(HeadMBB)
-      .addReg(MI.getOperand(5).getReg())
-      .addMBB(IfFalseMBB);
-
-  MI.eraseFromParent(); // The pseudo instruction is gone now.
-  return TailMBB;
-}
-
-// Calling Convention Implementation.
-#include "RISCVGenCallingConv.inc"
-
-// Transform physical registers into virtual registers.
-SDValue RISCVTargetLowering::LowerFormalArguments(
-    SDValue Chain, CallingConv::ID CallConv, bool IsVarArg,
-    const SmallVectorImpl<ISD::InputArg> &Ins, const SDLoc &DL,
-    SelectionDAG &DAG, SmallVectorImpl<SDValue> &InVals) const {
-
-  switch (CallConv) {
-  default:
-    report_fatal_error("Unsupported calling convention");
-  case CallingConv::C:
-  case CallingConv::Fast:
-    break;
-  }
-
-  MachineFunction &MF = DAG.getMachineFunction();
-  MachineRegisterInfo &RegInfo = MF.getRegInfo();
-  MVT XLenVT = Subtarget.getXLenVT();
-
-  if (IsVarArg)
-    report_fatal_error("VarArg not supported");
-
-  // Assign locations to all of the incoming arguments.
-  SmallVector<CCValAssign, 16> ArgLocs;
-  CCState CCInfo(CallConv, IsVarArg, MF, ArgLocs, *DAG.getContext());
-  CCInfo.AnalyzeFormalArguments(Ins, CC_RISCV32);
-
-  for (auto &VA : ArgLocs) {
-    if (!VA.isRegLoc())
-      report_fatal_error("Defined with too many args");
-
-    // Arguments passed in registers.
-    EVT RegVT = VA.getLocVT();
-    if (RegVT != XLenVT) {
-      DEBUG(dbgs() << "LowerFormalArguments Unhandled argument type: "
-          << RegVT.getEVTString() << "\n");
-      report_fatal_error("unhandled argument type");
-    }
-    const unsigned VReg =
-      RegInfo.createVirtualRegister(&RISCV::GPRRegClass);
-    RegInfo.addLiveIn(VA.getLocReg(), VReg);
-    SDValue ArgIn = DAG.getCopyFromReg(Chain, DL, VReg, RegVT);
-
-    InVals.push_back(ArgIn);
-  }
-  return Chain;
-}
-
-// Lower a call to a callseq_start + CALL + callseq_end chain, and add input
-// and output parameter nodes.
-SDValue RISCVTargetLowering::LowerCall(CallLoweringInfo &CLI,
-                                       SmallVectorImpl<SDValue> &InVals) const {
-  SelectionDAG &DAG = CLI.DAG;
-  SDLoc &DL = CLI.DL;
-  SmallVectorImpl<ISD::OutputArg> &Outs = CLI.Outs;
-  SmallVectorImpl<SDValue> &OutVals = CLI.OutVals;
-  SmallVectorImpl<ISD::InputArg> &Ins = CLI.Ins;
-  SDValue Chain = CLI.Chain;
-  SDValue Callee = CLI.Callee;
-  CLI.IsTailCall = false;
-  CallingConv::ID CallConv = CLI.CallConv;
-  bool IsVarArg = CLI.IsVarArg;
-  EVT PtrVT = getPointerTy(DAG.getDataLayout());
-
-  if (IsVarArg) {
-    report_fatal_error("LowerCall with varargs not implemented");
-  }
-
-  MachineFunction &MF = DAG.getMachineFunction();
-
-  // Analyze the operands of the call, assigning locations to each operand.
-  SmallVector<CCValAssign, 16> ArgLocs;
-  CCState ArgCCInfo(CallConv, IsVarArg, MF, ArgLocs, *DAG.getContext());
-  ArgCCInfo.AnalyzeCallOperands(Outs, CC_RISCV32);
-
-  // Get a count of how many bytes are to be pushed on the stack.
-  unsigned NumBytes = ArgCCInfo.getNextStackOffset();
-
-  for (auto &Arg : Outs) {
-    if (!Arg.Flags.isByVal())
-      continue;
-    report_fatal_error("Passing arguments byval not yet implemented");
-  }
-
-  Chain = DAG.getCALLSEQ_START(Chain, NumBytes, 0, CLI.DL);
-
-  // Copy argument values to their designated locations.
-  SmallVector<std::pair<unsigned, SDValue>, 8> RegsToPass;
-  SDValue StackPtr;
-  for (unsigned I = 0, E = ArgLocs.size(); I != E; ++I) {
-    CCValAssign &VA = ArgLocs[I];
-    SDValue ArgValue = OutVals[I];
-
-    // Promote the value if needed.
-    // For now, only handle fully promoted arguments.
-    switch (VA.getLocInfo()) {
-    case CCValAssign::Full:
-      break;
-    default:
-      llvm_unreachable("Unknown loc info!");
-    }
-
-    if (VA.isRegLoc()) {
-      // Queue up the argument copies and emit them at the end.
-      RegsToPass.push_back(std::make_pair(VA.getLocReg(), ArgValue));
-    } else {
-      assert(VA.isMemLoc() && "Argument not register or memory");
-      report_fatal_error("Passing arguments via the stack not yet implemented");
-    }
-  }
-
-  SDValue Glue;
-
-  // Build a sequence of copy-to-reg nodes, chained and glued together.
-  for (auto &Reg : RegsToPass) {
-    Chain = DAG.getCopyToReg(Chain, DL, Reg.first, Reg.second, Glue);
-    Glue = Chain.getValue(1);
-  }
-
-  if (isa<GlobalAddressSDNode>(Callee)) {
-    Callee = lowerGlobalAddress(Callee, DAG);
-  } else if (isa<ExternalSymbolSDNode>(Callee)) {
-    Callee = lowerExternalSymbol(Callee, DAG);
-  }
-
-  // The first call operand is the chain and the second is the target address.
-  SmallVector<SDValue, 8> Ops;
-  Ops.push_back(Chain);
-  Ops.push_back(Callee);
-
-  // Add argument registers to the end of the list so that they are
-  // known live into the call.
-  for (auto &Reg : RegsToPass)
-    Ops.push_back(DAG.getRegister(Reg.first, Reg.second.getValueType()));
-
-  // Add a register mask operand representing the call-preserved registers.
-  const TargetRegisterInfo *TRI = Subtarget.getRegisterInfo();
-  const uint32_t *Mask = TRI->getCallPreservedMask(MF, CallConv);
-  assert(Mask && "Missing call preserved mask for calling convention");
-  Ops.push_back(DAG.getRegisterMask(Mask));
-
-  // Glue the call to the argument copies, if any.
-  if (Glue.getNode())
-    Ops.push_back(Glue);
-
-  // Emit the call.
-  SDVTList NodeTys = DAG.getVTList(MVT::Other, MVT::Glue);
-  Chain = DAG.getNode(RISCVISD::CALL, DL, NodeTys, Ops);
-  Glue = Chain.getValue(1);
-
-  // Mark the end of the call, which is glued to the call itself.
-  Chain = DAG.getCALLSEQ_END(Chain,
-                             DAG.getConstant(NumBytes, DL, PtrVT, true),
-                             DAG.getConstant(0, DL, PtrVT, true),
-                             Glue, DL);
-  Glue = Chain.getValue(1);
-
-  // Assign locations to each value returned by this call.
-  SmallVector<CCValAssign, 16> RVLocs;
-  CCState RetCCInfo(CallConv, IsVarArg, MF, RVLocs, *DAG.getContext());
-  RetCCInfo.AnalyzeCallResult(Ins, RetCC_RISCV32);
-
-  // Copy all of the result registers out of their specified physreg.
-  for (auto &VA : RVLocs) {
-    // Copy the value out, gluing the copy to the end of the call sequence.
-    SDValue RetValue = DAG.getCopyFromReg(Chain, DL, VA.getLocReg(),
-                                          VA.getLocVT(), Glue);
-    Chain = RetValue.getValue(1);
-    Glue = RetValue.getValue(2);
-
-    InVals.push_back(Chain.getValue(0));
-  }
-
-  return Chain;
-}
-
-SDValue
-RISCVTargetLowering::LowerReturn(SDValue Chain, CallingConv::ID CallConv,
-                                 bool IsVarArg,
-                                 const SmallVectorImpl<ISD::OutputArg> &Outs,
-                                 const SmallVectorImpl<SDValue> &OutVals,
-                                 const SDLoc &DL, SelectionDAG &DAG) const {
-  if (IsVarArg) {
-    report_fatal_error("VarArg not supported");
-  }
-
-  // Stores the assignment of the return value to a location.
-  SmallVector<CCValAssign, 16> RVLocs;
-
-  // Info about the registers and stack slot.
-  CCState CCInfo(CallConv, IsVarArg, DAG.getMachineFunction(), RVLocs,
-                 *DAG.getContext());
-
-  CCInfo.AnalyzeReturn(Outs, RetCC_RISCV32);
-
-  SDValue Flag;
-  SmallVector<SDValue, 4> RetOps(1, Chain);
-
-  // Copy the result values into the output registers.
-  for (unsigned i = 0, e = RVLocs.size(); i < e; ++i) {
-    CCValAssign &VA = RVLocs[i];
-    assert(VA.isRegLoc() && "Can only return in registers!");
-
-    Chain = DAG.getCopyToReg(Chain, DL, VA.getLocReg(), OutVals[i], Flag);
-
-    // Guarantee that all emitted copies are stuck together.
-    Flag = Chain.getValue(1);
-    RetOps.push_back(DAG.getRegister(VA.getLocReg(), VA.getLocVT()));
-  }
-
-  RetOps[0] = Chain; // Update chain.
-
-  // Add the flag if we have it.
-  if (Flag.getNode()) {
-    RetOps.push_back(Flag);
-  }
-
-  return DAG.getNode(RISCVISD::RET_FLAG, DL, MVT::Other, RetOps);
-}
-
-const char *RISCVTargetLowering::getTargetNodeName(unsigned Opcode) const {
-  switch ((RISCVISD::NodeType)Opcode) {
-  case RISCVISD::FIRST_NUMBER:
-    break;
-  case RISCVISD::RET_FLAG:
-    return "RISCVISD::RET_FLAG";
-  case RISCVISD::CALL:
-    return "RISCVISD::CALL";
-  case RISCVISD::SELECT_CC:
-    return "RISCVISD::SELECT_CC";
-  }
-  return nullptr;
-}
diff --git a/lib/Target/RISCV/RISCVISelLowering.h b/lib/Target/RISCV/RISCVISelLowering.h
deleted file mode 100644
index 933bc6218d5..00000000000
--- a/lib/Target/RISCV/RISCVISelLowering.h
+++ /dev/null
@@ -1,74 +0,0 @@
-//===-- RISCVISelLowering.h - RISCV DAG Lowering Interface ------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file defines the interfaces that RISCV uses to lower LLVM code into a
-// selection DAG.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_RISCVISELLOWERING_H
-#define LLVM_LIB_TARGET_RISCV_RISCVISELLOWERING_H
-
-#include "RISCV.h"
-#include "llvm/CodeGen/SelectionDAG.h"
-#include "llvm/CodeGen/TargetLowering.h"
-
-namespace llvm {
-class RISCVSubtarget;
-namespace RISCVISD {
-enum NodeType : unsigned {
-  FIRST_NUMBER = ISD::BUILTIN_OP_END,
-  RET_FLAG,
-  CALL,
-  SELECT_CC
-};
-}
-
-class RISCVTargetLowering : public TargetLowering {
-  const RISCVSubtarget &Subtarget;
-
-public:
-  explicit RISCVTargetLowering(const TargetMachine &TM,
-                               const RISCVSubtarget &STI);
-
-  // Provide custom lowering hooks for some operations.
-  SDValue LowerOperation(SDValue Op, SelectionDAG &DAG) const override;
-
-  // This method returns the name of a target specific DAG node.
-  const char *getTargetNodeName(unsigned Opcode) const override;
-
-  MachineBasicBlock *
-  EmitInstrWithCustomInserter(MachineInstr &MI,
-                              MachineBasicBlock *BB) const override;
-
-private:
-  // Lower incoming arguments, copy physregs into vregs
-  SDValue LowerFormalArguments(SDValue Chain, CallingConv::ID CallConv,
-                               bool IsVarArg,
-                               const SmallVectorImpl<ISD::InputArg> &Ins,
-                               const SDLoc &DL, SelectionDAG &DAG,
-                               SmallVectorImpl<SDValue> &InVals) const override;
-  SDValue LowerReturn(SDValue Chain, CallingConv::ID CallConv, bool IsVarArg,
-                      const SmallVectorImpl<ISD::OutputArg> &Outs,
-                      const SmallVectorImpl<SDValue> &OutVals, const SDLoc &DL,
-                      SelectionDAG &DAG) const override;
-  SDValue LowerCall(TargetLowering::CallLoweringInfo &CLI,
-                    SmallVectorImpl<SDValue> &InVals) const override;
-  bool shouldConvertConstantLoadToIntImm(const APInt &Imm,
-                                         Type *Ty) const override {
-    return true;
-  }
-  SDValue lowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const;
-  SDValue lowerBlockAddress(SDValue Op, SelectionDAG &DAG) const;
-  SDValue lowerExternalSymbol(SDValue Op, SelectionDAG &DAG) const;
-  SDValue lowerSELECT(SDValue Op, SelectionDAG &DAG) const;
-};
-}
-
-#endif
diff --git a/lib/Target/RISCV/RISCVInstrFormats.td b/lib/Target/RISCV/RISCVInstrFormats.td
deleted file mode 100644
index 7479ffbc953..00000000000
--- a/lib/Target/RISCV/RISCVInstrFormats.td
+++ /dev/null
@@ -1,285 +0,0 @@
-//===-- RISCVInstrFormats.td - RISCV Instruction Formats ---*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-//===----------------------------------------------------------------------===//
-//
-//  These instruction format definitions are structured to match the
-//  description in the RISC-V User-Level ISA specification as closely as
-//  possible. For instance, the specification describes instructions with the
-//  MSB (31st bit) on the left and the LSB (0th bit) on the right. This is
-//  reflected in the order of parameters to each instruction class.
-//
-//  One area of divergence is in the description of immediates. The
-//  specification describes immediate encoding in terms of bit-slicing
-//  operations on the logical value represented. The immediate argument to
-//  these instruction formats instead represents the bit sequence that will be
-//  inserted into the instruction. e.g. although JAL's immediate is logically
-//  a 21-bit value (where the LSB is always zero), we describe it as an imm20
-//  to match how it is encoded.
-//
-//===----------------------------------------------------------------------===//
-
-// Format specifies the encoding used by the instruction. This is used by
-// RISCVMCCodeEmitter to determine which form of fixup to use. These
-// definitions must be kept in-sync with RISCVBaseInfo.h.
-class InstFormat<bits<5> val> {
-  bits<5> Value = val;
-}
-def InstFormatPseudo : InstFormat<0>;
-def InstFormatR      : InstFormat<1>;
-def InstFormatR4     : InstFormat<2>;
-def InstFormatI      : InstFormat<3>;
-def InstFormatS      : InstFormat<4>;
-def InstFormatB      : InstFormat<5>;
-def InstFormatU      : InstFormat<6>;
-def InstFormatJ      : InstFormat<7>;
-def InstFormatCR     : InstFormat<8>;
-def InstFormatCI     : InstFormat<9>;
-def InstFormatCSS    : InstFormat<10>;
-def InstFormatCIW    : InstFormat<11>;
-def InstFormatCL     : InstFormat<12>;
-def InstFormatCS     : InstFormat<13>;
-def InstFormatCB     : InstFormat<14>;
-def InstFormatCJ     : InstFormat<15>;
-def InstFormatOther  : InstFormat<16>;
-
-// The following opcode names and match those given in Table 19.1 in the
-// RISC-V User-level ISA specification ("RISC-V base opcode map").
-class RISCVOpcode<bits<7> val> {
-  bits<7> Value = val;
-}
-def OPC_LOAD      : RISCVOpcode<0b0000011>;
-def OPC_LOAD_FP   : RISCVOpcode<0b0000111>;
-def OPC_MISC_MEM  : RISCVOpcode<0b0001111>;
-def OPC_OP_IMM    : RISCVOpcode<0b0010011>;
-def OPC_AUIPC     : RISCVOpcode<0b0010111>;
-def OPC_OP_IMM_32 : RISCVOpcode<0b0011011>;
-def OPC_STORE     : RISCVOpcode<0b0100011>;
-def OPC_STORE_FP  : RISCVOpcode<0b0100111>;
-def OPC_AMO       : RISCVOpcode<0b0101111>;
-def OPC_OP        : RISCVOpcode<0b0110011>;
-def OPC_LUI       : RISCVOpcode<0b0110111>;
-def OPC_OP_32     : RISCVOpcode<0b0111011>;
-def OPC_MADD      : RISCVOpcode<0b1000011>;
-def OPC_MSUB      : RISCVOpcode<0b1000111>;
-def OPC_NMSUB     : RISCVOpcode<0b1001011>;
-def OPC_NMADD     : RISCVOpcode<0b1001111>;
-def OPC_OP_FP     : RISCVOpcode<0b1010011>;
-def OPC_BRANCH    : RISCVOpcode<0b1100011>;
-def OPC_JALR      : RISCVOpcode<0b1100111>;
-def OPC_JAL       : RISCVOpcode<0b1101111>;
-def OPC_SYSTEM    : RISCVOpcode<0b1110011>;
-
-class RVInst<dag outs, dag ins, string opcodestr, string argstr,
-             list<dag> pattern, InstFormat format>
-    : Instruction {
-  field bits<32> Inst;
-  // SoftFail is a field the disassembler can use to provide a way for
-  // instructions to not match without killing the whole decode process. It is
-  // mainly used for ARM, but Tablegen expects this field to exist or it fails
-  // to build the decode table.
-  field bits<32> SoftFail = 0;
-  let Size = 4;
-
-  bits<7> Opcode = 0;
-
-  let Inst{6-0} = Opcode;
-
-  let Namespace = "RISCV";
-
-  dag OutOperandList = outs;
-  dag InOperandList = ins;
-  let AsmString = opcodestr # "\t" # argstr;
-  let Pattern = pattern;
-
-  let TSFlags{4-0} = format.Value;
-}
-
-// Pseudo instructions
-class Pseudo<dag outs, dag ins, list<dag> pattern>
-    : RVInst<outs, ins, "", "", pattern, InstFormatPseudo> {
-  let isPseudo = 1;
-  let isCodeGenOnly = 1;
-}
-
-// Instruction formats are listed in the order they appear in the RISC-V
-// instruction set manual (R, I, S, B, U, J) with sub-formats (e.g. RVInstR4,
-// RVInstRAtomic) sorted alphabetically.
-
-class RVInstR<bits<7> funct7, bits<3> funct3, RISCVOpcode opcode, dag outs,
-              dag ins, string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatR> {
-  bits<5> rs2;
-  bits<5> rs1;
-  bits<5> rd;
-
-  let Inst{31-25} = funct7;
-  let Inst{24-20} = rs2;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstR4<bits<2> funct2, RISCVOpcode opcode, dag outs, dag ins,
-               string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatR4> {
-  bits<5> rs3;
-  bits<5> rs2;
-  bits<5> rs1;
-  bits<3> funct3;
-  bits<5> rd;
-
-  let Inst{31-27} = rs3;
-  let Inst{26-25} = funct2;
-  let Inst{24-20} = rs2;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstRAtomic<bits<5> funct5, bit aq, bit rl, bits<3> funct3,
-                    RISCVOpcode opcode, dag outs, dag ins, string opcodestr,
-                    string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatR> {
-  bits<5> rs2;
-  bits<5> rs1;
-  bits<5> rd;
-
-  let Inst{31-27} = funct5;
-  let Inst{26} = aq;
-  let Inst{25} = rl;
-  let Inst{24-20} = rs2;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstRFrm<bits<7> funct7, RISCVOpcode opcode, dag outs, dag ins,
-                 string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatR> {
-  bits<5> rs2;
-  bits<5> rs1;
-  bits<3> funct3;
-  bits<5> rd;
-
-  let Inst{31-25} = funct7;
-  let Inst{24-20} = rs2;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstI<bits<3> funct3, RISCVOpcode opcode, dag outs, dag ins,
-              string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatI> {
-  bits<12> imm12;
-  bits<5> rs1;
-  bits<5> rd;
-
-  let Inst{31-20} = imm12;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstIShift<bit arithshift, bits<3> funct3, RISCVOpcode opcode,
-                   dag outs, dag ins, string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatI> {
-  bits<6> shamt;
-  bits<5> rs1;
-  bits<5> rd;
-
-  let Inst{31} = 0;
-  let Inst{30} = arithshift;
-  let Inst{29-26} = 0;
-  let Inst{25-20} = shamt;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstIShiftW<bit arithshift, bits<3> funct3, RISCVOpcode opcode,
-                    dag outs, dag ins, string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatI> {
-  bits<5> shamt;
-  bits<5> rs1;
-  bits<5> rd;
-
-  let Inst{31} = 0;
-  let Inst{30} = arithshift;
-  let Inst{29-25} = 0;
-  let Inst{24-20} = shamt;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstS<bits<3> funct3, RISCVOpcode opcode, dag outs, dag ins,
-              string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatS> {
-  bits<12> imm12;
-  bits<5> rs2;
-  bits<5> rs1;
-
-  let Inst{31-25} = imm12{11-5};
-  let Inst{24-20} = rs2;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-7} = imm12{4-0};
-  let Opcode = opcode.Value;
-}
-
-class RVInstB<bits<3> funct3, RISCVOpcode opcode, dag outs, dag ins,
-              string opcodestr, string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatB> {
-  bits<12> imm12;
-  bits<5> rs2;
-  bits<5> rs1;
-
-  let Inst{31} = imm12{11};
-  let Inst{30-25} = imm12{9-4};
-  let Inst{24-20} = rs2;
-  let Inst{19-15} = rs1;
-  let Inst{14-12} = funct3;
-  let Inst{11-8} = imm12{3-0};
-  let Inst{7} = imm12{10};
-  let Opcode = opcode.Value;
-}
-
-class RVInstU<RISCVOpcode opcode, dag outs, dag ins, string opcodestr,
-              string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatU> {
-  bits<20> imm20;
-  bits<5> rd;
-
-  let Inst{31-12} = imm20;
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
-
-class RVInstJ<RISCVOpcode opcode, dag outs, dag ins, string opcodestr,
-              string argstr>
-    : RVInst<outs, ins, opcodestr, argstr, [], InstFormatJ> {
-  bits<20> imm20;
-  bits<5> rd;
-
-  let Inst{31} = imm20{19};
-  let Inst{30-21} = imm20{9-0};
-  let Inst{20} = imm20{10};
-  let Inst{19-12} = imm20{18-11};
-  let Inst{11-7} = rd;
-  let Opcode = opcode.Value;
-}
diff --git a/lib/Target/RISCV/RISCVInstrFormatsC.td b/lib/Target/RISCV/RISCVInstrFormatsC.td
deleted file mode 100644
index fe4778bd313..00000000000
--- a/lib/Target/RISCV/RISCVInstrFormatsC.td
+++ /dev/null
@@ -1,136 +0,0 @@
-//===-- RISCVInstrFormatsC.td - RISCV C Instruction Formats --*- tablegen -*-=//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-//  This file describes the RISC-V C extension instruction formats.
-//
-//===----------------------------------------------------------------------===//
-
-class RVInst16<dag outs, dag ins, string opcodestr, string argstr,
-               list<dag> pattern, InstFormat format>
-    : Instruction {
-  field bits<16> Inst;
-  // SoftFail is a field the disassembler can use to provide a way for
-  // instructions to not match without killing the whole decode process. It is
-  // mainly used for ARM, but Tablegen expects this field to exist or it fails
-  // to build the decode table.
-  field bits<16> SoftFail = 0;
-  let Size = 2;
-
-  bits<2> Opcode = 0;
-
-  let Namespace = "RISCV";
-
-  dag OutOperandList = outs;
-  dag InOperandList = ins;
-  let AsmString = opcodestr # "\t" # argstr;
-  let Pattern = pattern;
-
-  let TSFlags{4-0} = format.Value;
-}
-
-class RVInst16CR<bits<4> funct4, bits<2> opcode, dag outs, dag ins,
-                 string opcodestr, string argstr>
-    : RVInst16<outs, ins, opcodestr, argstr, [], InstFormatCR> {
-  bits<5> rs1;
-  bits<5> rs2;
-
-  let Inst{15-12} = funct4;
-  let Inst{11-7} = rs1;
-  let Inst{6-2} = rs2;
-  let Inst{1-0} = opcode;
-}
-
-// The immediate value encoding differs for each instruction, so each subclass
-// is responsible for setting the appropriate bits in the Inst field.
-// The bits Inst{6-2} must be set for each instruction.
-class RVInst16CI<bits<3> funct3, bits<2> opcode, dag outs, dag ins,
-                 string opcodestr, string argstr>
-    : RVInst16<outs, ins, opcodestr, argstr, [], InstFormatCI> {
-  bits<10> imm;
-  bits<5> rd;
-  bits<5> rs1;
-
-  let Inst{15-13} = funct3;
-  let Inst{12} = imm{5};
-  let Inst{11-7} = rd;
-  let Inst{1-0} = opcode;
-}
-
-// The immediate value encoding differs for each instruction, so each subclass
-// is responsible for setting the appropriate bits in the Inst field.
-// The bits Inst{12-7} must be set for each instruction.
-class RVInst16CSS<bits<3> funct3, bits<2> opcode, dag outs, dag ins,
-                  string opcodestr, string argstr>
-    : RVInst16<outs, ins, opcodestr, argstr, [], InstFormatCSS> {
-  bits<10> imm;
-  bits<5> rs2;
-  bits<5> rs1;
-
-  let Inst{15-13} = funct3;
-  let Inst{6-2} = rs2;
-  let Inst{1-0} = opcode;
-}
-
-// The immediate value encoding differs for each instruction, so each subclass
-// is responsible for setting the appropriate bits in the Inst field.
-// The bits Inst{12-10} and Inst{6-5} must be set for each instruction.
-class RVInst16CL<bits<3> funct3, bits<2> opcode, dag outs, dag ins,
-                 string opcodestr, string argstr>
-    : RVInst16<outs, ins, opcodestr, argstr, [], InstFormatCL> {
-  bits<3> rd;
-  bits<3> rs1;
-
-  let Inst{15-13} = funct3;
-  let Inst{9-7} = rs1;
-  let Inst{4-2} = rd;
-  let Inst{1-0} = opcode;
-}
-
-// The immediate value encoding differs for each instruction, so each subclass
-// is responsible for setting the appropriate bits in the Inst field.
-// The bits Inst{12-10} and Inst{6-5} must be set for each instruction.
-class RVInst16CS<bits<3> funct3, bits<2> opcode, dag outs, dag ins,
-                 string opcodestr, string argstr>
-    : RVInst16<outs, ins, opcodestr, argstr, [], InstFormatCS> {
-  bits<3> rs2;
-  bits<3> rs1;
-
-  let Inst{15-13} = funct3;
-  let Inst{9-7} = rs1;
-  let Inst{4-2} = rs2;
-  let Inst{1-0} = opcode;
-}
-
-class RVInst16CB<bits<3> funct3, bits<2> opcode, dag outs, dag ins,
-                 string opcodestr, string argstr>
-    : RVInst16<outs, ins, opcodestr, argstr, [], InstFormatCB> {
-  bits<9> imm;
-  bits<3> rs1;
-
-  let Inst{15-13} = funct3;
-  let Inst{9-7} = rs1;
-  let Inst{1-0} = opcode;
-}
-
-class RVInst16CJ<bits<3> funct3, bits<2> opcode, dag outs, dag ins,
-                 string opcodestr, string argstr>
-    : RVInst16<outs, ins, opcodestr, argstr, [], InstFormatCJ> {
-  bits<11> offset;
-
-  let Inst{15-13} = funct3;
-  let Inst{12} = offset{10};
-  let Inst{11} = offset{3};
-  let Inst{10-9} = offset{8-7};
-  let Inst{8} = offset{9};
-  let Inst{7} = offset{5};
-  let Inst{6} = offset{6};
-  let Inst{5-3} = offset{2-0};
-  let Inst{2} = offset{4};
-  let Inst{1-0} = opcode;
-}
diff --git a/lib/Target/RISCV/RISCVInstrInfo.cpp b/lib/Target/RISCV/RISCVInstrInfo.cpp
deleted file mode 100644
index 186fe363edd..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfo.cpp
+++ /dev/null
@@ -1,77 +0,0 @@
-//===-- RISCVInstrInfo.cpp - RISCV Instruction Information ------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the RISCV implementation of the TargetInstrInfo class.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVInstrInfo.h"
-#include "RISCV.h"
-#include "RISCVSubtarget.h"
-#include "RISCVTargetMachine.h"
-#include "llvm/ADT/STLExtras.h"
-#include "llvm/ADT/SmallVector.h"
-#include "llvm/CodeGen/MachineFunctionPass.h"
-#include "llvm/CodeGen/MachineInstrBuilder.h"
-#include "llvm/CodeGen/MachineRegisterInfo.h"
-#include "llvm/Support/ErrorHandling.h"
-#include "llvm/Support/TargetRegistry.h"
-
-#define GET_INSTRINFO_CTOR_DTOR
-#include "RISCVGenInstrInfo.inc"
-
-using namespace llvm;
-
-RISCVInstrInfo::RISCVInstrInfo()
-    : RISCVGenInstrInfo(RISCV::ADJCALLSTACKDOWN, RISCV::ADJCALLSTACKUP) {}
-
-void RISCVInstrInfo::copyPhysReg(MachineBasicBlock &MBB,
-                                 MachineBasicBlock::iterator MBBI,
-                                 const DebugLoc &DL, unsigned DstReg,
-                                 unsigned SrcReg, bool KillSrc) const {
-  assert(RISCV::GPRRegClass.contains(DstReg, SrcReg) &&
-         "Impossible reg-to-reg copy");
-
-  BuildMI(MBB, MBBI, DL, get(RISCV::ADDI), DstReg)
-      .addReg(SrcReg, getKillRegState(KillSrc))
-      .addImm(0);
-}
-
-void RISCVInstrInfo::storeRegToStackSlot(MachineBasicBlock &MBB,
-                                         MachineBasicBlock::iterator I,
-                                         unsigned SrcReg, bool IsKill, int FI,
-                                         const TargetRegisterClass *RC,
-                                         const TargetRegisterInfo *TRI) const {
-  DebugLoc DL;
-  if (I != MBB.end())
-    DL = I->getDebugLoc();
-
-  if (RISCV::GPRRegClass.hasSubClassEq(RC))
-    BuildMI(MBB, I, DL, get(RISCV::SW))
-        .addReg(SrcReg, getKillRegState(IsKill))
-        .addFrameIndex(FI)
-        .addImm(0);
-  else
-    llvm_unreachable("Can't store this register to stack slot");
-}
-
-void RISCVInstrInfo::loadRegFromStackSlot(MachineBasicBlock &MBB,
-                                          MachineBasicBlock::iterator I,
-                                          unsigned DstReg, int FI,
-                                          const TargetRegisterClass *RC,
-                                          const TargetRegisterInfo *TRI) const {
-  DebugLoc DL;
-  if (I != MBB.end())
-    DL = I->getDebugLoc();
-
-  if (RISCV::GPRRegClass.hasSubClassEq(RC))
-    BuildMI(MBB, I, DL, get(RISCV::LW), DstReg).addFrameIndex(FI).addImm(0);
-  else
-    llvm_unreachable("Can't load this register from stack slot");
-}
diff --git a/lib/Target/RISCV/RISCVInstrInfo.h b/lib/Target/RISCV/RISCVInstrInfo.h
deleted file mode 100644
index 05c8378445c..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfo.h
+++ /dev/null
@@ -1,46 +0,0 @@
-//===-- RISCVInstrInfo.h - RISCV Instruction Information --------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the RISCV implementation of the TargetInstrInfo class.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_RISCVINSTRINFO_H
-#define LLVM_LIB_TARGET_RISCV_RISCVINSTRINFO_H
-
-#include "RISCVRegisterInfo.h"
-#include "llvm/CodeGen/TargetInstrInfo.h"
-
-#define GET_INSTRINFO_HEADER
-#include "RISCVGenInstrInfo.inc"
-
-namespace llvm {
-
-class RISCVInstrInfo : public RISCVGenInstrInfo {
-
-public:
-  RISCVInstrInfo();
-
-  void copyPhysReg(MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI,
-                   const DebugLoc &DL, unsigned DstReg, unsigned SrcReg,
-                   bool KillSrc) const override;
-
-  void storeRegToStackSlot(MachineBasicBlock &MBB,
-                           MachineBasicBlock::iterator MBBI, unsigned SrcReg,
-                           bool IsKill, int FrameIndex,
-                           const TargetRegisterClass *RC,
-                           const TargetRegisterInfo *TRI) const override;
-
-  void loadRegFromStackSlot(MachineBasicBlock &MBB,
-                            MachineBasicBlock::iterator MBBI, unsigned DstReg,
-                            int FrameIndex, const TargetRegisterClass *RC,
-                            const TargetRegisterInfo *TRI) const override;
-};
-}
-#endif
diff --git a/lib/Target/RISCV/RISCVInstrInfo.td b/lib/Target/RISCV/RISCVInstrInfo.td
deleted file mode 100644
index b37ab31324e..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfo.td
+++ /dev/null
@@ -1,496 +0,0 @@
-//===-- RISCVInstrInfo.td - Target Description for RISCV ---*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file describes the RISC-V instructions in TableGen format.
-//
-//===----------------------------------------------------------------------===//
-
-include "RISCVInstrFormats.td"
-
-//===----------------------------------------------------------------------===//
-// RISC-V specific DAG Nodes.
-//===----------------------------------------------------------------------===//
-
-def SDT_RISCVCall         : SDTypeProfile<0, -1, [SDTCisVT<0, XLenVT>]>;
-def SDT_RISCVCallSeqStart : SDCallSeqStart<[SDTCisVT<0, i32>,
-                                            SDTCisVT<1, i32>]>;
-def SDT_RISCVCallSeqEnd   : SDCallSeqEnd<[SDTCisVT<0, i32>,
-                                          SDTCisVT<1, i32>]>;
-def SDT_RISCVSelectCC     : SDTypeProfile<1, 5, [SDTCisSameAs<1, 2>,
-                                                 SDTCisSameAs<0, 4>,
-                                                 SDTCisSameAs<4, 5>]>;
-
-
-def Call         : SDNode<"RISCVISD::CALL", SDT_RISCVCall,
-                          [SDNPHasChain, SDNPOptInGlue, SDNPOutGlue,
-                           SDNPVariadic]>;
-def CallSeqStart : SDNode<"ISD::CALLSEQ_START", SDT_RISCVCallSeqStart,
-                          [SDNPHasChain, SDNPOutGlue]>;
-def CallSeqEnd   : SDNode<"ISD::CALLSEQ_END", SDT_RISCVCallSeqEnd,
-                          [SDNPHasChain, SDNPOptInGlue, SDNPOutGlue]>;
-def RetFlag      : SDNode<"RISCVISD::RET_FLAG", SDTNone,
-                          [SDNPHasChain, SDNPOptInGlue, SDNPVariadic]>;
-def SelectCC     : SDNode<"RISCVISD::SELECT_CC", SDT_RISCVSelectCC,
-                          [SDNPInGlue]>;
-
-//===----------------------------------------------------------------------===//
-// Operand and SDNode transformation definitions.
-//===----------------------------------------------------------------------===//
-
-class ImmAsmOperand<string prefix, int width, string suffix> : AsmOperandClass {
-  let Name = prefix # "Imm" # width # suffix;
-  let RenderMethod = "addImmOperands";
-  let DiagnosticType = !strconcat("Invalid", Name);
-}
-
-class SImmAsmOperand<int width, string suffix = "">
-    : ImmAsmOperand<"S", width, suffix> {
-}
-
-class UImmAsmOperand<int width, string suffix = "">
-    : ImmAsmOperand<"U", width, suffix> {
-}
-
-def FenceArg : AsmOperandClass {
-  let Name = "FenceArg";
-  let RenderMethod = "addFenceArgOperands";
-  let DiagnosticType = "InvalidFenceArg";
-}
-
-def fencearg : Operand<XLenVT> {
-  let ParserMatchClass = FenceArg;
-  let PrintMethod = "printFenceArg";
-  let DecoderMethod = "decodeUImmOperand<4>";
-}
-
-def UImmLog2XLenAsmOperand : AsmOperandClass {
-  let Name = "UImmLog2XLen";
-  let RenderMethod = "addImmOperands";
-  let DiagnosticType = "InvalidUImmLog2XLen";
-}
-
-def uimmlog2xlen : Operand<XLenVT>, ImmLeaf<XLenVT, [{
-  if (Subtarget->is64Bit())
-    return isUInt<6>(Imm);
-  return isUInt<5>(Imm);
-}]> {
-  let ParserMatchClass = UImmLog2XLenAsmOperand;
-  // TODO: should ensure invalid shamt is rejected when decoding.
-  let DecoderMethod = "decodeUImmOperand<6>";
-}
-
-def uimm5 : Operand<XLenVT>, ImmLeaf<XLenVT, [{return isUInt<5>(Imm);}]> {
-  let ParserMatchClass = UImmAsmOperand<5>;
-  let DecoderMethod = "decodeUImmOperand<5>";
-}
-
-def simm12 : Operand<XLenVT>, ImmLeaf<XLenVT, [{return isInt<12>(Imm);}]> {
-  let ParserMatchClass = SImmAsmOperand<12>;
-  let EncoderMethod = "getImmOpValue";
-  let DecoderMethod = "decodeSImmOperand<12>";
-}
-
-def uimm12 : Operand<XLenVT> {
-  let ParserMatchClass = UImmAsmOperand<12>;
-  let DecoderMethod = "decodeUImmOperand<12>";
-}
-
-// A 13-bit signed immediate where the least significant bit is zero.
-def simm13_lsb0 : Operand<OtherVT> {
-  let ParserMatchClass = SImmAsmOperand<13, "Lsb0">;
-  let EncoderMethod = "getImmOpValueAsr1";
-  let DecoderMethod = "decodeSImmOperandAndLsl1<13>";
-}
-
-def uimm20 : Operand<XLenVT> {
-  let ParserMatchClass = UImmAsmOperand<20>;
-  let EncoderMethod = "getImmOpValue";
-  let DecoderMethod = "decodeUImmOperand<20>";
-}
-
-// A 21-bit signed immediate where the least significant bit is zero.
-def simm21_lsb0 : Operand<OtherVT> {
-  let ParserMatchClass = SImmAsmOperand<21, "Lsb0">;
-  let EncoderMethod = "getImmOpValueAsr1";
-  let DecoderMethod = "decodeSImmOperandAndLsl1<21>";
-}
-
-// A parameterized register class alternative to i32imm/i64imm from Target.td.
-def ixlenimm : Operand<XLenVT>;
-
-// Standalone (codegen-only) immleaf patterns.
-def simm32 : ImmLeaf<XLenVT, [{return isInt<32>(Imm);}]>;
-
-// Extract least significant 12 bits from an immediate value and sign extend
-// them.
-def LO12Sext : SDNodeXForm<imm, [{
-  return CurDAG->getTargetConstant(SignExtend64<12>(N->getZExtValue()),
-                                   SDLoc(N), N->getValueType(0));
-}]>;
-
-// Extract the most significant 20 bits from an immediate value. Add 1 if bit
-// 11 is 1, to compensate for the low 12 bits in the matching immediate addi
-// or ld/st being negative.
-def HI20 : SDNodeXForm<imm, [{
-  return CurDAG->getTargetConstant(((N->getZExtValue()+0x800) >> 12) & 0xfffff,
-                                   SDLoc(N), N->getValueType(0));
-}]>;
-
-//===----------------------------------------------------------------------===//
-// Instruction Class Templates
-//===----------------------------------------------------------------------===//
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class BranchCC_rri<bits<3> funct3, string opcodestr>
-    : RVInstB<funct3, OPC_BRANCH, (outs),
-              (ins GPR:$rs1, GPR:$rs2, simm13_lsb0:$imm12),
-              opcodestr, "$rs1, $rs2, $imm12"> {
-  let isBranch = 1;
-  let isTerminator = 1;
-}
-
-let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
-class Load_ri<bits<3> funct3, string opcodestr>
-    : RVInstI<funct3, OPC_LOAD, (outs GPR:$rd), (ins GPR:$rs1, simm12:$imm12),
-              opcodestr, "$rd, ${imm12}(${rs1})">;
-
-// Operands for stores are in the order srcreg, base, offset rather than
-// reflecting the order these fields are specified in the instruction
-// encoding.
-let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
-class Store_rri<bits<3> funct3, string opcodestr>
-    : RVInstS<funct3, OPC_STORE, (outs),
-              (ins GPR:$rs2, GPR:$rs1, simm12:$imm12),
-              opcodestr, "$rs2, ${imm12}(${rs1})">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class ALU_ri<bits<3> funct3, string opcodestr>
-    : RVInstI<funct3, OPC_OP_IMM, (outs GPR:$rd), (ins GPR:$rs1, simm12:$imm12),
-              opcodestr, "$rd, $rs1, $imm12">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class Shift_ri<bit arithshift, bits<3> funct3, string opcodestr>
-    : RVInstIShift<arithshift, funct3, OPC_OP_IMM, (outs GPR:$rd),
-                   (ins GPR:$rs1, uimmlog2xlen:$shamt), opcodestr,
-                   "$rd, $rs1, $shamt">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class ALU_rr<bits<7> funct7, bits<3> funct3, string opcodestr>
-    : RVInstR<funct7, funct3, OPC_OP, (outs GPR:$rd), (ins GPR:$rs1, GPR:$rs2),
-              opcodestr, "$rd, $rs1, $rs2">;
-
-let hasSideEffects = 1, mayLoad = 0, mayStore = 0 in
-class CSR_ir<bits<3> funct3, string opcodestr> :
-      RVInstI<funct3, OPC_SYSTEM, (outs GPR:$rd), (ins uimm12:$imm12, GPR:$rs1),
-              opcodestr, "$rd, $imm12, $rs1">;
-
-let hasSideEffects = 1, mayLoad = 0, mayStore = 0 in
-class CSR_ii<bits<3> funct3, string opcodestr> :
-      RVInstI<funct3, OPC_SYSTEM, (outs GPR:$rd),
-              (ins uimm12:$imm12, uimm5:$rs1),
-              opcodestr, "$rd, $imm12, $rs1">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class ShiftW_ri<bit arithshift, bits<3> funct3, string opcodestr>
-    : RVInstIShiftW<arithshift, funct3, OPC_OP_IMM_32, (outs GPR:$rd),
-                    (ins GPR:$rs1, uimm5:$shamt), opcodestr,
-                    "$rd, $rs1, $shamt">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class ALUW_rr<bits<7> funct7, bits<3> funct3, string opcodestr>
-    : RVInstR<funct7, funct3, OPC_OP_32, (outs GPR:$rd),
-              (ins GPR:$rs1, GPR:$rs2), opcodestr, "$rd, $rs1, $rs2">;
-
-//===----------------------------------------------------------------------===//
-// Instructions
-//===----------------------------------------------------------------------===//
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in {
-def LUI : RVInstU<OPC_LUI, (outs GPR:$rd), (ins uimm20:$imm20),
-                  "lui", "$rd, $imm20">;
-
-def AUIPC : RVInstU<OPC_AUIPC, (outs GPR:$rd), (ins uimm20:$imm20),
-                    "auipc", "$rd, $imm20">;
-
-let isCall = 1 in
-def JAL : RVInstJ<OPC_JAL, (outs GPR:$rd), (ins simm21_lsb0:$imm20),
-                  "jal", "$rd, $imm20">;
-
-let isCall = 1 in
-def JALR : RVInstI<0b000, OPC_JALR, (outs GPR:$rd),
-                   (ins GPR:$rs1, simm12:$imm12),
-                   "jalr", "$rd, $rs1, $imm12">;
-} // hasSideEffects = 0, mayLoad = 0, mayStore = 0
-
-def BEQ  : BranchCC_rri<0b000, "beq">;
-def BNE  : BranchCC_rri<0b001, "bne">;
-def BLT  : BranchCC_rri<0b100, "blt">;
-def BGE  : BranchCC_rri<0b101, "bge">;
-def BLTU : BranchCC_rri<0b110, "bltu">;
-def BGEU : BranchCC_rri<0b111, "bgeu">;
-
-def LB  : Load_ri<0b000, "lb">;
-def LH  : Load_ri<0b001, "lh">;
-def LW  : Load_ri<0b010, "lw">;
-def LBU : Load_ri<0b100, "lbu">;
-def LHU : Load_ri<0b101, "lhu">;
-
-def SB : Store_rri<0b000, "sb">;
-def SH : Store_rri<0b001, "sh">;
-def SW : Store_rri<0b010, "sw">;
-
-def ADDI  : ALU_ri<0b000, "addi">;
-def SLTI  : ALU_ri<0b010, "slti">;
-def SLTIU : ALU_ri<0b011, "sltiu">;
-def XORI  : ALU_ri<0b100, "xori">;
-def ORI   : ALU_ri<0b110, "ori">;
-def ANDI  : ALU_ri<0b111, "andi">;
-
-def SLLI : Shift_ri<0, 0b001, "slli">;
-def SRLI : Shift_ri<0, 0b101, "srli">;
-def SRAI : Shift_ri<1, 0b101, "srai">;
-
-def ADD  : ALU_rr<0b0000000, 0b000, "add">;
-def SUB  : ALU_rr<0b0100000, 0b000, "sub">;
-def SLL  : ALU_rr<0b0000000, 0b001, "sll">;
-def SLT  : ALU_rr<0b0000000, 0b010, "slt">;
-def SLTU : ALU_rr<0b0000000, 0b011, "sltu">;
-def XOR  : ALU_rr<0b0000000, 0b100, "xor">;
-def SRL  : ALU_rr<0b0000000, 0b101, "srl">;
-def SRA  : ALU_rr<0b0100000, 0b101, "sra">;
-def OR   : ALU_rr<0b0000000, 0b110, "or">;
-def AND  : ALU_rr<0b0000000, 0b111, "and">;
-
-let hasSideEffects = 1, mayLoad = 0, mayStore = 0 in {
-def FENCE : RVInstI<0b000, OPC_MISC_MEM, (outs),
-                    (ins fencearg:$pred, fencearg:$succ),
-                    "fence", "$pred, $succ"> {
-  bits<4> pred;
-  bits<4> succ;
-
-  let rs1 = 0;
-  let rd = 0;
-  let imm12 = {0b0000,pred,succ};
-}
-
-def FENCE_I : RVInstI<0b001, OPC_MISC_MEM, (outs), (ins), "fence.i", ""> {
-  let rs1 = 0;
-  let rd = 0;
-  let imm12 = 0;
-}
-
-def ECALL : RVInstI<0b000, OPC_SYSTEM, (outs), (ins), "ecall", ""> {
-  let rs1 = 0;
-  let rd = 0;
-  let imm12 = 0;
-}
-
-def EBREAK : RVInstI<0b000, OPC_SYSTEM, (outs), (ins), "ebreak", ""> {
-  let rs1 = 0;
-  let rd = 0;
-  let imm12 = 1;
-}
-} // hasSideEffects = 1, mayLoad = 0, mayStore = 0
-
-def CSRRW : CSR_ir<0b001, "csrrw">;
-def CSRRS : CSR_ir<0b010, "csrrs">;
-def CSRRC : CSR_ir<0b011, "csrrc">;
-
-def CSRRWI : CSR_ii<0b101, "csrrwi">;
-def CSRRSI : CSR_ii<0b110, "csrrsi">;
-def CSRRCI : CSR_ii<0b111, "csrrci">;
-
-/// RV64I instructions
-
-let Predicates = [IsRV64] in {
-def LWU   : Load_ri<0b110, "lwu">;
-def LD    : Load_ri<0b011, "ld">;
-def SD    : Store_rri<0b011, "sd">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-def ADDIW : RVInstI<0b000, OPC_OP_IMM_32, (outs GPR:$rd),
-                    (ins GPR:$rs1, simm12:$imm12),
-                    "addiw", "$rd, $rs1, $imm12">;
-
-def SLLIW : ShiftW_ri<0, 0b001, "slliw">;
-def SRLIW : ShiftW_ri<0, 0b101, "srliw">;
-def SRAIW : ShiftW_ri<1, 0b101, "sraiw">;
-
-def ADDW  : ALUW_rr<0b0000000, 0b000, "addw">;
-def SUBW  : ALUW_rr<0b0100000, 0b000, "subw">;
-def SLLW  : ALUW_rr<0b0000000, 0b001, "sllw">;
-def SRLW  : ALUW_rr<0b0000000, 0b101, "srlw">;
-def SRAW  : ALUW_rr<0b0100000, 0b101, "sraw">;
-} // Predicates = [IsRV64]
-
-//===----------------------------------------------------------------------===//
-// Pseudo-instructions and codegen patterns
-//
-// Naming convention: For 'generic' pattern classes, we use the naming
-// convention PatTy1Ty2. For pattern classes which offer a more complex
-// expension, prefix the class name, e.g. BccPat.
-//===----------------------------------------------------------------------===//
-
-/// Generic pattern classes
-
-class PatGprGpr<SDPatternOperator OpNode, RVInstR Inst>
-    : Pat<(OpNode GPR:$rs1, GPR:$rs2), (Inst GPR:$rs1, GPR:$rs2)>;
-class PatGprSimm12<SDPatternOperator OpNode, RVInstI Inst>
-    : Pat<(OpNode GPR:$rs1, simm12:$imm12), (Inst GPR:$rs1, simm12:$imm12)>;
-class PatGprUimmLog2XLen<SDPatternOperator OpNode, RVInstIShift Inst>
-    : Pat<(OpNode GPR:$rs1, uimmlog2xlen:$shamt),
-          (Inst GPR:$rs1, uimmlog2xlen:$shamt)>;
-
-/// Immediates
-
-def : Pat<(simm12:$imm), (ADDI X0, simm12:$imm)>;
-// TODO: Add a pattern for immediates with all zeroes in the lower 12 bits.
-def : Pat<(simm32:$imm), (ADDI (LUI (HI20 imm:$imm)), (LO12Sext imm:$imm))>;
-
-/// Simple arithmetic operations
-
-def : PatGprGpr<add, ADD>;
-def : PatGprSimm12<add, ADDI>;
-def : PatGprGpr<sub, SUB>;
-def : PatGprGpr<or, OR>;
-def : PatGprSimm12<or, ORI>;
-def : PatGprGpr<and, AND>;
-def : PatGprSimm12<and, ANDI>;
-def : PatGprGpr<xor, XOR>;
-def : PatGprSimm12<xor, XORI>;
-def : PatGprGpr<shl, SLL>;
-def : PatGprUimmLog2XLen<shl, SLLI>;
-def : PatGprGpr<srl, SRL>;
-def : PatGprUimmLog2XLen<srl, SRLI>;
-def : PatGprGpr<sra, SRA>;
-def : PatGprUimmLog2XLen<sra, SRAI>;
-
-/// Setcc
-
-def : PatGprGpr<setlt, SLT>;
-def : PatGprSimm12<setlt, SLTI>;
-def : PatGprGpr<setult, SLTU>;
-def : PatGprSimm12<setult, SLTIU>;
-
-// Define pattern expansions for setcc operations that aren't directly
-// handled by a RISC-V instruction.
-def : Pat<(seteq GPR:$rs1, GPR:$rs2), (SLTIU (XOR GPR:$rs1, GPR:$rs2), 1)>;
-def : Pat<(setne GPR:$rs1, GPR:$rs2), (SLTU X0, (XOR GPR:$rs1, GPR:$rs2))>;
-def : Pat<(setugt GPR:$rs1, GPR:$rs2), (SLTU GPR:$rs2, GPR:$rs1)>;
-def : Pat<(setuge GPR:$rs1, GPR:$rs2), (XORI (SLTU GPR:$rs1, GPR:$rs2), 1)>;
-def : Pat<(setule GPR:$rs1, GPR:$rs2), (XORI (SLTU GPR:$rs2, GPR:$rs1), 1)>;
-def : Pat<(setgt GPR:$rs1, GPR:$rs2), (SLT GPR:$rs2, GPR:$rs1)>;
-def : Pat<(setge GPR:$rs1, GPR:$rs2), (XORI (SLT GPR:$rs1, GPR:$rs2), 1)>;
-def : Pat<(setle GPR:$rs1, GPR:$rs2), (XORI (SLT GPR:$rs2, GPR:$rs1), 1)>;
-
-let usesCustomInserter = 1 in
-def Select_GPR_Using_CC_GPR
-    : Pseudo<(outs GPR:$dst),
-             (ins GPR:$lhs, GPR:$rhs, ixlenimm:$imm, GPR:$src, GPR:$src2),
-             [(set XLenVT:$dst, (SelectCC GPR:$lhs, GPR:$rhs,
-              (XLenVT imm:$imm), GPR:$src, GPR:$src2))]>;
-
-/// Branches and jumps
-
-// Match `(brcond (CondOp ..), ..)` and lower to the appropriate RISC-V branch
-// instruction.
-class BccPat<PatFrag CondOp, RVInstB Inst>
-    : Pat<(brcond (i32 (CondOp GPR:$rs1, GPR:$rs2)), bb:$imm12),
-          (Inst GPR:$rs1, GPR:$rs2, simm13_lsb0:$imm12)>;
-
-def : BccPat<seteq, BEQ>;
-def : BccPat<setne, BNE>;
-def : BccPat<setlt, BLT>;
-def : BccPat<setge, BGE>;
-def : BccPat<setult, BLTU>;
-def : BccPat<setuge, BGEU>;
-
-class BccSwapPat<PatFrag CondOp, RVInst InstBcc>
-    : Pat<(brcond (i32 (CondOp GPR:$rs1, GPR:$rs2)), bb:$imm12),
-          (InstBcc GPR:$rs2, GPR:$rs1, bb:$imm12)>;
-
-// Condition codes that don't have matching RISC-V branch instructions, but
-// are trivially supported by swapping the two input operands
-def : BccSwapPat<setgt, BLT>;
-def : BccSwapPat<setle, BGE>;
-def : BccSwapPat<setugt, BLTU>;
-def : BccSwapPat<setule, BGEU>;
-
-// An extra pattern is needed for a brcond without a setcc (i.e. where the
-// condition was calculated elsewhere).
-def : Pat<(brcond GPR:$cond, bb:$imm12), (BNE GPR:$cond, X0, bb:$imm12)>;
-
-let isBarrier = 1, isBranch = 1, isTerminator = 1 in
-def PseudoBR : Pseudo<(outs), (ins simm21_lsb0:$imm20), [(br bb:$imm20)]>,
-               PseudoInstExpansion<(JAL X0, simm21_lsb0:$imm20)>;
-
-let isCall = 1, Defs=[X1] in
-let isBarrier = 1, isBranch = 1, isIndirectBranch = 1, isTerminator = 1 in
-def PseudoBRIND : Pseudo<(outs), (ins GPR:$rs1, simm12:$imm12), []>,
-                  PseudoInstExpansion<(JALR X0, GPR:$rs1, simm12:$imm12)>;
-
-def : Pat<(brind GPR:$rs1), (PseudoBRIND GPR:$rs1, 0)>;
-def : Pat<(brind (add GPR:$rs1, simm12:$imm12)),
-          (PseudoBRIND GPR:$rs1, simm12:$imm12)>;
-
-let isCall = 1, Defs = [X1] in
-def PseudoCALL : Pseudo<(outs), (ins GPR:$rs1), [(Call GPR:$rs1)]>,
-                 PseudoInstExpansion<(JALR X1, GPR:$rs1, 0)>;
-
-let isBarrier = 1, isReturn = 1, isTerminator = 1 in
-def PseudoRET : Pseudo<(outs), (ins), [(RetFlag)]>,
-                PseudoInstExpansion<(JALR X0, X1, 0)>;
-
-/// Loads
-
-multiclass LdPat<PatFrag LoadOp, RVInst Inst> {
-  def : Pat<(LoadOp GPR:$rs1), (Inst GPR:$rs1, 0)>;
-  def : Pat<(LoadOp (add GPR:$rs1, simm12:$imm12)),
-            (Inst GPR:$rs1, simm12:$imm12)>;
-}
-
-defm : LdPat<sextloadi8, LB>;
-defm : LdPat<extloadi8, LB>;
-defm : LdPat<sextloadi16, LH>;
-defm : LdPat<extloadi16, LH>;
-defm : LdPat<load, LW>;
-defm : LdPat<zextloadi8, LBU>;
-defm : LdPat<zextloadi16, LHU>;
-
-/// Stores
-
-multiclass StPat<PatFrag StoreOp, RVInst Inst> {
-  def : Pat<(StoreOp GPR:$rs2, GPR:$rs1), (Inst GPR:$rs2, GPR:$rs1, 0)>;
-  def : Pat<(StoreOp GPR:$rs2, (add GPR:$rs1, simm12:$imm12)),
-            (Inst GPR:$rs2, GPR:$rs1, simm12:$imm12)>;
-}
-
-defm : StPat<truncstorei8, SB>;
-defm : StPat<truncstorei16, SH>;
-defm : StPat<store, SW>;
-
-/// Other pseudo-instructions
-
-// Pessimistically assume the stack pointer will be clobbered
-let Defs = [X2], Uses = [X2] in {
-def ADJCALLSTACKDOWN : Pseudo<(outs), (ins i32imm:$amt1, i32imm:$amt2),
-                              [(CallSeqStart timm:$amt1, timm:$amt2)]>;
-def ADJCALLSTACKUP   : Pseudo<(outs), (ins i32imm:$amt1, i32imm:$amt2),
-                              [(CallSeqEnd timm:$amt1, timm:$amt2)]>;
-} // Defs = [X2], Uses = [X2]
-
-//===----------------------------------------------------------------------===//
-// Standard extensions
-//===----------------------------------------------------------------------===//
-
-include "RISCVInstrInfoM.td"
-include "RISCVInstrInfoA.td"
-include "RISCVInstrInfoF.td"
-include "RISCVInstrInfoD.td"
-include "RISCVInstrInfoC.td"
diff --git a/lib/Target/RISCV/RISCVInstrInfoA.td b/lib/Target/RISCV/RISCVInstrInfoA.td
deleted file mode 100644
index 33e863ba6a1..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfoA.td
+++ /dev/null
@@ -1,77 +0,0 @@
-//===-- RISCVInstrInfoA.td - RISC-V 'A' instructions -------*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file describes the RISC-V instructions from the standard 'A', Atomic
-// Instructions extension.
-//
-//===----------------------------------------------------------------------===//
-
-//===----------------------------------------------------------------------===//
-// Instruction class templates
-//===----------------------------------------------------------------------===//
-
-let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
-class LR_r<bit aq, bit rl, bits<3> funct3, string opcodestr>
-    : RVInstRAtomic<0b00010, aq, rl, funct3, OPC_AMO,
-                    (outs GPR:$rd), (ins GPR:$rs1),
-                    opcodestr, "$rd, (${rs1})"> {
-  let rs2 = 0;
-}
-
-multiclass LR_r_aq_rl<bits<3> funct3, string opcodestr> {
-  def ""     : LR_r<0, 0, funct3, opcodestr>;
-  def _AQ    : LR_r<1, 0, funct3, opcodestr # ".aq">;
-  def _RL    : LR_r<0, 1, funct3, opcodestr # ".rl">;
-  def _AQ_RL : LR_r<1, 1, funct3, opcodestr # ".aqrl">;
-}
-
-let hasSideEffects = 0, mayLoad = 1, mayStore = 1 in
-class AMO_rr<bits<5> funct5, bit aq, bit rl, bits<3> funct3, string opcodestr>
-    : RVInstRAtomic<funct5, aq, rl, funct3, OPC_AMO,
-                    (outs GPR:$rd), (ins GPR:$rs1, GPR:$rs2),
-                    opcodestr, "$rd, $rs2, (${rs1})">;
-
-multiclass AMO_rr_aq_rl<bits<5> funct5, bits<3> funct3, string opcodestr> {
-  def ""     : AMO_rr<funct5, 0, 0, funct3, opcodestr>;
-  def _AQ    : AMO_rr<funct5, 1, 0, funct3, opcodestr # ".aq">;
-  def _RL    : AMO_rr<funct5, 0, 1, funct3, opcodestr # ".rl">;
-  def _AQ_RL : AMO_rr<funct5, 1, 1, funct3, opcodestr # ".aqrl">;
-}
-
-//===----------------------------------------------------------------------===//
-// Instructions
-//===----------------------------------------------------------------------===//
-
-let Predicates = [HasStdExtA] in {
-defm LR_W       : LR_r_aq_rl<0b010, "lr.w">;
-defm SC_W       : AMO_rr_aq_rl<0b00011, 0b010, "sc.w">;
-defm AMOSWAP_W  : AMO_rr_aq_rl<0b00001, 0b010, "amoswap.w">;
-defm AMOADD_W   : AMO_rr_aq_rl<0b00000, 0b010, "amoadd.w">;
-defm AMOXOR_W   : AMO_rr_aq_rl<0b00100, 0b010, "amoxor.w">;
-defm AMOAND_W   : AMO_rr_aq_rl<0b01100, 0b010, "amoand.w">;
-defm AMOOR_W    : AMO_rr_aq_rl<0b01000, 0b010, "amoor.w">;
-defm AMOMIN_W   : AMO_rr_aq_rl<0b10000, 0b010, "amomin.w">;
-defm AMOMAX_W   : AMO_rr_aq_rl<0b10100, 0b010, "amomax.w">;
-defm AMOMINU_W  : AMO_rr_aq_rl<0b11000, 0b010, "amominu.w">;
-defm AMOMAXU_W  : AMO_rr_aq_rl<0b11100, 0b010, "amomaxu.w">;
-} // Predicates = [HasStdExtA]
-
-let Predicates = [HasStdExtA, IsRV64] in {
-defm LR_D       : LR_r_aq_rl<0b011, "lr.d">;
-defm SC_D       : AMO_rr_aq_rl<0b00011, 0b011, "sc.d">;
-defm AMOSWAP_D  : AMO_rr_aq_rl<0b00001, 0b011, "amoswap.d">;
-defm AMOADD_D   : AMO_rr_aq_rl<0b00000, 0b011, "amoadd.d">;
-defm AMOXOR_D   : AMO_rr_aq_rl<0b00100, 0b011, "amoxor.d">;
-defm AMOAND_D   : AMO_rr_aq_rl<0b01100, 0b011, "amoand.d">;
-defm AMOOR_D    : AMO_rr_aq_rl<0b01000, 0b011, "amoor.d">;
-defm AMOMIN_D   : AMO_rr_aq_rl<0b10000, 0b011, "amomin.d">;
-defm AMOMAX_D   : AMO_rr_aq_rl<0b10100, 0b011, "amomax.d">;
-defm AMOMINU_D  : AMO_rr_aq_rl<0b11000, 0b011, "amominu.d">;
-defm AMOMAXU_D  : AMO_rr_aq_rl<0b11100, 0b011, "amomaxu.d">;
-} // Predicates = [HasStedExtA, IsRV64]
diff --git a/lib/Target/RISCV/RISCVInstrInfoC.td b/lib/Target/RISCV/RISCVInstrInfoC.td
deleted file mode 100644
index 76c3d559c70..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfoC.td
+++ /dev/null
@@ -1,190 +0,0 @@
-//===- RISCVInstrInfoC.td - Compressed RISCV instructions -*- tblgen-*-----===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-include "RISCVInstrFormatsC.td"
-
-//===----------------------------------------------------------------------===//
-// Operand definitions.
-//===----------------------------------------------------------------------===//
-
-// A 7-bit unsigned immediate where the least significant two bits are zero.
-def uimm7_lsb00 : Operand<XLenVT>,
-                  ImmLeaf<XLenVT, [{return isShiftedUInt<5, 2>(Imm);}]> {
-  let ParserMatchClass = UImmAsmOperand<7, "Lsb00">;
-  let EncoderMethod = "getImmOpValue";
-  let DecoderMethod = "decodeUImmOperand<7>";
-}
-
-// A 8-bit unsigned immediate where the least significant two bits are zero.
-def uimm8_lsb00 : Operand<XLenVT>,
-                  ImmLeaf<XLenVT, [{return isShiftedUInt<6, 2>(Imm);}]> {
-  let ParserMatchClass = UImmAsmOperand<8, "Lsb00">;
-  let EncoderMethod = "getImmOpValue";
-  let DecoderMethod = "decodeUImmOperand<8>";
-}
-
-// A 8-bit unsigned immediate where the least significant three bits are zero.
-def uimm8_lsb000 : Operand<XLenVT>,
-                   ImmLeaf<XLenVT, [{return isShiftedUInt<5, 3>(Imm);}]> {
-  let ParserMatchClass = UImmAsmOperand<8, "Lsb000">;
-  let EncoderMethod = "getImmOpValue";
-  let DecoderMethod = "decodeUImmOperand<8>";
-}
-
-// A 9-bit signed immediate where the least significant bit is zero.
-def simm9_lsb0 : Operand<OtherVT> {
-  let ParserMatchClass = SImmAsmOperand<9, "Lsb0">;
-  let EncoderMethod = "getImmOpValueAsr1";
-  let DecoderMethod = "decodeSImmOperandAndLsl1<9>";
-}
-
-// A 9-bit unsigned immediate where the least significant three bits are zero.
-def uimm9_lsb000 : Operand<XLenVT>,
-                   ImmLeaf<XLenVT, [{return isShiftedUInt<6, 3>(Imm);}]> {
-  let ParserMatchClass = UImmAsmOperand<9, "Lsb000">;
-  let EncoderMethod = "getImmOpValue";
-  let DecoderMethod = "decodeUImmOperand<9>";
-}
-
-// A 12-bit signed immediate where the least significant bit is zero.
-def simm12_lsb0 : Operand<OtherVT> {
-  let ParserMatchClass = SImmAsmOperand<12, "Lsb0">;
-  let EncoderMethod = "getImmOpValueAsr1";
-  let DecoderMethod = "decodeSImmOperandAndLsl1<12>";
-}
-
-//===----------------------------------------------------------------------===//
-// Instruction Class Templates
-//===----------------------------------------------------------------------===//
-
-let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
-class CStackLoad<bits<3> funct3, string OpcodeStr,
-                 RegisterClass cls, DAGOperand opnd> :
-      RVInst16CI<funct3, 0b10, (outs cls:$rd), (ins SP:$rs1, opnd:$imm),
-                 OpcodeStr, "$rd, ${imm}(${rs1})">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
-class CStackStore<bits<3> funct3, string OpcodeStr,
-                  RegisterClass cls, DAGOperand opnd> :
-      RVInst16CSS<funct3, 0b10, (outs), (ins cls:$rs2, SP:$rs1, opnd:$imm),
-                  OpcodeStr, "$rs2, ${imm}(${rs1})">;
-
-let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
-class CLoad_ri<bits<3> funct3, string OpcodeStr,
-               RegisterClass cls, DAGOperand opnd> :
-      RVInst16CL<funct3, 0b00, (outs cls:$rd), (ins cls:$rs1, opnd:$imm),
-                 OpcodeStr, "$rd, ${imm}(${rs1})">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
-class CStore_rri<bits<3> funct3, string OpcodeStr,
-                 RegisterClass cls, DAGOperand opnd> :
-      RVInst16CS<funct3, 0b00, (outs), (ins cls:$rs2, cls:$rs1, opnd:$imm),
-                 OpcodeStr, "$rs2, ${imm}(${rs1})">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class Bcz<bits<3> funct3, string OpcodeStr, PatFrag CondOp,
-          RegisterClass cls> :
-      RVInst16CB<funct3, 0b01, (outs), (ins cls:$rs1, simm9_lsb0:$imm),
-                 OpcodeStr, "$rs1, $imm"> {
-  let isBranch = 1;
-  let isTerminator = 1;
-  let Inst{12} = imm{7};
-  let Inst{11-10} = imm{3-2};
-  let Inst{6-5} = imm{6-5};
-  let Inst{4-3} = imm{1-0};
-  let Inst{2} = imm{4};
-}
-
-//===----------------------------------------------------------------------===//
-// Instructions
-//===----------------------------------------------------------------------===//
-
-let Predicates = [HasStdExtC] in {
-
-def CLW : CLoad_ri<0b010, "c.lw", GPRC, uimm7_lsb00> {
-  bits<7> imm;
-  let Inst{12-10} = imm{5-3};
-  let Inst{6} = imm{2};
-  let Inst{5} = imm{6};
-}
-
-def CLD : CLoad_ri<0b011, "c.ld", GPRC, uimm8_lsb000>,
-          Requires<[IsRV64]> {
-  bits<8> imm;
-  let Inst{12-10} = imm{5-3};
-  let Inst{6-5} = imm{7-6};
-}
-
-def CSW : CStore_rri<0b110, "c.sw", GPRC, uimm7_lsb00> {
-  bits<7> imm;
-  let Inst{12-10} = imm{5-3};
-  let Inst{6} = imm{2};
-  let Inst{5} = imm{6};
-}
-
-def CSD : CStore_rri<0b111, "c.sd", GPRC, uimm8_lsb000>,
-          Requires<[IsRV64]> {
-  bits<8> imm;
-  let Inst{12-10} = imm{5-3};
-  let Inst{6-5} = imm{7-6};
-}
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0, isCall = 1 in
-def CJAL : RVInst16CJ<0b001, 0b01, (outs), (ins simm12_lsb0:$offset),
-                      "c.jal", "$offset">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-def CJ : RVInst16CJ<0b101, 0b01, (outs), (ins simm12_lsb0:$offset),
-                    "c.j", "$offset"> {
-  let isBranch = 1;
-  let isTerminator=1;
-  let isBarrier=1;
-}
-
-def CBEQZ : Bcz<0b110, "c.beqz",  seteq, GPRC>;
-def CBNEZ : Bcz<0b111, "c.bnez",  setne, GPRC>;
-
-def CLWSP : CStackLoad<0b010, "c.lwsp", GPRNoX0, uimm8_lsb00> {
-  let Inst{6-4} = imm{4-2};
-  let Inst{3-2} = imm{7-6};
-}
-
-def CLDSP : CStackLoad<0b011, "c.ldsp", GPRNoX0, uimm9_lsb000>,
-            Requires<[IsRV64]> {
-  let Inst{6-5} = imm{4-3};
-  let Inst{4-2} = imm{8-6};
-}
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-def CJR : RVInst16CR<0b1000, 0b10, (outs), (ins GPRNoX0:$rs1),
-                     "c.jr", "$rs1"> {
-  let isBranch = 1;
-  let isBarrier = 1;
-  let isTerminator = 1;
-  let isIndirectBranch = 1;
-  let rs2 = 0;
-}
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0,
-    isCall=1, Defs=[X1], rs2 = 0 in
-def CJALR : RVInst16CR<0b1001, 0b10, (outs), (ins GPRNoX0:$rs1),
-                       "c.jalr", "$rs1">;
-
-def CSWSP : CStackStore<0b110, "c.swsp", GPR, uimm8_lsb00> {
-  let Inst{12-9} = imm{5-2};
-  let Inst{8-7}  = imm{7-6};
-}
-
-def CSDSP : CStackStore<0b111, "c.sdsp", GPR, uimm9_lsb000>,
-            Requires<[IsRV64]> {
-  let Inst{12-10} = imm{5-3};
-  let Inst{9-7}   = imm{8-6};
-}
-
-} // Predicates = [HasStdExtC]
diff --git a/lib/Target/RISCV/RISCVInstrInfoD.td b/lib/Target/RISCV/RISCVInstrInfoD.td
deleted file mode 100644
index 8a78e372e8b..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfoD.td
+++ /dev/null
@@ -1,161 +0,0 @@
-//===-- RISCVInstrInfoD.td - RISC-V 'D' instructions -------*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file describes the RISC-V instructions from the standard 'D',
-// Double-Precision Floating-Point instruction set extension.
-//
-//===----------------------------------------------------------------------===//
-
-//===----------------------------------------------------------------------===//
-// Instruction Class Templates
-//===----------------------------------------------------------------------===//
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPFMAD_rrr_frm<RISCVOpcode opcode, string opcodestr>
-    : RVInstR4<0b01, opcode, (outs FPR64:$rd),
-               (ins FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, frmarg:$funct3),
-                opcodestr, "$rd, $rs1, $rs2, $rs3, $funct3">;
-
-class FPFMADDynFrmAlias<FPFMAD_rrr_frm Inst, string OpcodeStr>
-    : InstAlias<OpcodeStr#" $rd, $rs1, $rs2, $rs3",
-                (Inst FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, 0b111)>;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPALUD_rr<bits<7> funct7, bits<3> funct3, string opcodestr>
-    : RVInstR<funct7, funct3, OPC_OP_FP, (outs FPR64:$rd),
-              (ins FPR64:$rs1, FPR64:$rs2), opcodestr, "$rd, $rs1, $rs2">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPALUD_rr_frm<bits<7> funct7, string opcodestr>
-    : RVInstRFrm<funct7, OPC_OP_FP, (outs FPR64:$rd),
-                (ins FPR64:$rs1, FPR64:$rs2, frmarg:$funct3), opcodestr,
-                 "$rd, $rs1, $rs2, $funct3">;
-
-class FPALUDDynFrmAlias<FPALUD_rr_frm Inst, string OpcodeStr>
-    : InstAlias<OpcodeStr#" $rd, $rs1, $rs2",
-                (Inst FPR64:$rd, FPR64:$rs1, FPR64:$rs2, 0b111)>;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPCmpD_rr<bits<3> funct3, string opcodestr>
-    : RVInstR<0b1010001, funct3, OPC_OP_FP, (outs GPR:$rd),
-              (ins FPR64:$rs1, FPR64:$rs2), opcodestr, "$rd, $rs1, $rs2">;
-
-//===----------------------------------------------------------------------===//
-// Instructions
-//===----------------------------------------------------------------------===//
-
-let Predicates = [HasStdExtD] in {
-
-let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
-def FLD : RVInstI<0b011, OPC_LOAD_FP, (outs FPR64:$rd),
-                  (ins GPR:$rs1, simm12:$imm12),
-                  "fld", "$rd, ${imm12}(${rs1})">;
-
-// Operands for stores are in the order srcreg, base, offset rather than
-// reflecting the order these fields are specified in the instruction
-// encoding.
-let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
-def FSD : RVInstS<0b011, OPC_STORE_FP, (outs),
-                  (ins FPR64:$rs2, GPR:$rs1, simm12:$imm12),
-                   "fsd", "$rs2, ${imm12}(${rs1})">;
-
-def FMADD_D  : FPFMAD_rrr_frm<OPC_MADD, "fmadd.d">;
-def          : FPFMADDynFrmAlias<FMADD_D, "fmadd.d">;
-def FMSUB_D  : FPFMAD_rrr_frm<OPC_MSUB, "fmsub.d">;
-def          : FPFMADDynFrmAlias<FMSUB_D, "fmsub.d">;
-def FNMSUB_D : FPFMAD_rrr_frm<OPC_NMSUB, "fnmsub.d">;
-def          : FPFMADDynFrmAlias<FNMSUB_D, "fnmsub.d">;
-def FNMADD_D : FPFMAD_rrr_frm<OPC_NMADD, "fnmadd.d">;
-def          : FPFMADDynFrmAlias<FNMADD_D, "fnmadd.d">;
-
-def FADD_D : FPALUD_rr_frm<0b0000001, "fadd.d">;
-def        : FPALUDDynFrmAlias<FADD_D, "fadd.d">;
-def FSUB_D : FPALUD_rr_frm<0b0000101, "fsub.d">;
-def        : FPALUDDynFrmAlias<FSUB_D, "fsub.d">;
-def FMUL_D : FPALUD_rr_frm<0b0001001, "fmul.d">;
-def        : FPALUDDynFrmAlias<FMUL_D, "fmul.d">;
-def FDIV_D : FPALUD_rr_frm<0b0001101, "fdiv.d">;
-def        : FPALUDDynFrmAlias<FDIV_D, "fdiv.d">;
-
-def FSQRT_D : FPUnaryOp_r_frm<0b0101101, FPR64, FPR64, "fsqrt.d"> {
-  let rs2 = 0b00000;
-}
-def         : FPUnaryOpDynFrmAlias<FSQRT_D, "fsqrt.d", FPR64, FPR64>;
-
-def FSGNJ_D  : FPALUD_rr<0b0010001, 0b000, "fsgnj.d">;
-def FSGNJN_D : FPALUD_rr<0b0010001, 0b001, "fsgnjn.d">;
-def FSGNJX_D : FPALUD_rr<0b0010001, 0b010, "fsgnjx.d">;
-def FMIN_D   : FPALUD_rr<0b0010101, 0b000, "fmin.d">;
-def FMAX_D   : FPALUD_rr<0b0010101, 0b001, "fmax.d">;
-
-def FCVT_S_D : FPUnaryOp_r_frm<0b0100000, FPR32, FPR64, "fcvt.s.d"> {
-  let rs2 = 0b00001;
-}
-def          : FPUnaryOpDynFrmAlias<FCVT_S_D, "fcvt.s.d", FPR32, FPR64>;
-
-def FCVT_D_S : FPUnaryOp_r<0b0100001, 0b000, FPR64, FPR32, "fcvt.d.s"> {
-  let rs2 = 0b00000;
-}
-
-def FEQ_D : FPCmpD_rr<0b010, "feq.d">;
-def FLT_D : FPCmpD_rr<0b001, "flt.d">;
-def FLE_D : FPCmpD_rr<0b000, "fle.d">;
-
-def FCLASS_D : FPUnaryOp_r<0b1110001, 0b001, GPR, FPR64, "fclass.d"> {
-  let rs2 = 0b00000;
-}
-
-def FCVT_W_D : FPUnaryOp_r_frm<0b1100001, GPR, FPR64, "fcvt.w.d"> {
-  let rs2 = 0b00000;
-}
-def          : FPUnaryOpDynFrmAlias<FCVT_W_D, "fcvt.w.d", GPR, FPR64>;
-
-def FCVT_WU_D : FPUnaryOp_r_frm<0b1100001, GPR, FPR64, "fcvt.wu.d"> {
-  let rs2 = 0b00001;
-}
-def           : FPUnaryOpDynFrmAlias<FCVT_WU_D, "fcvt.wu.d", GPR, FPR64>;
-
-def FCVT_D_W : FPUnaryOp_r<0b1101001, 0b000, FPR64, GPR, "fcvt.d.w"> {
-  let rs2 = 0b00000;
-}
-
-def FCVT_D_WU : FPUnaryOp_r<0b1101001, 0b000, FPR64, GPR, "fcvt.d.wu"> {
-  let rs2 = 0b00001;
-}
-} // Predicates = [HasStdExtD]
-
-let Predicates = [HasStdExtD, IsRV64] in {
-def FCVT_L_D : FPUnaryOp_r_frm<0b1100001, GPR, FPR64, "fcvt.l.d"> {
-  let rs2 = 0b00010;
-}
-def          : FPUnaryOpDynFrmAlias<FCVT_L_D, "fcvt.l.d", GPR, FPR64>;
-
-def FCVT_LU_D : FPUnaryOp_r_frm<0b1100001, GPR, FPR64, "fcvt.lu.d"> {
-  let rs2 = 0b00011;
-}
-def           : FPUnaryOpDynFrmAlias<FCVT_LU_D, "fcvt.lu.d", GPR, FPR64>;
-
-def FMV_X_D : FPUnaryOp_r<0b1110001, 0b000, GPR, FPR64, "fmv.x.d"> {
-  let rs2 = 0b00000;
-}
-
-def FCVT_D_L : FPUnaryOp_r_frm<0b1101001, FPR64, GPR, "fcvt.d.l"> {
-  let rs2 = 0b00010;
-}
-def          : FPUnaryOpDynFrmAlias<FCVT_D_L, "fcvt.d.l", FPR64, GPR>;
-
-def FCVT_D_LU : FPUnaryOp_r_frm<0b1101001, FPR64, GPR, "fcvt.d.lu"> {
-  let rs2 = 0b00011;
-}
-def           : FPUnaryOpDynFrmAlias<FCVT_D_LU, "fcvt.d.lu", FPR64, GPR>;
-
-def FMV_D_X : FPUnaryOp_r<0b1111001, 0b000, FPR64, GPR, "fmv.d.x"> {
-  let rs2 = 0b00000;
-}
-} // Predicates = [HasStdExtD, IsRV64]
diff --git a/lib/Target/RISCV/RISCVInstrInfoF.td b/lib/Target/RISCV/RISCVInstrInfoF.td
deleted file mode 100644
index a95d093e7c7..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfoF.td
+++ /dev/null
@@ -1,189 +0,0 @@
-//===-- RISCVInstrInfoF.td - RISC-V 'F' instructions -------*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file describes the RISC-V instructions from the standard 'F',
-// Single-Precision Floating-Point instruction set extension.
-//
-//===----------------------------------------------------------------------===//
-
-//===----------------------------------------------------------------------===//
-// Operand and SDNode transformation definitions.
-//===----------------------------------------------------------------------===//
-
-// Floating-point rounding mode
-
-def FRMArg : AsmOperandClass {
-  let Name = "FRMArg";
-  let RenderMethod = "addFRMArgOperands";
-  let DiagnosticType = "InvalidFRMArg";
-}
-
-def frmarg : Operand<XLenVT> {
-  let ParserMatchClass = FRMArg;
-  let PrintMethod = "printFRMArg";
-  let DecoderMethod = "decodeUImmOperand<3>";
-}
-
-//===----------------------------------------------------------------------===//
-// Instruction class templates
-//===----------------------------------------------------------------------===//
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPFMAS_rrr_frm<RISCVOpcode opcode, string opcodestr>
-    : RVInstR4<0b00, opcode, (outs FPR32:$rd),
-               (ins FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, frmarg:$funct3),
-                opcodestr, "$rd, $rs1, $rs2, $rs3, $funct3">;
-
-class FPFMASDynFrmAlias<FPFMAS_rrr_frm Inst, string OpcodeStr>
-    : InstAlias<OpcodeStr#" $rd, $rs1, $rs2, $rs3",
-                (Inst FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, 0b111)>;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPALUS_rr<bits<7> funct7, bits<3> funct3, string opcodestr>
-    : RVInstR<funct7, funct3, OPC_OP_FP, (outs FPR32:$rd),
-              (ins FPR32:$rs1, FPR32:$rs2), opcodestr, "$rd, $rs1, $rs2">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPALUS_rr_frm<bits<7> funct7, string opcodestr>
-    : RVInstRFrm<funct7, OPC_OP_FP, (outs FPR32:$rd),
-                 (ins FPR32:$rs1, FPR32:$rs2, frmarg:$funct3), opcodestr,
-                  "$rd, $rs1, $rs2, $funct3">;
-
-class FPALUSDynFrmAlias<FPALUS_rr_frm Inst, string OpcodeStr>
-    : InstAlias<OpcodeStr#" $rd, $rs1, $rs2",
-                (Inst FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111)>;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPUnaryOp_r<bits<7> funct7, bits<3> funct3, RegisterClass rdty,
-                RegisterClass rs1ty, string opcodestr>
-    : RVInstR<funct7, funct3, OPC_OP_FP, (outs rdty:$rd), (ins rs1ty:$rs1),
-              opcodestr, "$rd, $rs1">;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPUnaryOp_r_frm<bits<7> funct7, RegisterClass rdty, RegisterClass rs1ty,
-                      string opcodestr>
-    : RVInstRFrm<funct7, OPC_OP_FP, (outs rdty:$rd),
-                 (ins rs1ty:$rs1, frmarg:$funct3), opcodestr,
-                  "$rd, $rs1, $funct3">;
-
-class FPUnaryOpDynFrmAlias<FPUnaryOp_r_frm Inst, string OpcodeStr,
-                           RegisterClass rdty, RegisterClass rs1ty>
-    : InstAlias<OpcodeStr#" $rd, $rs1",
-                (Inst rdty:$rd, rs1ty:$rs1, 0b111)>;
-
-let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
-class FPCmpS_rr<bits<3> funct3, string opcodestr>
-    : RVInstR<0b1010000, funct3, OPC_OP_FP, (outs GPR:$rd),
-              (ins FPR32:$rs1, FPR32:$rs2), opcodestr, "$rd, $rs1, $rs2">;
-
-//===----------------------------------------------------------------------===//
-// Instructions
-//===----------------------------------------------------------------------===//
-
-let Predicates = [HasStdExtF] in {
-let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
-def FLW : RVInstI<0b010, OPC_LOAD_FP, (outs FPR32:$rd),
-                  (ins GPR:$rs1, simm12:$imm12),
-                   "flw", "$rd, ${imm12}(${rs1})">;
-
-// Operands for stores are in the order srcreg, base, offset rather than
-// reflecting the order these fields are specified in the instruction
-// encoding.
-let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
-def FSW : RVInstS<0b010, OPC_STORE_FP, (outs),
-                  (ins FPR32:$rs2, GPR:$rs1, simm12:$imm12),
-                   "fsw", "$rs2, ${imm12}(${rs1})">;
-
-def FMADD_S  : FPFMAS_rrr_frm<OPC_MADD, "fmadd.s">;
-def          : FPFMASDynFrmAlias<FMADD_S, "fmadd.s">;
-def FMSUB_S  : FPFMAS_rrr_frm<OPC_MSUB, "fmsub.s">;
-def          : FPFMASDynFrmAlias<FMSUB_S, "fmsub.s">;
-def FNMSUB_S : FPFMAS_rrr_frm<OPC_NMSUB, "fnmsub.s">;
-def          : FPFMASDynFrmAlias<FNMSUB_S, "fnmsub.s">;
-def FNMADD_S : FPFMAS_rrr_frm<OPC_NMADD, "fnmadd.s">;
-def          : FPFMASDynFrmAlias<FNMADD_S, "fnmadd.s">;
-
-def FADD_S : FPALUS_rr_frm<0b0000000, "fadd.s">;
-def        : FPALUSDynFrmAlias<FADD_S, "fadd.s">;
-def FSUB_S : FPALUS_rr_frm<0b0000100, "fsub.s">;
-def        : FPALUSDynFrmAlias<FSUB_S, "fsub.s">;
-def FMUL_S : FPALUS_rr_frm<0b0001000, "fmul.s">;
-def        : FPALUSDynFrmAlias<FMUL_S, "fmul.s">;
-def FDIV_S : FPALUS_rr_frm<0b0001100, "fdiv.s">;
-def        : FPALUSDynFrmAlias<FDIV_S, "fdiv.s">;
-
-def FSQRT_S : FPUnaryOp_r_frm<0b0101100, FPR32, FPR32, "fsqrt.s"> {
-  let rs2 = 0b00000;
-}
-def         : FPUnaryOpDynFrmAlias<FSQRT_S, "fsqrt.s", FPR32, FPR32>;
-
-def FSGNJ_S  : FPALUS_rr<0b0010000, 0b000, "fsgnj.s">;
-def FSGNJN_S : FPALUS_rr<0b0010000, 0b001, "fsgnjn.s">;
-def FSGNJX_S : FPALUS_rr<0b0010000, 0b010, "fsgnjx.s">;
-def FMIN_S   : FPALUS_rr<0b0010100, 0b000, "fmin.s">;
-def FMAX_S   : FPALUS_rr<0b0010100, 0b001, "fmax.s">;
-
-def FCVT_W_S : FPUnaryOp_r_frm<0b1100000, GPR, FPR32, "fcvt.w.s"> {
-  let rs2 = 0b00000;
-}
-def          : FPUnaryOpDynFrmAlias<FCVT_W_S, "fcvt.w.s", GPR, FPR32>;
-
-def FCVT_WU_S : FPUnaryOp_r_frm<0b1100000, GPR, FPR32, "fcvt.wu.s"> {
-  let rs2 = 0b00001;
-}
-def           : FPUnaryOpDynFrmAlias<FCVT_WU_S, "fcvt.wu.s", GPR, FPR32>;
-
-def FMV_X_W : FPUnaryOp_r<0b1110000, 0b000, GPR, FPR32, "fmv.x.w"> {
-  let rs2 = 0b00000;
-}
-
-def FEQ_S : FPCmpS_rr<0b010, "feq.s">;
-def FLT_S : FPCmpS_rr<0b001, "flt.s">;
-def FLE_S : FPCmpS_rr<0b000, "fle.s">;
-
-def FCLASS_S : FPUnaryOp_r<0b1110000, 0b001, GPR, FPR32, "fclass.s"> {
-  let rs2 = 0b00000;
-}
-
-def FCVT_S_W : FPUnaryOp_r_frm<0b1101000, FPR32, GPR, "fcvt.s.w"> {
-  let rs2 = 0b00000;
-}
-def          : FPUnaryOpDynFrmAlias<FCVT_S_W, "fcvt.s.w", FPR32, GPR>;
-
-def FCVT_S_WU : FPUnaryOp_r_frm<0b1101000, FPR32, GPR, "fcvt.s.wu"> {
-  let rs2 = 0b00001;
-}
-def           : FPUnaryOpDynFrmAlias<FCVT_S_WU, "fcvt.s.wu", FPR32, GPR>;
-
-def FMV_W_X : FPUnaryOp_r<0b1111000, 0b000, FPR32, GPR, "fmv.w.x"> {
-  let rs2 = 0b00000;
-}
-} // Predicates = [HasStdExtF]
-
-let Predicates = [HasStdExtF, IsRV64] in {
-def FCVT_L_S  : FPUnaryOp_r_frm<0b1100000, GPR, FPR32, "fcvt.l.s"> {
-  let rs2 = 0b00010;
-}
-def           : FPUnaryOpDynFrmAlias<FCVT_L_S, "fcvt.l.s", GPR, FPR32>;
-
-def FCVT_LU_S  : FPUnaryOp_r_frm<0b1100000, GPR, FPR32, "fcvt.lu.s"> {
-  let rs2 = 0b00011;
-}
-def            : FPUnaryOpDynFrmAlias<FCVT_LU_S, "fcvt.lu.s", GPR, FPR32>;
-
-def FCVT_S_L : FPUnaryOp_r_frm<0b1101000, FPR32, GPR, "fcvt.s.l"> {
-  let rs2 = 0b00010;
-}
-def          : FPUnaryOpDynFrmAlias<FCVT_S_L, "fcvt.s.l", FPR32, GPR>;
-
-def FCVT_S_LU : FPUnaryOp_r_frm<0b1101000, FPR32, GPR, "fcvt.s.lu"> {
-  let rs2 = 0b00011;
-}
-def           : FPUnaryOpDynFrmAlias<FCVT_S_LU, "fcvt.s.lu", FPR32, GPR>;
-} // Predicates = [HasStdExtF, IsRV64]
diff --git a/lib/Target/RISCV/RISCVInstrInfoM.td b/lib/Target/RISCV/RISCVInstrInfoM.td
deleted file mode 100644
index fec9c1f9399..00000000000
--- a/lib/Target/RISCV/RISCVInstrInfoM.td
+++ /dev/null
@@ -1,36 +0,0 @@
-//===-- RISCVInstrInfoM.td - RISC-V 'M' instructions -------*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file describes the RISC-V instructions from the standard 'M', Integer
-// Multiplication and Division instruction set extension.
-//
-//===----------------------------------------------------------------------===//
-
-//===----------------------------------------------------------------------===//
-// Instructions
-//===----------------------------------------------------------------------===//
-
-let Predicates = [HasStdExtM] in {
-def MUL     : ALU_rr<0b0000001, 0b000, "mul">;
-def MULH    : ALU_rr<0b0000001, 0b001, "mulh">;
-def MULHSU  : ALU_rr<0b0000001, 0b010, "mulhsu">;
-def MULHU   : ALU_rr<0b0000001, 0b011, "mulhu">;
-def DIV     : ALU_rr<0b0000001, 0b100, "div">;
-def DIVU    : ALU_rr<0b0000001, 0b101, "divu">;
-def REM     : ALU_rr<0b0000001, 0b110, "rem">;
-def REMU    : ALU_rr<0b0000001, 0b111, "remu">;
-} // Predicates = [HasStdExtM]
-
-let Predicates = [HasStdExtM, IsRV64] in {
-def MULW    : ALUW_rr<0b0000001, 0b000, "mulw">;
-def DIVW    : ALUW_rr<0b0000001, 0b100, "divw">;
-def DIVUW   : ALUW_rr<0b0000001, 0b101, "divuw">;
-def REMW    : ALUW_rr<0b0000001, 0b110, "remw">;
-def REMUW   : ALUW_rr<0b0000001, 0b111, "remuw">;
-} // Predicates = [HasStdExtM, IsRV64]
diff --git a/lib/Target/RISCV/RISCVMCInstLower.cpp b/lib/Target/RISCV/RISCVMCInstLower.cpp
deleted file mode 100644
index d8ae11f2bd9..00000000000
--- a/lib/Target/RISCV/RISCVMCInstLower.cpp
+++ /dev/null
@@ -1,105 +0,0 @@
-//===-- RISCVMCInstLower.cpp - Convert RISCV MachineInstr to an MCInst ------=//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains code to lower RISCV MachineInstrs to their corresponding
-// MCInst records.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCV.h"
-#include "MCTargetDesc/RISCVMCExpr.h"
-#include "llvm/CodeGen/AsmPrinter.h"
-#include "llvm/CodeGen/MachineBasicBlock.h"
-#include "llvm/CodeGen/MachineInstr.h"
-#include "llvm/MC/MCAsmInfo.h"
-#include "llvm/MC/MCContext.h"
-#include "llvm/MC/MCExpr.h"
-#include "llvm/MC/MCInst.h"
-#include "llvm/Support/ErrorHandling.h"
-#include "llvm/Support/raw_ostream.h"
-
-using namespace llvm;
-
-static MCOperand lowerSymbolOperand(const MachineOperand &MO, MCSymbol *Sym,
-                                    const AsmPrinter &AP) {
-  MCContext &Ctx = AP.OutContext;
-  RISCVMCExpr::VariantKind Kind;
-
-  switch (MO.getTargetFlags()) {
-  default:
-    llvm_unreachable("Unknown target flag on GV operand");
-  case RISCVII::MO_None:
-    Kind = RISCVMCExpr::VK_RISCV_None;
-    break;
-  case RISCVII::MO_LO:
-    Kind = RISCVMCExpr::VK_RISCV_LO;
-    break;
-  case RISCVII::MO_HI:
-    Kind = RISCVMCExpr::VK_RISCV_HI;
-    break;
-  }
-
-  const MCExpr *ME =
-      MCSymbolRefExpr::create(Sym, MCSymbolRefExpr::VK_None, Ctx);
-
-  if (!MO.isJTI() && MO.getOffset())
-    ME = MCBinaryExpr::createAdd(
-        ME, MCConstantExpr::create(MO.getOffset(), Ctx), Ctx);
-
-  ME = RISCVMCExpr::create(ME, Kind, Ctx);
-  return MCOperand::createExpr(ME);
-}
-
-bool llvm::LowerRISCVMachineOperandToMCOperand(const MachineOperand &MO,
-                                               MCOperand &MCOp,
-                                               const AsmPrinter &AP) {
-  switch (MO.getType()) {
-  default:
-    report_fatal_error("LowerRISCVMachineInstrToMCInst: unknown operand type");
-  case MachineOperand::MO_Register:
-    // Ignore all implicit register operands.
-    if (MO.isImplicit())
-      return false;
-    MCOp = MCOperand::createReg(MO.getReg());
-    break;
-  case MachineOperand::MO_RegisterMask:
-    // Regmasks are like implicit defs.
-    return false;
-  case MachineOperand::MO_Immediate:
-    MCOp = MCOperand::createImm(MO.getImm());
-    break;
-  case MachineOperand::MO_MachineBasicBlock:
-    MCOp = MCOperand::createExpr(
-        MCSymbolRefExpr::create(MO.getMBB()->getSymbol(), AP.OutContext));
-    break;
-  case MachineOperand::MO_GlobalAddress:
-    MCOp = lowerSymbolOperand(MO, AP.getSymbol(MO.getGlobal()), AP);
-    break;
-  case MachineOperand::MO_BlockAddress:
-    MCOp = lowerSymbolOperand(
-        MO, AP.GetBlockAddressSymbol(MO.getBlockAddress()), AP);
-    break;
-  case MachineOperand::MO_ExternalSymbol:
-    MCOp = lowerSymbolOperand(
-        MO, AP.GetExternalSymbolSymbol(MO.getSymbolName()), AP);
-    break;
-  }
-  return true;
-}
-
-void llvm::LowerRISCVMachineInstrToMCInst(const MachineInstr *MI, MCInst &OutMI,
-                                          const AsmPrinter &AP) {
-  OutMI.setOpcode(MI->getOpcode());
-
-  for (const MachineOperand &MO : MI->operands()) {
-    MCOperand MCOp;
-    if (LowerRISCVMachineOperandToMCOperand(MO, MCOp, AP))
-      OutMI.addOperand(MCOp);
-  }
-}
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.cpp b/lib/Target/RISCV/RISCVRegisterInfo.cpp
deleted file mode 100644
index 75b277531ce..00000000000
--- a/lib/Target/RISCV/RISCVRegisterInfo.cpp
+++ /dev/null
@@ -1,95 +0,0 @@
-//===-- RISCVRegisterInfo.cpp - RISCV Register Information ------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the RISCV implementation of the TargetRegisterInfo class.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVRegisterInfo.h"
-#include "RISCV.h"
-#include "RISCVSubtarget.h"
-#include "llvm/CodeGen/MachineFrameInfo.h"
-#include "llvm/CodeGen/MachineFunction.h"
-#include "llvm/CodeGen/MachineInstrBuilder.h"
-#include "llvm/CodeGen/RegisterScavenging.h"
-#include "llvm/CodeGen/TargetFrameLowering.h"
-#include "llvm/CodeGen/TargetInstrInfo.h"
-#include "llvm/Support/ErrorHandling.h"
-
-#define GET_REGINFO_TARGET_DESC
-#include "RISCVGenRegisterInfo.inc"
-
-using namespace llvm;
-
-RISCVRegisterInfo::RISCVRegisterInfo(unsigned HwMode)
-    : RISCVGenRegisterInfo(RISCV::X1, /*DwarfFlavour*/0, /*EHFlavor*/0,
-                           /*PC*/0, HwMode) {}
-
-const MCPhysReg *
-RISCVRegisterInfo::getCalleeSavedRegs(const MachineFunction *MF) const {
-  return CSR_SaveList;
-}
-
-BitVector RISCVRegisterInfo::getReservedRegs(const MachineFunction &MF) const {
-  BitVector Reserved(getNumRegs());
-
-  // Use markSuperRegs to ensure any register aliases are also reserved
-  markSuperRegs(Reserved, RISCV::X0); // zero
-  markSuperRegs(Reserved, RISCV::X1); // ra
-  markSuperRegs(Reserved, RISCV::X2); // sp
-  markSuperRegs(Reserved, RISCV::X3); // gp
-  markSuperRegs(Reserved, RISCV::X4); // tp
-  markSuperRegs(Reserved, RISCV::X8); // fp
-  assert(checkAllSuperRegsMarked(Reserved));
-  return Reserved;
-}
-
-const uint32_t *RISCVRegisterInfo::getNoPreservedMask() const {
-  return CSR_NoRegs_RegMask;
-}
-
-void RISCVRegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,
-                                            int SPAdj, unsigned FIOperandNum,
-                                            RegScavenger *RS) const {
-  // TODO: this implementation is a temporary placeholder which does just
-  // enough to allow other aspects of code generation to be tested
-
-  assert(SPAdj == 0 && "Unexpected non-zero SPAdj value");
-
-  MachineInstr &MI = *II;
-  MachineFunction &MF = *MI.getParent()->getParent();
-  const TargetFrameLowering *TFI = MF.getSubtarget().getFrameLowering();
-  DebugLoc DL = MI.getDebugLoc();
-
-  unsigned FrameReg = getFrameRegister(MF);
-  int FrameIndex = MI.getOperand(FIOperandNum).getIndex();
-  int Offset = TFI->getFrameIndexReference(MF, FrameIndex, FrameReg);
-  Offset += MI.getOperand(FIOperandNum + 1).getImm();
-
-  assert(TFI->hasFP(MF) && "eliminateFrameIndex currently requires hasFP");
-
-  // Offsets must be directly encoded in a 12-bit immediate field
-  if (!isInt<12>(Offset)) {
-    report_fatal_error(
-        "Frame offsets outside of the signed 12-bit range not supported");
-  }
-
-  MI.getOperand(FIOperandNum).ChangeToRegister(FrameReg, false);
-  MI.getOperand(FIOperandNum + 1).ChangeToImmediate(Offset);
-}
-
-unsigned RISCVRegisterInfo::getFrameRegister(const MachineFunction &MF) const {
-  return RISCV::X8;
-}
-
-const uint32_t *
-RISCVRegisterInfo::getCallPreservedMask(const MachineFunction & /*MF*/,
-                                        CallingConv::ID /*CC*/) const {
-  return CSR_RegMask;
-}
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.h b/lib/Target/RISCV/RISCVRegisterInfo.h
deleted file mode 100644
index 0b2bc3776fc..00000000000
--- a/lib/Target/RISCV/RISCVRegisterInfo.h
+++ /dev/null
@@ -1,45 +0,0 @@
-//===-- RISCVRegisterInfo.h - RISCV Register Information Impl ---*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file contains the RISCV implementation of the TargetRegisterInfo class.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_RISCVREGISTERINFO_H
-#define LLVM_LIB_TARGET_RISCV_RISCVREGISTERINFO_H
-
-#include "llvm/CodeGen/TargetRegisterInfo.h"
-
-#define GET_REGINFO_HEADER
-#include "RISCVGenRegisterInfo.inc"
-
-namespace llvm {
-
-struct RISCVRegisterInfo : public RISCVGenRegisterInfo {
-
-  RISCVRegisterInfo(unsigned HwMode);
-
-  const uint32_t *getCallPreservedMask(const MachineFunction &MF,
-                                       CallingConv::ID) const override;
-
-  const MCPhysReg *getCalleeSavedRegs(const MachineFunction *MF) const override;
-
-  BitVector getReservedRegs(const MachineFunction &MF) const override;
-
-  const uint32_t *getNoPreservedMask() const override;
-
-  void eliminateFrameIndex(MachineBasicBlock::iterator MI, int SPAdj,
-                           unsigned FIOperandNum,
-                           RegScavenger *RS = nullptr) const override;
-
-  unsigned getFrameRegister(const MachineFunction &MF) const override;
-};
-}
-
-#endif
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.td b/lib/Target/RISCV/RISCVRegisterInfo.td
deleted file mode 100644
index c17a359743a..00000000000
--- a/lib/Target/RISCV/RISCVRegisterInfo.td
+++ /dev/null
@@ -1,183 +0,0 @@
-//===-- RISCVRegisterInfo.td - RISC-V Register defs --------*- tablegen -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-//===----------------------------------------------------------------------===//
-//  Declarations that describe the RISC-V register files
-//===----------------------------------------------------------------------===//
-
-let Namespace = "RISCV" in {
-class RISCVReg<bits<5> Enc, string n, list<string> alt = []> : Register<n> {
-  let HWEncoding{4-0} = Enc;
-  let AltNames = alt;
-}
-
-class RISCVReg32<bits<5> Enc, string n, list<string> alt = []> : Register<n> {
-  let HWEncoding{4-0} = Enc;
-  let AltNames = alt;
-}
-
-// Because RISCVReg64 register have AsmName and AltNames that alias with their
-// 32-bit sub-register, RISCVAsmParser will need to coerce a register number
-// from a RISCVReg32 to the equivalent RISCVReg64 when appropriate.
-def sub_32 : SubRegIndex<32>;
-class RISCVReg64<RISCVReg32 subreg> : Register<""> {
-  let HWEncoding{4-0} = subreg.HWEncoding{4-0};
-  let SubRegs = [subreg];
-  let SubRegIndices = [sub_32];
-  let AsmName = subreg.AsmName;
-  let AltNames = subreg.AltNames;
-}
-
-def ABIRegAltName : RegAltNameIndex;
-} // Namespace = "RISCV"
-
-// Integer registers
-let RegAltNameIndices = [ABIRegAltName] in {
-  def X0  : RISCVReg<0, "x0", ["zero"]>, DwarfRegNum<[0]>;
-  def X1  : RISCVReg<1, "x1", ["ra"]>, DwarfRegNum<[1]>;
-  def X2  : RISCVReg<2, "x2", ["sp"]>, DwarfRegNum<[2]>;
-  def X3  : RISCVReg<3, "x3", ["gp"]>, DwarfRegNum<[3]>;
-  def X4  : RISCVReg<4, "x4", ["tp"]>, DwarfRegNum<[4]>;
-  def X5  : RISCVReg<5, "x5", ["t0"]>, DwarfRegNum<[5]>;
-  def X6  : RISCVReg<6, "x6", ["t1"]>, DwarfRegNum<[6]>;
-  def X7  : RISCVReg<7, "x7", ["t2"]>, DwarfRegNum<[7]>;
-  def X8  : RISCVReg<8, "x8", ["s0"]>, DwarfRegNum<[8]>;
-  def X9  : RISCVReg<9, "x9", ["s1"]>, DwarfRegNum<[9]>;
-  def X10 : RISCVReg<10,"x10", ["a0"]>, DwarfRegNum<[10]>;
-  def X11 : RISCVReg<11,"x11", ["a1"]>, DwarfRegNum<[11]>;
-  def X12 : RISCVReg<12,"x12", ["a2"]>, DwarfRegNum<[12]>;
-  def X13 : RISCVReg<13,"x13", ["a3"]>, DwarfRegNum<[13]>;
-  def X14 : RISCVReg<14,"x14", ["a4"]>, DwarfRegNum<[14]>;
-  def X15 : RISCVReg<15,"x15", ["a5"]>, DwarfRegNum<[15]>;
-  def X16 : RISCVReg<16,"x16", ["a6"]>, DwarfRegNum<[16]>;
-  def X17 : RISCVReg<17,"x17", ["a7"]>, DwarfRegNum<[17]>;
-  def X18 : RISCVReg<18,"x18", ["s2"]>, DwarfRegNum<[18]>;
-  def X19 : RISCVReg<19,"x19", ["s3"]>, DwarfRegNum<[19]>;
-  def X20 : RISCVReg<20,"x20", ["s4"]>, DwarfRegNum<[20]>;
-  def X21 : RISCVReg<21,"x21", ["s5"]>, DwarfRegNum<[21]>;
-  def X22 : RISCVReg<22,"x22", ["s6"]>, DwarfRegNum<[22]>;
-  def X23 : RISCVReg<23,"x23", ["s7"]>, DwarfRegNum<[23]>;
-  def X24 : RISCVReg<24,"x24", ["s8"]>, DwarfRegNum<[24]>;
-  def X25 : RISCVReg<25,"x25", ["s9"]>, DwarfRegNum<[25]>;
-  def X26 : RISCVReg<26,"x26", ["s10"]>, DwarfRegNum<[26]>;
-  def X27 : RISCVReg<27,"x27", ["s11"]>, DwarfRegNum<[27]>;
-  def X28 : RISCVReg<28,"x28", ["t3"]>, DwarfRegNum<[28]>;
-  def X29 : RISCVReg<29,"x29", ["t4"]>, DwarfRegNum<[29]>;
-  def X30 : RISCVReg<30,"x30", ["t5"]>, DwarfRegNum<[30]>;
-  def X31 : RISCVReg<31,"x31", ["t6"]>, DwarfRegNum<[31]>;
-}
-
-def XLenVT : ValueTypeByHwMode<[RV32, RV64, DefaultMode],
-                               [i32,  i64,  i32]>;
-
-// The order of registers represents the preferred allocation sequence.
-// Registers are listed in the order caller-save, callee-save, specials.
-def GPR : RegisterClass<"RISCV", [XLenVT], 32, (add
-    (sequence "X%u", 10, 17),
-    (sequence "X%u", 5, 7),
-    (sequence "X%u", 28, 31),
-    (sequence "X%u", 8, 9),
-    (sequence "X%u", 18, 27),
-    (sequence "X%u", 0, 4)
-  )> {
-  let RegInfos = RegInfoByHwMode<
-      [RV32,              RV64,              DefaultMode],
-      [RegInfo<32,32,32>, RegInfo<64,64,64>, RegInfo<32,32,32>]>;
-}
-
-// The order of registers represents the preferred allocation sequence.
-// Registers are listed in the order caller-save, callee-save, specials.
-def GPRNoX0 : RegisterClass<"RISCV", [XLenVT], 32, (add
-    (sequence "X%u", 10, 17),
-    (sequence "X%u", 5, 7),
-    (sequence "X%u", 28, 31),
-    (sequence "X%u", 8, 9),
-    (sequence "X%u", 18, 27),
-    (sequence "X%u", 1, 4)
-  )> {
-  let RegInfos = RegInfoByHwMode<
-      [RV32,              RV64,              DefaultMode],
-      [RegInfo<32,32,32>, RegInfo<64,64,64>, RegInfo<32,32,32>]>;
-}
-
-def GPRC : RegisterClass<"RISCV", [XLenVT], 32, (add
-    (sequence "X%u", 10, 15),
-    (sequence "X%u", 8, 9)
-  )> {
-  let RegInfos = RegInfoByHwMode<
-      [RV32,              RV64,              DefaultMode],
-      [RegInfo<32,32,32>, RegInfo<64,64,64>, RegInfo<32,32,32>]>;
-}
-
-def SP : RegisterClass<"RISCV", [XLenVT], 32, (add X2)> {
-  let RegInfos = RegInfoByHwMode<
-      [RV32,              RV64,              DefaultMode],
-      [RegInfo<32,32,32>, RegInfo<64,64,64>, RegInfo<32,32,32>]>;
-}
-
-// Floating point registers
-let RegAltNameIndices = [ABIRegAltName] in {
-  def F0_32  : RISCVReg32<0, "f0", ["ft0"]>, DwarfRegNum<[32]>;
-  def F1_32  : RISCVReg32<1, "f1", ["ft1"]>, DwarfRegNum<[33]>;
-  def F2_32  : RISCVReg32<2, "f2", ["ft2"]>, DwarfRegNum<[34]>;
-  def F3_32  : RISCVReg32<3, "f3", ["ft3"]>, DwarfRegNum<[35]>;
-  def F4_32  : RISCVReg32<4, "f4", ["ft4"]>, DwarfRegNum<[36]>;
-  def F5_32  : RISCVReg32<5, "f5", ["ft5"]>, DwarfRegNum<[37]>;
-  def F6_32  : RISCVReg32<6, "f6", ["ft6"]>, DwarfRegNum<[38]>;
-  def F7_32  : RISCVReg32<7, "f7", ["ft7"]>, DwarfRegNum<[39]>;
-  def F8_32  : RISCVReg32<8, "f8", ["fs0"]>, DwarfRegNum<[40]>;
-  def F9_32  : RISCVReg32<9, "f9", ["fs1"]>, DwarfRegNum<[41]>;
-  def F10_32 : RISCVReg32<10,"f10", ["fa0"]>, DwarfRegNum<[42]>;
-  def F11_32 : RISCVReg32<11,"f11", ["fa1"]>, DwarfRegNum<[43]>;
-  def F12_32 : RISCVReg32<12,"f12", ["fa2"]>, DwarfRegNum<[44]>;
-  def F13_32 : RISCVReg32<13,"f13", ["fa3"]>, DwarfRegNum<[45]>;
-  def F14_32 : RISCVReg32<14,"f14", ["fa4"]>, DwarfRegNum<[46]>;
-  def F15_32 : RISCVReg32<15,"f15", ["fa5"]>, DwarfRegNum<[47]>;
-  def F16_32 : RISCVReg32<16,"f16", ["fa6"]>, DwarfRegNum<[48]>;
-  def F17_32 : RISCVReg32<17,"f17", ["fa7"]>, DwarfRegNum<[49]>;
-  def F18_32 : RISCVReg32<18,"f18", ["fs2"]>, DwarfRegNum<[50]>;
-  def F19_32 : RISCVReg32<19,"f19", ["fs3"]>, DwarfRegNum<[51]>;
-  def F20_32 : RISCVReg32<20,"f20", ["fs4"]>, DwarfRegNum<[52]>;
-  def F21_32 : RISCVReg32<21,"f21", ["fs5"]>, DwarfRegNum<[53]>;
-  def F22_32 : RISCVReg32<22,"f22", ["fs6"]>, DwarfRegNum<[54]>;
-  def F23_32 : RISCVReg32<23,"f23", ["fs7"]>, DwarfRegNum<[55]>;
-  def F24_32 : RISCVReg32<24,"f24", ["fs8"]>, DwarfRegNum<[56]>;
-  def F25_32 : RISCVReg32<25,"f25", ["fs9"]>, DwarfRegNum<[57]>;
-  def F26_32 : RISCVReg32<26,"f26", ["fs10"]>, DwarfRegNum<[58]>;
-  def F27_32 : RISCVReg32<27,"f27", ["fs11"]>, DwarfRegNum<[59]>;
-  def F28_32 : RISCVReg32<28,"f28", ["ft8"]>, DwarfRegNum<[60]>;
-  def F29_32 : RISCVReg32<29,"f29", ["ft9"]>, DwarfRegNum<[61]>;
-  def F30_32 : RISCVReg32<30,"f30", ["ft10"]>, DwarfRegNum<[62]>;
-  def F31_32 : RISCVReg32<31,"f31", ["ft11"]>, DwarfRegNum<[63]>;
-
-  foreach Index = 0-31 in {
-    def F#Index#_64 : RISCVReg64<!cast<RISCVReg32>("F"#Index#"_32")>,
-      DwarfRegNum<[!add(Index, 32)]>;
-  }
-}
-
-// The order of registers represents the preferred allocation sequence,
-// meaning caller-save regs are listed before callee-save.
-def FPR32 : RegisterClass<"RISCV", [f32], 32, (add
-    (sequence "F%u_32", 0, 7),
-    (sequence "F%u_32", 10, 17),
-    (sequence "F%u_32", 28, 31),
-    (sequence "F%u_32", 8, 9),
-    (sequence "F%u_32", 18, 27)
-)>;
-
-// The order of registers represents the preferred allocation sequence,
-// meaning caller-save regs are listed before callee-save.
-def FPR64 : RegisterClass<"RISCV", [f64], 64, (add
-    (sequence "F%u_64", 0, 7),
-    (sequence "F%u_64", 10, 17),
-    (sequence "F%u_64", 28, 31),
-    (sequence "F%u_64", 8, 9),
-    (sequence "F%u_64", 18, 27)
-)>;
diff --git a/lib/Target/RISCV/RISCVSubtarget.cpp b/lib/Target/RISCV/RISCVSubtarget.cpp
deleted file mode 100644
index b221ea84a33..00000000000
--- a/lib/Target/RISCV/RISCVSubtarget.cpp
+++ /dev/null
@@ -1,48 +0,0 @@
-//===-- RISCVSubtarget.cpp - RISCV Subtarget Information ------------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file implements the RISCV specific subclass of TargetSubtargetInfo.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCVSubtarget.h"
-#include "RISCV.h"
-#include "RISCVFrameLowering.h"
-#include "llvm/Support/TargetRegistry.h"
-
-using namespace llvm;
-
-#define DEBUG_TYPE "riscv-subtarget"
-
-#define GET_SUBTARGETINFO_TARGET_DESC
-#define GET_SUBTARGETINFO_CTOR
-#include "RISCVGenSubtargetInfo.inc"
-
-void RISCVSubtarget::anchor() {}
-
-RISCVSubtarget &RISCVSubtarget::initializeSubtargetDependencies(StringRef CPU,
-                                                                StringRef FS,
-                                                                bool Is64Bit) {
-  // Determine default and user-specified characteristics
-  std::string CPUName = CPU;
-  if (CPUName.empty())
-    CPUName = Is64Bit ? "generic-rv64" : "generic-rv32";
-  ParseSubtargetFeatures(CPUName, FS);
-  if (Is64Bit) {
-    XLenVT = MVT::i64;
-    XLen = 64;
-  }
-  return *this;
-}
-
-RISCVSubtarget::RISCVSubtarget(const Triple &TT, const std::string &CPU,
-                               const std::string &FS, const TargetMachine &TM)
-    : RISCVGenSubtargetInfo(TT, CPU, FS),
-      FrameLowering(initializeSubtargetDependencies(CPU, FS, TT.isArch64Bit())),
-      InstrInfo(), RegInfo(getHwMode()), TLInfo(TM, *this) {}
diff --git a/lib/Target/RISCV/RISCVSubtarget.h b/lib/Target/RISCV/RISCVSubtarget.h
deleted file mode 100644
index 928ba5815a2..00000000000
--- a/lib/Target/RISCV/RISCVSubtarget.h
+++ /dev/null
@@ -1,85 +0,0 @@
-//===-- RISCVSubtarget.h - Define Subtarget for the RISCV -------*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file declares the RISCV specific subclass of TargetSubtargetInfo.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_RISCVSUBTARGET_H
-#define LLVM_LIB_TARGET_RISCV_RISCVSUBTARGET_H
-
-#include "RISCVFrameLowering.h"
-#include "RISCVISelLowering.h"
-#include "RISCVInstrInfo.h"
-#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
-#include "llvm/CodeGen/TargetSubtargetInfo.h"
-#include "llvm/IR/DataLayout.h"
-#include "llvm/Target/TargetMachine.h"
-
-#define GET_SUBTARGETINFO_HEADER
-#include "RISCVGenSubtargetInfo.inc"
-
-namespace llvm {
-class StringRef;
-
-class RISCVSubtarget : public RISCVGenSubtargetInfo {
-  virtual void anchor();
-  bool HasStdExtM = false;
-  bool HasStdExtA = false;
-  bool HasStdExtF = false;
-  bool HasStdExtD = false;
-  bool HasStdExtC = false;
-  bool HasRV64 = false;
-  unsigned XLen = 32;
-  MVT XLenVT = MVT::i32;
-  RISCVFrameLowering FrameLowering;
-  RISCVInstrInfo InstrInfo;
-  RISCVRegisterInfo RegInfo;
-  RISCVTargetLowering TLInfo;
-  SelectionDAGTargetInfo TSInfo;
-
-  /// Initializes using the passed in CPU and feature strings so that we can
-  /// use initializer lists for subtarget initialization.
-  RISCVSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
-                                                  bool Is64Bit);
-
-public:
-  // Initializes the data members to match that of the specified triple.
-  RISCVSubtarget(const Triple &TT, const std::string &CPU,
-                 const std::string &FS, const TargetMachine &TM);
-
-  // Parses features string setting specified subtarget options. The
-  // definition of this function is auto-generated by tblgen.
-  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);
-
-  const RISCVFrameLowering *getFrameLowering() const override {
-    return &FrameLowering;
-  }
-  const RISCVInstrInfo *getInstrInfo() const override { return &InstrInfo; }
-  const RISCVRegisterInfo *getRegisterInfo() const override {
-    return &RegInfo;
-  }
-  const RISCVTargetLowering *getTargetLowering() const override {
-    return &TLInfo;
-  }
-  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
-    return &TSInfo;
-  }
-  bool hasStdExtM() const { return HasStdExtM; }
-  bool hasStdExtA() const { return HasStdExtA; }
-  bool hasStdExtF() const { return HasStdExtF; }
-  bool hasStdExtD() const { return HasStdExtD; }
-  bool hasStdExtC() const { return HasStdExtC; }
-  bool is64Bit() const { return HasRV64; }
-  MVT getXLenVT() const { return XLenVT; }
-  unsigned getXLen() const { return XLen; }
-};
-} // End llvm namespace
-
-#endif
diff --git a/lib/Target/RISCV/RISCVTargetMachine.cpp b/lib/Target/RISCV/RISCVTargetMachine.cpp
deleted file mode 100644
index e12168b7399..00000000000
--- a/lib/Target/RISCV/RISCVTargetMachine.cpp
+++ /dev/null
@@ -1,89 +0,0 @@
-//===-- RISCVTargetMachine.cpp - Define TargetMachine for RISCV -----------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// Implements the info about RISCV target spec.
-//
-//===----------------------------------------------------------------------===//
-
-#include "RISCV.h"
-#include "RISCVTargetMachine.h"
-#include "llvm/ADT/STLExtras.h"
-#include "llvm/CodeGen/Passes.h"
-#include "llvm/CodeGen/TargetLoweringObjectFileImpl.h"
-#include "llvm/CodeGen/TargetPassConfig.h"
-#include "llvm/IR/LegacyPassManager.h"
-#include "llvm/Support/FormattedStream.h"
-#include "llvm/Support/TargetRegistry.h"
-#include "llvm/Target/TargetOptions.h"
-using namespace llvm;
-
-extern "C" void LLVMInitializeRISCVTarget() {
-  RegisterTargetMachine<RISCVTargetMachine> X(getTheRISCV32Target());
-  RegisterTargetMachine<RISCVTargetMachine> Y(getTheRISCV64Target());
-}
-
-static std::string computeDataLayout(const Triple &TT) {
-  if (TT.isArch64Bit()) {
-    return "e-m:e-p:64:64-i64:64-i128:128-n64-S128";
-  } else {
-    assert(TT.isArch32Bit() && "only RV32 and RV64 are currently supported");
-    return "e-m:e-p:32:32-i64:64-n32-S128";
-  }
-}
-
-static Reloc::Model getEffectiveRelocModel(const Triple &TT,
-                                           Optional<Reloc::Model> RM) {
-  if (!RM.hasValue())
-    return Reloc::Static;
-  return *RM;
-}
-
-static CodeModel::Model getEffectiveCodeModel(Optional<CodeModel::Model> CM) {
-  if (CM)
-    return *CM;
-  return CodeModel::Small;
-}
-
-RISCVTargetMachine::RISCVTargetMachine(const Target &T, const Triple &TT,
-                                       StringRef CPU, StringRef FS,
-                                       const TargetOptions &Options,
-                                       Optional<Reloc::Model> RM,
-                                       Optional<CodeModel::Model> CM,
-                                       CodeGenOpt::Level OL, bool JIT)
-    : LLVMTargetMachine(T, computeDataLayout(TT), TT, CPU, FS, Options,
-                        getEffectiveRelocModel(TT, RM),
-                        getEffectiveCodeModel(CM), OL),
-      TLOF(make_unique<TargetLoweringObjectFileELF>()),
-      Subtarget(TT, CPU, FS, *this) {
-  initAsmInfo();
-}
-
-namespace {
-class RISCVPassConfig : public TargetPassConfig {
-public:
-  RISCVPassConfig(RISCVTargetMachine &TM, PassManagerBase &PM)
-      : TargetPassConfig(TM, PM) {}
-
-  RISCVTargetMachine &getRISCVTargetMachine() const {
-    return getTM<RISCVTargetMachine>();
-  }
-
-  bool addInstSelector() override;
-};
-}
-
-TargetPassConfig *RISCVTargetMachine::createPassConfig(PassManagerBase &PM) {
-  return new RISCVPassConfig(*this, PM);
-}
-
-bool RISCVPassConfig::addInstSelector() {
-  addPass(createRISCVISelDag(getRISCVTargetMachine()));
-
-  return false;
-}
diff --git a/lib/Target/RISCV/RISCVTargetMachine.h b/lib/Target/RISCV/RISCVTargetMachine.h
deleted file mode 100644
index 02361dddebf..00000000000
--- a/lib/Target/RISCV/RISCVTargetMachine.h
+++ /dev/null
@@ -1,46 +0,0 @@
-//===-- RISCVTargetMachine.h - Define TargetMachine for RISCV ---*- C++ -*-===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-//
-// This file declares the RISCV specific subclass of TargetMachine.
-//
-//===----------------------------------------------------------------------===//
-
-#ifndef LLVM_LIB_TARGET_RISCV_RISCVTARGETMACHINE_H
-#define LLVM_LIB_TARGET_RISCV_RISCVTARGETMACHINE_H
-
-#include "MCTargetDesc/RISCVMCTargetDesc.h"
-#include "RISCVSubtarget.h"
-#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
-#include "llvm/IR/DataLayout.h"
-#include "llvm/Target/TargetMachine.h"
-
-namespace llvm {
-class RISCVTargetMachine : public LLVMTargetMachine {
-  std::unique_ptr<TargetLoweringObjectFile> TLOF;
-  RISCVSubtarget Subtarget;
-
-public:
-  RISCVTargetMachine(const Target &T, const Triple &TT, StringRef CPU,
-                     StringRef FS, const TargetOptions &Options,
-                     Optional<Reloc::Model> RM, Optional<CodeModel::Model> CM,
-                     CodeGenOpt::Level OL, bool JIT);
-
-  const RISCVSubtarget *getSubtargetImpl(const Function &) const override {
-    return &Subtarget;
-  }
-
-  TargetPassConfig *createPassConfig(PassManagerBase &PM) override;
-
-  TargetLoweringObjectFile *getObjFileLowering() const override {
-    return TLOF.get();
-  }
-};
-}
-
-#endif
diff --git a/lib/Target/RISCV/TargetInfo/CMakeLists.txt b/lib/Target/RISCV/TargetInfo/CMakeLists.txt
deleted file mode 100644
index f440fe2cb82..00000000000
--- a/lib/Target/RISCV/TargetInfo/CMakeLists.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-add_llvm_library(LLVMRISCVInfo
-  RISCVTargetInfo.cpp
-  )
diff --git a/lib/Target/RISCV/TargetInfo/LLVMBuild.txt b/lib/Target/RISCV/TargetInfo/LLVMBuild.txt
deleted file mode 100644
index db7f66f94bf..00000000000
--- a/lib/Target/RISCV/TargetInfo/LLVMBuild.txt
+++ /dev/null
@@ -1,23 +0,0 @@
-;===- ./lib/Target/RISCV/TargetInfo/LLVMBuild.txt --------------*- Conf -*--===;
-;
-;                     The LLVM Compiler Infrastructure
-;
-; This file is distributed under the University of Illinois Open Source
-; License. See LICENSE.TXT for details.
-;
-;===------------------------------------------------------------------------===;
-;
-; This is an LLVMBuild description file for the components in this subdirectory.
-;
-; For more information on the LLVMBuild system, please see:
-;
-;   http://llvm.org/docs/LLVMBuild.html
-;
-;===------------------------------------------------------------------------===;
-
-[component_0]
-type = Library
-name = RISCVInfo
-parent = RISCV
-required_libraries = Support
-add_to_library_groups = RISCV
diff --git a/lib/Target/RISCV/TargetInfo/RISCVTargetInfo.cpp b/lib/Target/RISCV/TargetInfo/RISCVTargetInfo.cpp
deleted file mode 100644
index 0f369d960fe..00000000000
--- a/lib/Target/RISCV/TargetInfo/RISCVTargetInfo.cpp
+++ /dev/null
@@ -1,30 +0,0 @@
-//===-- RISCVTargetInfo.cpp - RISCV Target Implementation -----------------===//
-//
-//                     The LLVM Compiler Infrastructure
-//
-// This file is distributed under the University of Illinois Open Source
-// License. See LICENSE.TXT for details.
-//
-//===----------------------------------------------------------------------===//
-
-#include "llvm/Support/TargetRegistry.h"
-using namespace llvm;
-
-namespace llvm {
-Target &getTheRISCV32Target() {
-  static Target TheRISCV32Target;
-  return TheRISCV32Target;
-}
-
-Target &getTheRISCV64Target() {
-  static Target TheRISCV64Target;
-  return TheRISCV64Target;
-}
-}
-
-extern "C" void LLVMInitializeRISCVTargetInfo() {
-  RegisterTarget<Triple::riscv32> X(getTheRISCV32Target(), "riscv32",
-                                    "32-bit RISC-V", "RISCV");
-  RegisterTarget<Triple::riscv64> Y(getTheRISCV64Target(), "riscv64",
-                                    "64-bit RISC-V", "RISCV");
-}
diff --git a/test/CodeGen/RISCV/addc-adde-sube-subc.ll b/test/CodeGen/RISCV/addc-adde-sube-subc.ll
deleted file mode 100644
index 54f5482b9e7..00000000000
--- a/test/CodeGen/RISCV/addc-adde-sube-subc.ll
+++ /dev/null
@@ -1,30 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck -check-prefix=RV32I %s
-
-; Ensure that the ISDOpcodes ADDC, ADDE, SUBC, SUBE are handled correctly
-
-define i64 @addc_adde(i64 %a, i64 %b) {
-; RV32I-LABEL: addc_adde:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    add a1, a1, a3
-; RV32I-NEXT:    add a2, a0, a2
-; RV32I-NEXT:    sltu a0, a2, a0
-; RV32I-NEXT:    add a1, a1, a0
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = add i64 %a, %b
-  ret i64 %1
-}
-
-define i64 @subc_sube(i64 %a, i64 %b) {
-; RV32I-LABEL: subc_sube:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sub a1, a1, a3
-; RV32I-NEXT:    sltu a3, a0, a2
-; RV32I-NEXT:    sub a1, a1, a3
-; RV32I-NEXT:    sub a0, a0, a2
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sub i64 %a, %b
-  ret i64 %1
-}
diff --git a/test/CodeGen/RISCV/alu32.ll b/test/CodeGen/RISCV/alu32.ll
deleted file mode 100644
index e7c82181027..00000000000
--- a/test/CodeGen/RISCV/alu32.ll
+++ /dev/null
@@ -1,186 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-; These tests are each targeted at a particular RISC-V ALU instruction. Other
-; files in this folder exercise LLVM IR instructions that don't directly match a
-; RISC-V instruction
-
-; Register-immediate instructions
-
-define i32 @addi(i32 %a) nounwind {
-; RV32I-LABEL: addi:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = add i32 %a, 1
-  ret i32 %1
-}
-
-define i32 @slti(i32 %a) nounwind {
-; RV32I-LABEL: slti:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slti a0, a0, 2
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp slt i32 %a, 2
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @sltiu(i32 %a) nounwind {
-; RV32I-LABEL: sltiu:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sltiu a0, a0, 3
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp ult i32 %a, 3
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @xori(i32 %a) nounwind {
-; RV32I-LABEL: xori:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    xori a0, a0, 4
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = xor i32 %a, 4
-  ret i32 %1
-}
-
-define i32 @ori(i32 %a) nounwind {
-; RV32I-LABEL: ori:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    ori a0, a0, 5
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = or i32 %a, 5
-  ret i32 %1
-}
-
-define i32 @andi(i32 %a) nounwind {
-; RV32I-LABEL: andi:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 6
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = and i32 %a, 6
-  ret i32 %1
-}
-
-define i32 @slli(i32 %a) nounwind {
-; RV32I-LABEL: slli:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slli a0, a0, 7
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = shl i32 %a, 7
-  ret i32 %1
-}
-
-define i32 @srli(i32 %a) nounwind {
-; RV32I-LABEL: srli:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    srli a0, a0, 8
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = lshr i32 %a, 8
-  ret i32 %1
-}
-
-define i32 @srai(i32 %a) nounwind {
-; RV32I-LABEL: srai:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    srai a0, a0, 9
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = ashr i32 %a, 9
-  ret i32 %1
-}
-
-; Register-register instructions
-
-define i32 @add(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: add:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = add i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @sub(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: sub:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sub i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @sll(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: sll:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sll a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = shl i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @slt(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: slt:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slt a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp slt i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @sltu(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: sltu:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sltu a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp ult i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @xor(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: xor:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    xor a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = xor i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @srl(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: srl:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    srl a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = lshr i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @sra(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: sra:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sra a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = ashr i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @or(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: or:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    or a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = or i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @and(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: and:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = and i32 %a, %b
-  ret i32 %1
-}
diff --git a/test/CodeGen/RISCV/bare-select.ll b/test/CodeGen/RISCV/bare-select.ll
deleted file mode 100644
index a46afe27143..00000000000
--- a/test/CodeGen/RISCV/bare-select.ll
+++ /dev/null
@@ -1,17 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-define i32 @bare_select(i1 %a, i32 %b, i32 %c) {
-; RV32I-LABEL: bare_select:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    bne a0, zero, .LBB0_2
-; RV32I-NEXT:  # %bb.1:
-; RV32I-NEXT:    addi a1, a2, 0
-; RV32I-NEXT:  .LBB0_2:
-; RV32I-NEXT:    addi a0, a1, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = select i1 %a, i32 %b, i32 %c
-  ret i32 %1
-}
diff --git a/test/CodeGen/RISCV/blockaddress.ll b/test/CodeGen/RISCV/blockaddress.ll
deleted file mode 100644
index 9eb4e3d404d..00000000000
--- a/test/CodeGen/RISCV/blockaddress.ll
+++ /dev/null
@@ -1,28 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-@addr = global i8* null
-
-define void @test_blockaddress() nounwind {
-; RV32I-LABEL: test_blockaddress:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 0(s0)
-; RV32I-NEXT:    lui a0, %hi(addr)
-; RV32I-NEXT:    addi a0, a0, %lo(addr)
-; RV32I-NEXT:    lui a1, %hi(.Ltmp0)
-; RV32I-NEXT:    addi a1, a1, %lo(.Ltmp0)
-; RV32I-NEXT:    sw a1, 0(a0)
-; RV32I-NEXT:    lw a0, 0(a0)
-; RV32I-NEXT:    jalr zero, a0, 0
-; RV32I-NEXT:  .Ltmp0: # Block address taken
-; RV32I-NEXT:  .LBB0_1: # %block
-; RV32I-NEXT:    lw ra, 0(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  store volatile i8* blockaddress(@test_blockaddress, %block), i8** @addr
-  %val = load volatile i8*, i8** @addr
-  indirectbr i8* %val, [label %block]
-
-block:
-  ret void
-}
diff --git a/test/CodeGen/RISCV/branch.ll b/test/CodeGen/RISCV/branch.ll
deleted file mode 100644
index e2593d3309b..00000000000
--- a/test/CodeGen/RISCV/branch.ll
+++ /dev/null
@@ -1,121 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck -check-prefix=RV32I %s
-
-define void @foo(i32 %a, i32 *%b, i1 %c) {
-; RV32I-LABEL: foo:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    beq a3, a0, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_1
-; RV32I-NEXT:  .LBB0_1: # %test2
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    bne a3, a0, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_2
-; RV32I-NEXT:  .LBB0_2: # %test3
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    blt a3, a0, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_3
-; RV32I-NEXT:  .LBB0_3: # %test4
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    bge a3, a0, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_4
-; RV32I-NEXT:  .LBB0_4: # %test5
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    bltu a3, a0, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_5
-; RV32I-NEXT:  .LBB0_5: # %test6
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    bgeu a3, a0, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_6
-; RV32I-NEXT:  .LBB0_6: # %test7
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    blt a0, a3, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_7
-; RV32I-NEXT:  .LBB0_7: # %test8
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    bge a0, a3, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_8
-; RV32I-NEXT:  .LBB0_8: # %test9
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    bltu a0, a3, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_9
-; RV32I-NEXT:  .LBB0_9: # %test10
-; RV32I-NEXT:    lw a3, 0(a1)
-; RV32I-NEXT:    bgeu a0, a3, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_10
-; RV32I-NEXT:  .LBB0_10: # %test11
-; RV32I-NEXT:    lw a0, 0(a1)
-; RV32I-NEXT:    andi a0, a2, 1
-; RV32I-NEXT:    bne a0, zero, .LBB0_12
-; RV32I-NEXT:    jal zero, .LBB0_11
-; RV32I-NEXT:  .LBB0_11: # %test12
-; RV32I-NEXT:    lw a0, 0(a1)
-; RV32I-NEXT:  .LBB0_12: # %end
-; RV32I-NEXT:    jalr zero, ra, 0
-
-  %val1 = load volatile i32, i32* %b
-  %tst1 = icmp eq i32 %val1, %a
-  br i1 %tst1, label %end, label %test2
-
-test2:
-  %val2 = load volatile i32, i32* %b
-  %tst2 = icmp ne i32 %val2, %a
-  br i1 %tst2, label %end, label %test3
-
-test3:
-  %val3 = load volatile i32, i32* %b
-  %tst3 = icmp slt i32 %val3, %a
-  br i1 %tst3, label %end, label %test4
-
-test4:
-  %val4 = load volatile i32, i32* %b
-  %tst4 = icmp sge i32 %val4, %a
-  br i1 %tst4, label %end, label %test5
-
-test5:
-  %val5 = load volatile i32, i32* %b
-  %tst5 = icmp ult i32 %val5, %a
-  br i1 %tst5, label %end, label %test6
-
-test6:
-  %val6 = load volatile i32, i32* %b
-  %tst6 = icmp uge i32 %val6, %a
-  br i1 %tst6, label %end, label %test7
-
-; Check for condition codes that don't have a matching instruction
-
-test7:
-  %val7 = load volatile i32, i32* %b
-  %tst7 = icmp sgt i32 %val7, %a
-  br i1 %tst7, label %end, label %test8
-
-test8:
-  %val8 = load volatile i32, i32* %b
-  %tst8 = icmp sle i32 %val8, %a
-  br i1 %tst8, label %end, label %test9
-
-test9:
-  %val9 = load volatile i32, i32* %b
-  %tst9 = icmp ugt i32 %val9, %a
-  br i1 %tst9, label %end, label %test10
-
-test10:
-  %val10 = load volatile i32, i32* %b
-  %tst10 = icmp ule i32 %val10, %a
-  br i1 %tst10, label %end, label %test11
-
-; Check the case of a branch where the condition was generated in another
-; function
-
-test11:
-  %val11 = load volatile i32, i32* %b
-  br i1 %c, label %end, label %test12
-
-test12:
-  %val12 = load volatile i32, i32* %b
-  br label %end
-
-end:
-  ret void
-}
diff --git a/test/CodeGen/RISCV/bswap-ctlz-cttz-ctpop.ll b/test/CodeGen/RISCV/bswap-ctlz-cttz-ctpop.ll
deleted file mode 100644
index 150dfed3573..00000000000
--- a/test/CodeGen/RISCV/bswap-ctlz-cttz-ctpop.ll
+++ /dev/null
@@ -1,543 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-declare i16 @llvm.bswap.i16(i16)
-declare i32 @llvm.bswap.i32(i32)
-declare i64 @llvm.bswap.i64(i64)
-declare i8 @llvm.cttz.i8(i8, i1)
-declare i16 @llvm.cttz.i16(i16, i1)
-declare i32 @llvm.cttz.i32(i32, i1)
-declare i64 @llvm.cttz.i64(i64, i1)
-declare i32 @llvm.ctlz.i32(i32, i1)
-declare i32 @llvm.ctpop.i32(i32)
-
-define i16 @test_bswap_i16(i16 %a) nounwind {
-; RV32I-LABEL: test_bswap_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a1, 4080
-; RV32I-NEXT:    addi a1, a1, 0
-; RV32I-NEXT:    slli a2, a0, 8
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    slli a0, a0, 24
-; RV32I-NEXT:    or a0, a0, a1
-; RV32I-NEXT:    srli a0, a0, 16
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i16 @llvm.bswap.i16(i16 %a)
-  ret i16 %tmp
-}
-
-define i32 @test_bswap_i32(i32 %a) nounwind {
-; RV32I-LABEL: test_bswap_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a1, 16
-; RV32I-NEXT:    addi a1, a1, -256
-; RV32I-NEXT:    srli a2, a0, 8
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    srli a2, a0, 24
-; RV32I-NEXT:    or a1, a1, a2
-; RV32I-NEXT:    lui a2, 4080
-; RV32I-NEXT:    addi a2, a2, 0
-; RV32I-NEXT:    slli a3, a0, 8
-; RV32I-NEXT:    and a2, a3, a2
-; RV32I-NEXT:    slli a0, a0, 24
-; RV32I-NEXT:    or a0, a0, a2
-; RV32I-NEXT:    or a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i32 @llvm.bswap.i32(i32 %a)
-  ret i32 %tmp
-}
-
-define i64 @test_bswap_i64(i64 %a) nounwind {
-; RV32I-LABEL: test_bswap_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a2, 16
-; RV32I-NEXT:    addi a3, a2, -256
-; RV32I-NEXT:    srli a2, a1, 8
-; RV32I-NEXT:    and a2, a2, a3
-; RV32I-NEXT:    srli a4, a1, 24
-; RV32I-NEXT:    or a2, a2, a4
-; RV32I-NEXT:    lui a4, 4080
-; RV32I-NEXT:    addi a4, a4, 0
-; RV32I-NEXT:    slli a5, a1, 8
-; RV32I-NEXT:    and a5, a5, a4
-; RV32I-NEXT:    slli a1, a1, 24
-; RV32I-NEXT:    or a1, a1, a5
-; RV32I-NEXT:    or a2, a1, a2
-; RV32I-NEXT:    srli a1, a0, 8
-; RV32I-NEXT:    and a1, a1, a3
-; RV32I-NEXT:    srli a3, a0, 24
-; RV32I-NEXT:    or a1, a1, a3
-; RV32I-NEXT:    slli a3, a0, 8
-; RV32I-NEXT:    and a3, a3, a4
-; RV32I-NEXT:    slli a0, a0, 24
-; RV32I-NEXT:    or a0, a0, a3
-; RV32I-NEXT:    or a1, a0, a1
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i64 @llvm.bswap.i64(i64 %a)
-  ret i64 %tmp
-}
-
-define i8 @test_cttz_i8(i8 %a) nounwind {
-; RV32I-LABEL: test_cttz_i8:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a1, a0, 0
-; RV32I-NEXT:    addi a0, zero, 8
-; RV32I-NEXT:    andi a2, a1, 255
-; RV32I-NEXT:    beq a2, zero, .LBB3_2
-; RV32I-NEXT:    jal zero, .LBB3_1
-; RV32I-NEXT:  .LBB3_1: # %cond.false
-; RV32I-NEXT:    addi a0, a1, -1
-; RV32I-NEXT:    xori a1, a1, -1
-; RV32I-NEXT:    and a0, a1, a0
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:  .LBB3_2: # %cond.end
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i8 @llvm.cttz.i8(i8 %a, i1 false)
-  ret i8 %tmp
-}
-
-define i16 @test_cttz_i16(i16 %a) nounwind {
-; RV32I-LABEL: test_cttz_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a1, a0, 0
-; RV32I-NEXT:    addi a0, zero, 16
-; RV32I-NEXT:    lui a2, 16
-; RV32I-NEXT:    addi a2, a2, -1
-; RV32I-NEXT:    and a2, a1, a2
-; RV32I-NEXT:    beq a2, zero, .LBB4_2
-; RV32I-NEXT:    jal zero, .LBB4_1
-; RV32I-NEXT:  .LBB4_1: # %cond.false
-; RV32I-NEXT:    addi a0, a1, -1
-; RV32I-NEXT:    xori a1, a1, -1
-; RV32I-NEXT:    and a0, a1, a0
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:  .LBB4_2: # %cond.end
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i16 @llvm.cttz.i16(i16 %a, i1 false)
-  ret i16 %tmp
-}
-
-define i32 @test_cttz_i32(i32 %a) nounwind {
-; RV32I-LABEL: test_cttz_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a1, a0, 0
-; RV32I-NEXT:    addi a0, zero, 32
-; RV32I-NEXT:    beq a1, zero, .LBB5_2
-; RV32I-NEXT:    jal zero, .LBB5_1
-; RV32I-NEXT:  .LBB5_1: # %cond.false
-; RV32I-NEXT:    addi a0, a1, -1
-; RV32I-NEXT:    xori a1, a1, -1
-; RV32I-NEXT:    and a0, a1, a0
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:  .LBB5_2: # %cond.end
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i32 @llvm.cttz.i32(i32 %a, i1 false)
-  ret i32 %tmp
-}
-
-define i32 @test_ctlz_i32(i32 %a) nounwind {
-; RV32I-LABEL: test_ctlz_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a1, a0, 0
-; RV32I-NEXT:    addi a0, zero, 32
-; RV32I-NEXT:    beq a1, zero, .LBB6_2
-; RV32I-NEXT:    jal zero, .LBB6_1
-; RV32I-NEXT:  .LBB6_1: # %cond.false
-; RV32I-NEXT:    srli a0, a1, 1
-; RV32I-NEXT:    or a0, a1, a0
-; RV32I-NEXT:    srli a1, a0, 2
-; RV32I-NEXT:    or a0, a0, a1
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    or a0, a0, a1
-; RV32I-NEXT:    srli a1, a0, 8
-; RV32I-NEXT:    or a0, a0, a1
-; RV32I-NEXT:    srli a1, a0, 16
-; RV32I-NEXT:    or a0, a0, a1
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    xori a0, a0, -1
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:  .LBB6_2: # %cond.end
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i32 @llvm.ctlz.i32(i32 %a, i1 false)
-  ret i32 %tmp
-}
-
-define i64 @test_cttz_i64(i64 %a) nounwind {
-; RV32I-LABEL: test_cttz_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 28(s0)
-; RV32I-NEXT:    sw s1, 24(s0)
-; RV32I-NEXT:    sw s2, 20(s0)
-; RV32I-NEXT:    sw s3, 16(s0)
-; RV32I-NEXT:    sw s4, 12(s0)
-; RV32I-NEXT:    sw s5, 8(s0)
-; RV32I-NEXT:    sw s6, 4(s0)
-; RV32I-NEXT:    sw s7, 0(s0)
-; RV32I-NEXT:    addi s1, a1, 0
-; RV32I-NEXT:    addi s2, a0, 0
-; RV32I-NEXT:    addi a0, s2, -1
-; RV32I-NEXT:    xori a1, s2, -1
-; RV32I-NEXT:    and a0, a1, a0
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi s4, a1, 1365
-; RV32I-NEXT:    srli a1, a0, 1
-; RV32I-NEXT:    and a1, a1, s4
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi s5, a1, 819
-; RV32I-NEXT:    and a1, a0, s5
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, s5
-; RV32I-NEXT:    add a0, a1, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi s3, a1, 257
-; RV32I-NEXT:    lui a1, %hi(__mulsi3)
-; RV32I-NEXT:    addi s6, a1, %lo(__mulsi3)
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi s7, a1, -241
-; RV32I-NEXT:    and a0, a0, s7
-; RV32I-NEXT:    addi a1, s3, 0
-; RV32I-NEXT:    jalr ra, s6, 0
-; RV32I-NEXT:    addi a1, s1, -1
-; RV32I-NEXT:    xori a2, s1, -1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    srli a2, a1, 1
-; RV32I-NEXT:    and a2, a2, s4
-; RV32I-NEXT:    sub a1, a1, a2
-; RV32I-NEXT:    and a2, a1, s5
-; RV32I-NEXT:    srli a1, a1, 2
-; RV32I-NEXT:    and a1, a1, s5
-; RV32I-NEXT:    add a1, a2, a1
-; RV32I-NEXT:    srli a2, a1, 4
-; RV32I-NEXT:    add a1, a1, a2
-; RV32I-NEXT:    and a1, a1, s7
-; RV32I-NEXT:    srli s1, a0, 24
-; RV32I-NEXT:    addi a0, a1, 0
-; RV32I-NEXT:    addi a1, s3, 0
-; RV32I-NEXT:    jalr ra, s6, 0
-; RV32I-NEXT:    bne s2, zero, .LBB7_2
-; RV32I-NEXT:  # %bb.1:
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:    addi s1, a0, 32
-; RV32I-NEXT:  .LBB7_2:
-; RV32I-NEXT:    addi a0, s1, 0
-; RV32I-NEXT:    addi a1, zero, 0
-; RV32I-NEXT:    lw s7, 0(s0)
-; RV32I-NEXT:    lw s6, 4(s0)
-; RV32I-NEXT:    lw s5, 8(s0)
-; RV32I-NEXT:    lw s4, 12(s0)
-; RV32I-NEXT:    lw s3, 16(s0)
-; RV32I-NEXT:    lw s2, 20(s0)
-; RV32I-NEXT:    lw s1, 24(s0)
-; RV32I-NEXT:    lw ra, 28(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i64 @llvm.cttz.i64(i64 %a, i1 false)
-  ret i64 %tmp
-}
-
-define i8 @test_cttz_i8_zero_undef(i8 %a) nounwind {
-; RV32I-LABEL: test_cttz_i8_zero_undef:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a1, a0, -1
-; RV32I-NEXT:    xori a0, a0, -1
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i8 @llvm.cttz.i8(i8 %a, i1 true)
-  ret i8 %tmp
-}
-
-define i16 @test_cttz_i16_zero_undef(i16 %a) nounwind {
-; RV32I-LABEL: test_cttz_i16_zero_undef:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a1, a0, -1
-; RV32I-NEXT:    xori a0, a0, -1
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i16 @llvm.cttz.i16(i16 %a, i1 true)
-  ret i16 %tmp
-}
-
-define i32 @test_cttz_i32_zero_undef(i32 %a) nounwind {
-; RV32I-LABEL: test_cttz_i32_zero_undef:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a1, a0, -1
-; RV32I-NEXT:    xori a0, a0, -1
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i32 @llvm.cttz.i32(i32 %a, i1 true)
-  ret i32 %tmp
-}
-
-define i64 @test_cttz_i64_zero_undef(i64 %a) nounwind {
-; RV32I-LABEL: test_cttz_i64_zero_undef:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 28(s0)
-; RV32I-NEXT:    sw s1, 24(s0)
-; RV32I-NEXT:    sw s2, 20(s0)
-; RV32I-NEXT:    sw s3, 16(s0)
-; RV32I-NEXT:    sw s4, 12(s0)
-; RV32I-NEXT:    sw s5, 8(s0)
-; RV32I-NEXT:    sw s6, 4(s0)
-; RV32I-NEXT:    sw s7, 0(s0)
-; RV32I-NEXT:    addi s1, a1, 0
-; RV32I-NEXT:    addi s2, a0, 0
-; RV32I-NEXT:    addi a0, s2, -1
-; RV32I-NEXT:    xori a1, s2, -1
-; RV32I-NEXT:    and a0, a1, a0
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi s4, a1, 1365
-; RV32I-NEXT:    srli a1, a0, 1
-; RV32I-NEXT:    and a1, a1, s4
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi s5, a1, 819
-; RV32I-NEXT:    and a1, a0, s5
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, s5
-; RV32I-NEXT:    add a0, a1, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi s3, a1, 257
-; RV32I-NEXT:    lui a1, %hi(__mulsi3)
-; RV32I-NEXT:    addi s6, a1, %lo(__mulsi3)
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi s7, a1, -241
-; RV32I-NEXT:    and a0, a0, s7
-; RV32I-NEXT:    addi a1, s3, 0
-; RV32I-NEXT:    jalr ra, s6, 0
-; RV32I-NEXT:    addi a1, s1, -1
-; RV32I-NEXT:    xori a2, s1, -1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    srli a2, a1, 1
-; RV32I-NEXT:    and a2, a2, s4
-; RV32I-NEXT:    sub a1, a1, a2
-; RV32I-NEXT:    and a2, a1, s5
-; RV32I-NEXT:    srli a1, a1, 2
-; RV32I-NEXT:    and a1, a1, s5
-; RV32I-NEXT:    add a1, a2, a1
-; RV32I-NEXT:    srli a2, a1, 4
-; RV32I-NEXT:    add a1, a1, a2
-; RV32I-NEXT:    and a1, a1, s7
-; RV32I-NEXT:    srli s1, a0, 24
-; RV32I-NEXT:    addi a0, a1, 0
-; RV32I-NEXT:    addi a1, s3, 0
-; RV32I-NEXT:    jalr ra, s6, 0
-; RV32I-NEXT:    bne s2, zero, .LBB11_2
-; RV32I-NEXT:  # %bb.1:
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:    addi s1, a0, 32
-; RV32I-NEXT:  .LBB11_2:
-; RV32I-NEXT:    addi a0, s1, 0
-; RV32I-NEXT:    addi a1, zero, 0
-; RV32I-NEXT:    lw s7, 0(s0)
-; RV32I-NEXT:    lw s6, 4(s0)
-; RV32I-NEXT:    lw s5, 8(s0)
-; RV32I-NEXT:    lw s4, 12(s0)
-; RV32I-NEXT:    lw s3, 16(s0)
-; RV32I-NEXT:    lw s2, 20(s0)
-; RV32I-NEXT:    lw s1, 24(s0)
-; RV32I-NEXT:    lw ra, 28(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %tmp = call i64 @llvm.cttz.i64(i64 %a, i1 true)
-  ret i64 %tmp
-}
-
-define i32 @test_ctpop_i32(i32 %a) nounwind {
-; RV32I-LABEL: test_ctpop_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a1, 349525
-; RV32I-NEXT:    addi a1, a1, 1365
-; RV32I-NEXT:    srli a2, a0, 1
-; RV32I-NEXT:    and a1, a2, a1
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    lui a1, 209715
-; RV32I-NEXT:    addi a1, a1, 819
-; RV32I-NEXT:    and a2, a0, a1
-; RV32I-NEXT:    srli a0, a0, 2
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    add a0, a2, a0
-; RV32I-NEXT:    srli a1, a0, 4
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    lui a1, 61681
-; RV32I-NEXT:    addi a1, a1, -241
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    lui a1, 4112
-; RV32I-NEXT:    addi a1, a1, 257
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    srli a0, a0, 24
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = call i32 @llvm.ctpop.i32(i32 %a)
-  ret i32 %1
-}
diff --git a/test/CodeGen/RISCV/calls.ll b/test/CodeGen/RISCV/calls.ll
deleted file mode 100644
index 77f61290705..00000000000
--- a/test/CodeGen/RISCV/calls.ll
+++ /dev/null
@@ -1,83 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck -check-prefix=RV32I %s
-
-declare i32 @external_function(i32)
-
-define i32 @test_call_external(i32 %a) nounwind {
-; RV32I-LABEL: test_call_external:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a1, %hi(external_function)
-; RV32I-NEXT:    addi a1, a1, %lo(external_function)
-; RV32I-NEXT:    jalr ra, a1, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = call i32 @external_function(i32 %a)
-  ret i32 %1
-}
-
-define i32 @defined_function(i32 %a) nounwind {
-; RV32I-LABEL: defined_function:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = add i32 %a, 1
-  ret i32 %1
-}
-
-define i32 @test_call_defined(i32 %a) nounwind {
-; RV32I-LABEL: test_call_defined:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a1, %hi(defined_function)
-; RV32I-NEXT:    addi a1, a1, %lo(defined_function)
-; RV32I-NEXT:    jalr ra, a1, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = call i32 @defined_function(i32 %a) nounwind
-  ret i32 %1
-}
-
-define i32 @test_call_indirect(i32 (i32)* %a, i32 %b) nounwind {
-; RV32I-LABEL: test_call_indirect:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    addi a2, a0, 0
-; RV32I-NEXT:    addi a0, a1, 0
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = call i32 %a(i32 %b)
-  ret i32 %1
-}
-
-; Ensure that calls to fastcc functions aren't rejected. Such calls may be
-; introduced when compiling with optimisation.
-
-define fastcc i32 @fastcc_function(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: fastcc_function:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
- %1 = add i32 %a, %b
- ret i32 %1
-}
-
-define i32 @test_call_fastcc(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: test_call_fastcc:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    sw s1, 8(s0)
-; RV32I-NEXT:    addi s1, a0, 0
-; RV32I-NEXT:    lui a0, %hi(fastcc_function)
-; RV32I-NEXT:    addi a2, a0, %lo(fastcc_function)
-; RV32I-NEXT:    addi a0, s1, 0
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    addi a0, s1, 0
-; RV32I-NEXT:    lw s1, 8(s0)
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = call fastcc i32 @fastcc_function(i32 %a, i32 %b)
-  ret i32 %a
-}
diff --git a/test/CodeGen/RISCV/div.ll b/test/CodeGen/RISCV/div.ll
deleted file mode 100644
index a53c51c94d8..00000000000
--- a/test/CodeGen/RISCV/div.ll
+++ /dev/null
@@ -1,134 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-define i32 @udiv(i32 %a, i32 %b) {
-; RV32I-LABEL: udiv:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__udivsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__udivsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = udiv i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @udiv_constant(i32 %a) {
-; RV32I-LABEL: udiv_constant:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a1, %hi(__udivsi3)
-; RV32I-NEXT:    addi a2, a1, %lo(__udivsi3)
-; RV32I-NEXT:    addi a1, zero, 5
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = udiv i32 %a, 5
-  ret i32 %1
-}
-
-define i32 @udiv_pow2(i32 %a) {
-; RV32I-LABEL: udiv_pow2:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    srli a0, a0, 3
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = udiv i32 %a, 8
-  ret i32 %1
-}
-
-define i64 @udiv64(i64 %a, i64 %b) {
-; RV32I-LABEL: udiv64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a4, %hi(__udivdi3)
-; RV32I-NEXT:    addi a4, a4, %lo(__udivdi3)
-; RV32I-NEXT:    jalr ra, a4, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = udiv i64 %a, %b
-  ret i64 %1
-}
-
-define i64 @udiv64_constant(i64 %a) {
-; RV32I-LABEL: udiv64_constant:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__udivdi3)
-; RV32I-NEXT:    addi a4, a2, %lo(__udivdi3)
-; RV32I-NEXT:    addi a2, zero, 5
-; RV32I-NEXT:    addi a3, zero, 0
-; RV32I-NEXT:    jalr ra, a4, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = udiv i64 %a, 5
-  ret i64 %1
-}
-
-define i32 @sdiv(i32 %a, i32 %b) {
-; RV32I-LABEL: sdiv:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__divsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__divsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sdiv i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @sdiv_constant(i32 %a) {
-; RV32I-LABEL: sdiv_constant:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a1, %hi(__divsi3)
-; RV32I-NEXT:    addi a2, a1, %lo(__divsi3)
-; RV32I-NEXT:    addi a1, zero, 5
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sdiv i32 %a, 5
-  ret i32 %1
-}
-
-define i32 @sdiv_pow2(i32 %a) {
-; RV32I-LABEL: sdiv_pow2:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    srai a1, a0, 31
-; RV32I-NEXT:    srli a1, a1, 29
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    srai a0, a0, 3
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sdiv i32 %a, 8
-  ret i32 %1
-}
-
-define i64 @sdiv64(i64 %a, i64 %b) {
-; RV32I-LABEL: sdiv64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a4, %hi(__divdi3)
-; RV32I-NEXT:    addi a4, a4, %lo(__divdi3)
-; RV32I-NEXT:    jalr ra, a4, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sdiv i64 %a, %b
-  ret i64 %1
-}
-
-define i64 @sdiv64_constant(i64 %a) {
-; RV32I-LABEL: sdiv64_constant:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__divdi3)
-; RV32I-NEXT:    addi a4, a2, %lo(__divdi3)
-; RV32I-NEXT:    addi a2, zero, 5
-; RV32I-NEXT:    addi a3, zero, 0
-; RV32I-NEXT:    jalr ra, a4, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sdiv i64 %a, 5
-  ret i64 %1
-}
diff --git a/test/CodeGen/RISCV/i32-icmp.ll b/test/CodeGen/RISCV/i32-icmp.ll
deleted file mode 100644
index bc06ec805e9..00000000000
--- a/test/CodeGen/RISCV/i32-icmp.ll
+++ /dev/null
@@ -1,114 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-; TODO: check the generated instructions for the equivalent of seqz, snez,
-; sltz, sgtz map to something simple
-
-define i32 @icmp_eq(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_eq:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    xor a0, a0, a1
-; RV32I-NEXT:    sltiu a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp eq i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_ne(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_ne:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    xor a0, a0, a1
-; RV32I-NEXT:    sltu a0, zero, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp ne i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_ugt(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_ugt:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sltu a0, a1, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp ugt i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_uge(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_uge:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sltu a0, a0, a1
-; RV32I-NEXT:    xori a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp uge i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_ult(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_ult:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sltu a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp ult i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_ule(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_ule:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sltu a0, a1, a0
-; RV32I-NEXT:    xori a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp ule i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_sgt(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_sgt:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slt a0, a1, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp sgt i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_sge(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_sge:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slt a0, a0, a1
-; RV32I-NEXT:    xori a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp sge i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_slt(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_slt:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slt a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp slt i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-define i32 @icmp_sle(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: icmp_sle:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slt a0, a1, a0
-; RV32I-NEXT:    xori a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = icmp sle i32 %a, %b
-  %2 = zext i1 %1 to i32
-  ret i32 %2
-}
-
-; TODO: check variants with an immediate?
diff --git a/test/CodeGen/RISCV/imm.ll b/test/CodeGen/RISCV/imm.ll
deleted file mode 100644
index ddefa22835a..00000000000
--- a/test/CodeGen/RISCV/imm.ll
+++ /dev/null
@@ -1,47 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-; Materializing constants
-
-define i32 @zero() nounwind {
-; RV32I-LABEL: zero:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a0, zero, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  ret i32 0
-}
-
-define i32 @pos_small() nounwind {
-; RV32I-LABEL: pos_small:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a0, zero, 2047
-; RV32I-NEXT:    jalr zero, ra, 0
-  ret i32 2047
-}
-
-define i32 @neg_small() nounwind {
-; RV32I-LABEL: neg_small:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a0, zero, -2048
-; RV32I-NEXT:    jalr zero, ra, 0
-  ret i32 -2048
-}
-
-define i32 @pos_i32() nounwind {
-; RV32I-LABEL: pos_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a0, 423811
-; RV32I-NEXT:    addi a0, a0, -1297
-; RV32I-NEXT:    jalr zero, ra, 0
-  ret i32 1735928559
-}
-
-define i32 @neg_i32() nounwind {
-; RV32I-LABEL: neg_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a0, 912092
-; RV32I-NEXT:    addi a0, a0, -273
-; RV32I-NEXT:    jalr zero, ra, 0
-  ret i32 -559038737
-}
diff --git a/test/CodeGen/RISCV/indirectbr.ll b/test/CodeGen/RISCV/indirectbr.ll
deleted file mode 100644
index 40641da6d6f..00000000000
--- a/test/CodeGen/RISCV/indirectbr.ll
+++ /dev/null
@@ -1,36 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-define i32 @indirectbr(i8* %target) nounwind {
-; RV32I-LABEL: indirectbr:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 0(s0)
-; RV32I-NEXT:    jalr zero, a0, 0
-; RV32I-NEXT:  .LBB0_1: # %ret
-; RV32I-NEXT:    addi a0, zero, 0
-; RV32I-NEXT:    lw ra, 0(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  indirectbr i8* %target, [label %test_label]
-test_label:
-  br label %ret
-ret:
-  ret i32 0
-}
-
-define i32 @indirectbr_with_offset(i8* %a) nounwind {
-; RV32I-LABEL: indirectbr_with_offset:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 0(s0)
-; RV32I-NEXT:    jalr zero, a0, 1380
-; RV32I-NEXT:  .LBB1_1: # %ret
-; RV32I-NEXT:    addi a0, zero, 0
-; RV32I-NEXT:    lw ra, 0(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %target = getelementptr inbounds i8, i8* %a, i32 1380
-  indirectbr i8* %target, [label %test_label]
-test_label:
-  br label %ret
-ret:
-  ret i32 0
-}
diff --git a/test/CodeGen/RISCV/jumptable.ll b/test/CodeGen/RISCV/jumptable.ll
deleted file mode 100644
index 68f4f1cb721..00000000000
--- a/test/CodeGen/RISCV/jumptable.ll
+++ /dev/null
@@ -1,63 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-define void @jt(i32 %in, i32* %out) {
-; RV32I-LABEL: jt:
-; RV32I:       # %bb.0: # %entry
-; RV32I-NEXT:    addi a2, zero, 2
-; RV32I-NEXT:    blt a2, a0, .LBB0_3
-; RV32I-NEXT:    jal zero, .LBB0_1
-; RV32I-NEXT:  .LBB0_1: # %entry
-; RV32I-NEXT:    addi a3, zero, 1
-; RV32I-NEXT:    beq a0, a3, .LBB0_5
-; RV32I-NEXT:    jal zero, .LBB0_2
-; RV32I-NEXT:  .LBB0_2: # %entry
-; RV32I-NEXT:    beq a0, a2, .LBB0_6
-; RV32I-NEXT:    jal zero, .LBB0_9
-; RV32I-NEXT:  .LBB0_6: # %bb2
-; RV32I-NEXT:    addi a0, zero, 3
-; RV32I-NEXT:    sw a0, 0(a1)
-; RV32I-NEXT:    jal zero, .LBB0_9
-; RV32I-NEXT:  .LBB0_3: # %entry
-; RV32I-NEXT:    addi a3, zero, 3
-; RV32I-NEXT:    beq a0, a3, .LBB0_7
-; RV32I-NEXT:    jal zero, .LBB0_4
-; RV32I-NEXT:  .LBB0_4: # %entry
-; RV32I-NEXT:    addi a2, zero, 4
-; RV32I-NEXT:    beq a0, a2, .LBB0_8
-; RV32I-NEXT:    jal zero, .LBB0_9
-; RV32I-NEXT:  .LBB0_8: # %bb4
-; RV32I-NEXT:    addi a0, zero, 1
-; RV32I-NEXT:    sw a0, 0(a1)
-; RV32I-NEXT:  .LBB0_9: # %exit
-; RV32I-NEXT:    jalr zero, ra, 0
-; RV32I-NEXT:  .LBB0_5: # %bb1
-; RV32I-NEXT:    addi a0, zero, 4
-; RV32I-NEXT:    sw a0, 0(a1)
-; RV32I-NEXT:    jal zero, .LBB0_9
-; RV32I-NEXT:  .LBB0_7: # %bb3
-; RV32I-NEXT:    sw a2, 0(a1)
-; RV32I-NEXT:    jal zero, .LBB0_9
-entry:
-  switch i32 %in, label %exit [
-    i32 1, label %bb1
-    i32 2, label %bb2
-    i32 3, label %bb3
-    i32 4, label %bb4
-  ]
-bb1:
-  store i32 4, i32* %out
-  br label %exit
-bb2:
-  store i32 3, i32* %out
-  br label %exit
-bb3:
-  store i32 2, i32* %out
-  br label %exit
-bb4:
-  store i32 1, i32* %out
-  br label %exit
-exit:
-  ret void
-}
diff --git a/test/CodeGen/RISCV/lit.local.cfg b/test/CodeGen/RISCV/lit.local.cfg
deleted file mode 100644
index c63820126f8..00000000000
--- a/test/CodeGen/RISCV/lit.local.cfg
+++ /dev/null
@@ -1,2 +0,0 @@
-if not 'RISCV' in config.root.targets:
-    config.unsupported = True
diff --git a/test/CodeGen/RISCV/mem.ll b/test/CodeGen/RISCV/mem.ll
deleted file mode 100644
index 6446034e542..00000000000
--- a/test/CodeGen/RISCV/mem.ll
+++ /dev/null
@@ -1,202 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-; Check indexed and unindexed, sext, zext and anyext loads
-
-define i32 @lb(i8 *%a) nounwind {
-; RV32I-LABEL: lb:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lb a1, 0(a0)
-; RV32I-NEXT:    lb a0, 1(a0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = getelementptr i8, i8* %a, i32 1
-  %2 = load i8, i8* %1
-  %3 = sext i8 %2 to i32
-  ; the unused load will produce an anyext for selection
-  %4 = load volatile i8, i8* %a
-  ret i32 %3
-}
-
-define i32 @lh(i16 *%a) nounwind {
-; RV32I-LABEL: lh:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lh a1, 0(a0)
-; RV32I-NEXT:    lh a0, 4(a0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = getelementptr i16, i16* %a, i32 2
-  %2 = load i16, i16* %1
-  %3 = sext i16 %2 to i32
-  ; the unused load will produce an anyext for selection
-  %4 = load volatile i16, i16* %a
-  ret i32 %3
-}
-
-define i32 @lw(i32 *%a) nounwind {
-; RV32I-LABEL: lw:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lw a1, 0(a0)
-; RV32I-NEXT:    lw a0, 12(a0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = getelementptr i32, i32* %a, i32 3
-  %2 = load i32, i32* %1
-  %3 = load volatile i32, i32* %a
-  ret i32 %2
-}
-
-define i32 @lbu(i8 *%a) nounwind {
-; RV32I-LABEL: lbu:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lbu a1, 0(a0)
-; RV32I-NEXT:    lbu a0, 4(a0)
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = getelementptr i8, i8* %a, i32 4
-  %2 = load i8, i8* %1
-  %3 = zext i8 %2 to i32
-  %4 = load volatile i8, i8* %a
-  %5 = zext i8 %4 to i32
-  %6 = add i32 %3, %5
-  ret i32 %6
-}
-
-define i32 @lhu(i16 *%a) nounwind {
-; RV32I-LABEL: lhu:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lhu a1, 0(a0)
-; RV32I-NEXT:    lhu a0, 10(a0)
-; RV32I-NEXT:    add a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = getelementptr i16, i16* %a, i32 5
-  %2 = load i16, i16* %1
-  %3 = zext i16 %2 to i32
-  %4 = load volatile i16, i16* %a
-  %5 = zext i16 %4 to i32
-  %6 = add i32 %3, %5
-  ret i32 %6
-}
-
-; Check indexed and unindexed stores
-
-define void @sb(i8 *%a, i8 %b) nounwind {
-; RV32I-LABEL: sb:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sb a1, 6(a0)
-; RV32I-NEXT:    sb a1, 0(a0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  store i8 %b, i8* %a
-  %1 = getelementptr i8, i8* %a, i32 6
-  store i8 %b, i8* %1
-  ret void
-}
-
-define void @sh(i16 *%a, i16 %b) nounwind {
-; RV32I-LABEL: sh:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sh a1, 14(a0)
-; RV32I-NEXT:    sh a1, 0(a0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  store i16 %b, i16* %a
-  %1 = getelementptr i16, i16* %a, i32 7
-  store i16 %b, i16* %1
-  ret void
-}
-
-define void @sw(i32 *%a, i32 %b) nounwind {
-; RV32I-LABEL: sw:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw a1, 32(a0)
-; RV32I-NEXT:    sw a1, 0(a0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  store i32 %b, i32* %a
-  %1 = getelementptr i32, i32* %a, i32 8
-  store i32 %b, i32* %1
-  ret void
-}
-
-; Check load and store to an i1 location
-define i32 @load_sext_zext_anyext_i1(i1 *%a) nounwind {
-; RV32I-LABEL: load_sext_zext_anyext_i1:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lb a1, 0(a0)
-; RV32I-NEXT:    lbu a1, 1(a0)
-; RV32I-NEXT:    lbu a0, 2(a0)
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  ; sextload i1
-  %1 = getelementptr i1, i1* %a, i32 1
-  %2 = load i1, i1* %1
-  %3 = sext i1 %2 to i32
-  ; zextload i1
-  %4 = getelementptr i1, i1* %a, i32 2
-  %5 = load i1, i1* %4
-  %6 = zext i1 %5 to i32
-  %7 = add i32 %3, %6
-  ; extload i1 (anyext). Produced as the load is unused.
-  %8 = load volatile i1, i1* %a
-  ret i32 %7
-}
-
-define i16 @load_sext_zext_anyext_i1_i16(i1 *%a) nounwind {
-; RV32I-LABEL: load_sext_zext_anyext_i1_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lb a1, 0(a0)
-; RV32I-NEXT:    lbu a1, 1(a0)
-; RV32I-NEXT:    lbu a0, 2(a0)
-; RV32I-NEXT:    sub a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  ; sextload i1
-  %1 = getelementptr i1, i1* %a, i32 1
-  %2 = load i1, i1* %1
-  %3 = sext i1 %2 to i16
-  ; zextload i1
-  %4 = getelementptr i1, i1* %a, i32 2
-  %5 = load i1, i1* %4
-  %6 = zext i1 %5 to i16
-  %7 = add i16 %3, %6
-  ; extload i1 (anyext). Produced as the load is unused.
-  %8 = load volatile i1, i1* %a
-  ret i16 %7
-}
-
-; Check load and store to a global
-@G = global i32 0
-
-define i32 @lw_sw_global(i32 %a) nounwind {
-; TODO: the addi should be folded in to the lw/sw operations
-; RV32I-LABEL: lw_sw_global:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a1, %hi(G)
-; RV32I-NEXT:    addi a2, a1, %lo(G)
-; RV32I-NEXT:    lw a1, 0(a2)
-; RV32I-NEXT:    sw a0, 0(a2)
-; RV32I-NEXT:    lui a2, %hi(G+36)
-; RV32I-NEXT:    addi a2, a2, %lo(G+36)
-; RV32I-NEXT:    lw a3, 0(a2)
-; RV32I-NEXT:    sw a0, 0(a2)
-; RV32I-NEXT:    addi a0, a1, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = load volatile i32, i32* @G
-  store i32 %a, i32* @G
-  %2 = getelementptr i32, i32* @G, i32 9
-  %3 = load volatile i32, i32* %2
-  store i32 %a, i32* %2
-  ret i32 %1
-}
-
-; Ensure that 1 is added to the high 20 bits if bit 11 of the low part is 1
-define i32 @lw_sw_constant(i32 %a) nounwind {
-; TODO: the addi should be folded in to the lw/sw
-; RV32I-LABEL: lw_sw_constant:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a1, 912092
-; RV32I-NEXT:    addi a2, a1, -273
-; RV32I-NEXT:    lw a1, 0(a2)
-; RV32I-NEXT:    sw a0, 0(a2)
-; RV32I-NEXT:    addi a0, a1, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = inttoptr i32 3735928559 to i32*
-  %2 = load volatile i32, i32* %1
-  store i32 %a, i32* %1
-  ret i32 %2
-}
diff --git a/test/CodeGen/RISCV/mul.ll b/test/CodeGen/RISCV/mul.ll
deleted file mode 100644
index 2eb5db79d1b..00000000000
--- a/test/CodeGen/RISCV/mul.ll
+++ /dev/null
@@ -1,81 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-define i32 @square(i32 %a) {
-; RV32I-LABEL: square:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a1, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a1, %lo(__mulsi3)
-; RV32I-NEXT:    addi a1, a0, 0
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = mul i32 %a, %a
-  ret i32 %1
-}
-
-define i32 @mul(i32 %a, i32 %b) {
-; RV32I-LABEL: mul:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__mulsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = mul i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @mul_constant(i32 %a) {
-; RV32I-LABEL: mul_constant:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a1, %hi(__mulsi3)
-; RV32I-NEXT:    addi a2, a1, %lo(__mulsi3)
-; RV32I-NEXT:    addi a1, zero, 5
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = mul i32 %a, 5
-  ret i32 %1
-}
-
-define i32 @mul_pow2(i32 %a) {
-; RV32I-LABEL: mul_pow2:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slli a0, a0, 3
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = mul i32 %a, 8
-  ret i32 %1
-}
-
-define i64 @mul64(i64 %a, i64 %b) {
-; RV32I-LABEL: mul64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a4, %hi(__muldi3)
-; RV32I-NEXT:    addi a4, a4, %lo(__muldi3)
-; RV32I-NEXT:    jalr ra, a4, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = mul i64 %a, %b
-  ret i64 %1
-}
-
-define i64 @mul64_constant(i64 %a) {
-; RV32I-LABEL: mul64_constant:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__muldi3)
-; RV32I-NEXT:    addi a4, a2, %lo(__muldi3)
-; RV32I-NEXT:    addi a2, zero, 5
-; RV32I-NEXT:    addi a3, zero, 0
-; RV32I-NEXT:    jalr ra, a4, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = mul i64 %a, 5
-  ret i64 %1
-}
diff --git a/test/CodeGen/RISCV/rem.ll b/test/CodeGen/RISCV/rem.ll
deleted file mode 100644
index c9e2a90521d..00000000000
--- a/test/CodeGen/RISCV/rem.ll
+++ /dev/null
@@ -1,29 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-define i32 @urem(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: urem:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__umodsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__umodsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = urem i32 %a, %b
-  ret i32 %1
-}
-
-define i32 @srem(i32 %a, i32 %b) nounwind {
-; RV32I-LABEL: srem:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a2, %hi(__modsi3)
-; RV32I-NEXT:    addi a2, a2, %lo(__modsi3)
-; RV32I-NEXT:    jalr ra, a2, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = srem i32 %a, %b
-  ret i32 %1
-}
diff --git a/test/CodeGen/RISCV/rotl-rotr.ll b/test/CodeGen/RISCV/rotl-rotr.ll
deleted file mode 100644
index b2331051fcd..00000000000
--- a/test/CodeGen/RISCV/rotl-rotr.ll
+++ /dev/null
@@ -1,38 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-; These IR sequences will generate ISD::ROTL and ISD::ROTR nodes, that the
-; RISC-V backend must be able to select
-
-define i32 @rotl(i32 %x, i32 %y) {
-; RV32I-LABEL: rotl:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a2, zero, 32
-; RV32I-NEXT:    sub a2, a2, a1
-; RV32I-NEXT:    sll a1, a0, a1
-; RV32I-NEXT:    srl a0, a0, a2
-; RV32I-NEXT:    or a0, a1, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %z = sub i32 32, %y
-  %b = shl i32 %x, %y
-  %c = lshr i32 %x, %z
-  %d = or i32 %b, %c
-  ret i32 %d
-}
-
-define i32 @rotr(i32 %x, i32 %y) {
-; RV32I-LABEL: rotr:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a2, zero, 32
-; RV32I-NEXT:    sub a2, a2, a1
-; RV32I-NEXT:    srl a1, a0, a1
-; RV32I-NEXT:    sll a0, a0, a2
-; RV32I-NEXT:    or a0, a1, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %z = sub i32 32, %y
-  %b = lshr i32 %x, %y
-  %c = shl i32 %x, %z
-  %d = or i32 %b, %c
-  ret i32 %d
-}
diff --git a/test/CodeGen/RISCV/select-cc.ll b/test/CodeGen/RISCV/select-cc.ll
deleted file mode 100644
index ddc5983525e..00000000000
--- a/test/CodeGen/RISCV/select-cc.ll
+++ /dev/null
@@ -1,100 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck -check-prefix=RV32I %s
-
-define i32 @foo(i32 %a, i32 *%b) {
-; RV32I-LABEL: foo:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    beq a0, a2, .LBB0_2
-; RV32I-NEXT:  # %bb.1:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_2:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    bne a0, a2, .LBB0_4
-; RV32I-NEXT:  # %bb.3:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_4:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    bltu a2, a0, .LBB0_6
-; RV32I-NEXT:  # %bb.5:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_6:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    bgeu a0, a2, .LBB0_8
-; RV32I-NEXT:  # %bb.7:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_8:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    bltu a0, a2, .LBB0_10
-; RV32I-NEXT:  # %bb.9:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_10:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    bgeu a2, a0, .LBB0_12
-; RV32I-NEXT:  # %bb.11:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_12:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    blt a2, a0, .LBB0_14
-; RV32I-NEXT:  # %bb.13:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_14:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    bge a0, a2, .LBB0_16
-; RV32I-NEXT:  # %bb.15:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_16:
-; RV32I-NEXT:    lw a2, 0(a1)
-; RV32I-NEXT:    blt a0, a2, .LBB0_18
-; RV32I-NEXT:  # %bb.17:
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:  .LBB0_18:
-; RV32I-NEXT:    lw a1, 0(a1)
-; RV32I-NEXT:    bge a1, a0, .LBB0_20
-; RV32I-NEXT:  # %bb.19:
-; RV32I-NEXT:    addi a0, a1, 0
-; RV32I-NEXT:  .LBB0_20:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %val1 = load volatile i32, i32* %b
-  %tst1 = icmp eq i32 %a, %val1
-  %val2 = select i1 %tst1, i32 %a, i32 %val1
-
-  %val3 = load volatile i32, i32* %b
-  %tst2 = icmp ne i32 %val2, %val3
-  %val4 = select i1 %tst2, i32 %val2, i32 %val3
-
-  %val5 = load volatile i32, i32* %b
-  %tst3 = icmp ugt i32 %val4, %val5
-  %val6 = select i1 %tst3, i32 %val4, i32 %val5
-
-  %val7 = load volatile i32, i32* %b
-  %tst4 = icmp uge i32 %val6, %val7
-  %val8 = select i1 %tst4, i32 %val6, i32 %val7
-
-  %val9 = load volatile i32, i32* %b
-  %tst5 = icmp ult i32 %val8, %val9
-  %val10 = select i1 %tst5, i32 %val8, i32 %val9
-
-  %val11 = load volatile i32, i32* %b
-  %tst6 = icmp ule i32 %val10, %val11
-  %val12 = select i1 %tst6, i32 %val10, i32 %val11
-
-  %val13 = load volatile i32, i32* %b
-  %tst7 = icmp sgt i32 %val12, %val13
-  %val14 = select i1 %tst7, i32 %val12, i32 %val13
-
-  %val15 = load volatile i32, i32* %b
-  %tst8 = icmp sge i32 %val14, %val15
-  %val16 = select i1 %tst8, i32 %val14, i32 %val15
-
-  %val17 = load volatile i32, i32* %b
-  %tst9 = icmp slt i32 %val16, %val17
-  %val18 = select i1 %tst9, i32 %val16, i32 %val17
-
-  %val19 = load volatile i32, i32* %b
-  %tst10 = icmp sle i32 %val18, %val19
-  %val20 = select i1 %tst10, i32 %val18, i32 %val19
-
-  ret i32 %val20
-}
diff --git a/test/CodeGen/RISCV/sext-zext-trunc.ll b/test/CodeGen/RISCV/sext-zext-trunc.ll
deleted file mode 100644
index 80bd2d2b204..00000000000
--- a/test/CodeGen/RISCV/sext-zext-trunc.ll
+++ /dev/null
@@ -1,285 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-define i8 @sext_i1_to_i8(i1 %a) {
-; RV32I-LABEL: sext_i1_to_i8:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    sub a0, zero, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i1 %a to i8
-  ret i8 %1
-}
-
-define i16 @sext_i1_to_i16(i1 %a) {
-; RV32I-LABEL: sext_i1_to_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    sub a0, zero, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i1 %a to i16
-  ret i16 %1
-}
-
-define i32 @sext_i1_to_i32(i1 %a) {
-; RV32I-LABEL: sext_i1_to_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    sub a0, zero, a0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i1 %a to i32
-  ret i32 %1
-}
-
-define i64 @sext_i1_to_i64(i1 %a) {
-; RV32I-LABEL: sext_i1_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    sub a0, zero, a0
-; RV32I-NEXT:    addi a1, a0, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i1 %a to i64
-  ret i64 %1
-}
-
-define i16 @sext_i8_to_i16(i8 %a) {
-; RV32I-LABEL: sext_i8_to_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slli a0, a0, 24
-; RV32I-NEXT:    srai a0, a0, 24
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i8 %a to i16
-  ret i16 %1
-}
-
-define i32 @sext_i8_to_i32(i8 %a) {
-; RV32I-LABEL: sext_i8_to_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slli a0, a0, 24
-; RV32I-NEXT:    srai a0, a0, 24
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i8 %a to i32
-  ret i32 %1
-}
-
-define i64 @sext_i8_to_i64(i8 %a) {
-; RV32I-LABEL: sext_i8_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slli a1, a0, 24
-; RV32I-NEXT:    srai a0, a1, 24
-; RV32I-NEXT:    srai a1, a1, 31
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i8 %a to i64
-  ret i64 %1
-}
-
-define i32 @sext_i16_to_i32(i16 %a) {
-; RV32I-LABEL: sext_i16_to_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slli a0, a0, 16
-; RV32I-NEXT:    srai a0, a0, 16
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i16 %a to i32
-  ret i32 %1
-}
-
-define i64 @sext_i16_to_i64(i16 %a) {
-; RV32I-LABEL: sext_i16_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    slli a1, a0, 16
-; RV32I-NEXT:    srai a0, a1, 16
-; RV32I-NEXT:    srai a1, a1, 31
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i16 %a to i64
-  ret i64 %1
-}
-
-define i64 @sext_i32_to_i64(i32 %a) {
-; RV32I-LABEL: sext_i32_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    srai a1, a0, 31
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = sext i32 %a to i64
-  ret i64 %1
-}
-
-define i8 @zext_i1_to_i8(i1 %a) {
-; RV32I-LABEL: zext_i1_to_i8:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i1 %a to i8
-  ret i8 %1
-}
-
-define i16 @zext_i1_to_i16(i1 %a) {
-; RV32I-LABEL: zext_i1_to_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i1 %a to i16
-  ret i16 %1
-}
-
-define i32 @zext_i1_to_i32(i1 %a) {
-; RV32I-LABEL: zext_i1_to_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i1 %a to i32
-  ret i32 %1
-}
-
-define i64 @zext_i1_to_i64(i1 %a) {
-; RV32I-LABEL: zext_i1_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 1
-; RV32I-NEXT:    addi a1, zero, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i1 %a to i64
-  ret i64 %1
-}
-
-define i16 @zext_i8_to_i16(i8 %a) {
-; RV32I-LABEL: zext_i8_to_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 255
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i8 %a to i16
-  ret i16 %1
-}
-
-define i32 @zext_i8_to_i32(i8 %a) {
-; RV32I-LABEL: zext_i8_to_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 255
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i8 %a to i32
-  ret i32 %1
-}
-
-define i64 @zext_i8_to_i64(i8 %a) {
-; RV32I-LABEL: zext_i8_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    andi a0, a0, 255
-; RV32I-NEXT:    addi a1, zero, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i8 %a to i64
-  ret i64 %1
-}
-
-define i32 @zext_i16_to_i32(i16 %a) {
-; RV32I-LABEL: zext_i16_to_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a1, 16
-; RV32I-NEXT:    addi a1, a1, -1
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i16 %a to i32
-  ret i32 %1
-}
-
-define i64 @zext_i16_to_i64(i16 %a) {
-; RV32I-LABEL: zext_i16_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a1, 16
-; RV32I-NEXT:    addi a1, a1, -1
-; RV32I-NEXT:    and a0, a0, a1
-; RV32I-NEXT:    addi a1, zero, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i16 %a to i64
-  ret i64 %1
-}
-
-define i64 @zext_i32_to_i64(i32 %a) {
-; RV32I-LABEL: zext_i32_to_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    addi a1, zero, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = zext i32 %a to i64
-  ret i64 %1
-}
-
-; TODO: should the trunc tests explicitly ensure no code is generated before
-; jalr?
-
-define i1 @trunc_i8_to_i1(i8 %a) {
-; RV32I-LABEL: trunc_i8_to_i1:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i8 %a to i1
-  ret i1 %1
-}
-
-define i1 @trunc_i16_to_i1(i16 %a) {
-; RV32I-LABEL: trunc_i16_to_i1:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i16 %a to i1
-  ret i1 %1
-}
-
-define i1 @trunc_i32_to_i1(i32 %a) {
-; RV32I-LABEL: trunc_i32_to_i1:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i32 %a to i1
-  ret i1 %1
-}
-
-define i1 @trunc_i64_to_i1(i64 %a) {
-; RV32I-LABEL: trunc_i64_to_i1:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i64 %a to i1
-  ret i1 %1
-}
-
-define i8 @trunc_i16_to_i8(i16 %a) {
-; RV32I-LABEL: trunc_i16_to_i8:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i16 %a to i8
-  ret i8 %1
-}
-
-define i8 @trunc_i32_to_i8(i32 %a) {
-; RV32I-LABEL: trunc_i32_to_i8:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i32 %a to i8
-  ret i8 %1
-}
-
-define i8 @trunc_i64_to_i8(i64 %a) {
-; RV32I-LABEL: trunc_i64_to_i8:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i64 %a to i8
-  ret i8 %1
-}
-
-define i16 @trunc_i32_to_i16(i32 %a) {
-; RV32I-LABEL: trunc_i32_to_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i32 %a to i16
-  ret i16 %1
-}
-
-define i16 @trunc_i64_to_i16(i64 %a) {
-; RV32I-LABEL: trunc_i64_to_i16:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i64 %a to i16
-  ret i16 %1
-}
-
-define i32 @trunc_i64_to_i32(i64 %a) {
-; RV32I-LABEL: trunc_i64_to_i32:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = trunc i64 %a to i32
-  ret i32 %1
-}
diff --git a/test/CodeGen/RISCV/shifts.ll b/test/CodeGen/RISCV/shifts.ll
deleted file mode 100644
index c4033c574ef..00000000000
--- a/test/CodeGen/RISCV/shifts.ll
+++ /dev/null
@@ -1,45 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-; Basic shift support is tested as part of ALU.ll. This file ensures that
-; shifts which may not be supported natively are lowered properly.
-
-define i64 @lshr64(i64 %a, i64 %b) nounwind {
-; RV32I-LABEL: lshr64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a3, %hi(__lshrdi3)
-; RV32I-NEXT:    addi a3, a3, %lo(__lshrdi3)
-; RV32I-NEXT:    jalr ra, a3, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = lshr i64 %a, %b
-  ret i64 %1
-}
-
-define i64 @ashr64(i64 %a, i64 %b) nounwind {
-; RV32I-LABEL: ashr64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a3, %hi(__ashrdi3)
-; RV32I-NEXT:    addi a3, a3, %lo(__ashrdi3)
-; RV32I-NEXT:    jalr ra, a3, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = ashr i64 %a, %b
-  ret i64 %1
-}
-
-define i64 @shl64(i64 %a, i64 %b) nounwind {
-; RV32I-LABEL: shl64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    sw ra, 12(s0)
-; RV32I-NEXT:    lui a3, %hi(__ashldi3)
-; RV32I-NEXT:    addi a3, a3, %lo(__ashldi3)
-; RV32I-NEXT:    jalr ra, a3, 0
-; RV32I-NEXT:    lw ra, 12(s0)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = shl i64 %a, %b
-  ret i64 %1
-}
diff --git a/test/CodeGen/RISCV/wide-mem.ll b/test/CodeGen/RISCV/wide-mem.ll
deleted file mode 100644
index cbb89f631a5..00000000000
--- a/test/CodeGen/RISCV/wide-mem.ll
+++ /dev/null
@@ -1,34 +0,0 @@
-; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
-; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
-; RUN:   | FileCheck %s -check-prefix=RV32I
-
-; Check load/store operations on values wider than what is natively supported
-
-define i64 @load_i64(i64 *%a) nounwind {
-; RV32I-LABEL: load_i64:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lw a2, 0(a0)
-; RV32I-NEXT:    lw a1, 4(a0)
-; RV32I-NEXT:    addi a0, a2, 0
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = load i64, i64* %a
-  ret i64 %1
-}
-
-@val64 = local_unnamed_addr global i64 2863311530, align 8
-
-; TODO: codegen on this should be improved. It shouldn't be necessary to
-; generate two addi
-define i64 @load_i64_global() nounwind {
-; RV32I-LABEL: load_i64_global:
-; RV32I:       # %bb.0:
-; RV32I-NEXT:    lui a0, %hi(val64)
-; RV32I-NEXT:    addi a0, a0, %lo(val64)
-; RV32I-NEXT:    lw a0, 0(a0)
-; RV32I-NEXT:    lui a1, %hi(val64+4)
-; RV32I-NEXT:    addi a1, a1, %lo(val64+4)
-; RV32I-NEXT:    lw a1, 0(a1)
-; RV32I-NEXT:    jalr zero, ra, 0
-  %1 = load i64, i64* @val64
-  ret i64 %1
-}
diff --git a/test/MC/RISCV/elf-header.s b/test/MC/RISCV/elf-header.s
deleted file mode 100644
index 29a7036f2fc..00000000000
--- a/test/MC/RISCV/elf-header.s
+++ /dev/null
@@ -1,42 +0,0 @@
-# RUN: llvm-mc %s -filetype=obj -triple=riscv32 | llvm-readobj -h \
-# RUN:     | FileCheck -check-prefix=RV32 %s
-# RUN: llvm-mc %s -filetype=obj -triple=riscv64 | llvm-readobj -h \
-# RUN:     | FileCheck -check-prefix=RV64 %s
-
-# RV32: Format: ELF32-riscv
-# RV32: Arch: riscv32
-# RV32: AddressSize: 32bit
-# RV32: ElfHeader {
-# RV32:   Ident {
-# RV32:     Magic: (7F 45 4C 46)
-# RV32:     Class: 32-bit (0x1)
-# RV32:     DataEncoding: LittleEndian (0x1)
-# RV32:     FileVersion: 1
-# RV32:     OS/ABI: SystemV (0x0)
-# RV32:     ABIVersion: 0
-# RV32:   }
-# RV32:   Type: Relocatable (0x1)
-# RV32:   Machine: EM_RISCV (0xF3)
-# RV32:   Version: 1
-# RV32:   Flags [ (0x0)
-# RV32:   ]
-# RV32: }
-
-# RV64: Format: ELF64-riscv
-# RV64: Arch: riscv64
-# RV64: AddressSize: 64bit
-# RV64: ElfHeader {
-# RV64:   Ident {
-# RV64:     Magic: (7F 45 4C 46)
-# RV64:     Class: 64-bit (0x2)
-# RV64:     DataEncoding: LittleEndian (0x1)
-# RV64:     FileVersion: 1
-# RV64:     OS/ABI: SystemV (0x0)
-# RV64:     ABIVersion: 0
-# RV64:   }
-# RV64:   Type: Relocatable (0x1)
-# RV64:   Machine: EM_RISCV (0xF3)
-# RV64:   Version: 1
-# RV64:   Flags [ (0x0)
-# RV64:   ]
-# RV64: }
diff --git a/test/MC/RISCV/fixups-compressed.s b/test/MC/RISCV/fixups-compressed.s
deleted file mode 100644
index bf6cbfc3556..00000000000
--- a/test/MC/RISCV/fixups-compressed.s
+++ /dev/null
@@ -1,18 +0,0 @@
-# RUN: llvm-mc %s -triple riscv32 -mattr=+c -show-encoding \
-# RUN:     | FileCheck -check-prefix=CHECK-FIXUP %s
-# RUN: llvm-mc -triple riscv32 -filetype=obj -mattr=+c < %s \
-# RUN:     | llvm-objdump -mattr=+c -d - | FileCheck -check-prefix=CHECK-INSTR %s
-
-.LBB0_2:
-# CHECK-FIXUP:   fixup A - offset: 0, value: .LBB0_2, kind: fixup_riscv_rvc_jump
-# CHECK-INSTR: c.j     0
-c.j     .LBB0_2
-# CHECK:   fixup A - offset: 0, value: func1, kind: fixup_riscv_rvc_jump
-# CHECK-INSTR: c.jal   0
-c.jal   func1
-# CHECK-FIXUP:   fixup A - offset: 0, value: .LBB0_2, kind: fixup_riscv_rvc_branch
-# CHECK-INSTR: c.beqz  a3, -4
-c.beqz  a3, .LBB0_2
-# CHECK-FIXUP:   fixup A - offset: 0, value: .LBB0_2, kind: fixup_riscv_rvc_branch
-# CHECK-INSTR: c.bnez  a5, -6
-c.bnez  a5, .LBB0_2
diff --git a/test/MC/RISCV/fixups-diagnostics.s b/test/MC/RISCV/fixups-diagnostics.s
deleted file mode 100644
index d346605221c..00000000000
--- a/test/MC/RISCV/fixups-diagnostics.s
+++ /dev/null
@@ -1,18 +0,0 @@
-# RUN: not llvm-mc -triple riscv32 -filetype obj < %s -o /dev/null 2>&1 | FileCheck %s
-
-  jal a0, far_distant # CHECK: :[[@LINE]]:3: error: fixup value out of range
-  jal a0, unaligned # CHECK: :[[@LINE]]:3: error: fixup value must be 2-byte aligned
-
-  beq a0, a1, distant # CHECK: :[[@LINE]]:3: error: fixup value out of range
-  blt t0, t1, unaligned # CHECK: :[[@LINE]]:3: error: fixup value must be 2-byte aligned
-
-  .byte 0
-unaligned:
-  .byte 0
-  .byte 0
-  .byte 0
-
-  .space 1<<12
-distant:
-  .space 1<<20
-far_distant:
diff --git a/test/MC/RISCV/fixups.s b/test/MC/RISCV/fixups.s
deleted file mode 100644
index 19cc6922d6d..00000000000
--- a/test/MC/RISCV/fixups.s
+++ /dev/null
@@ -1,49 +0,0 @@
-# RUN: llvm-mc -triple riscv32 < %s -show-encoding \
-# RUN:     | FileCheck -check-prefix=CHECK-FIXUP %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 < %s \
-# RUN:     | llvm-objdump -d - | FileCheck -check-prefix=CHECK-INSTR %s
-# RUN: llvm-mc -filetype=obj -triple=riscv32 %s \
-# RUN:     | llvm-readobj -r | FileCheck %s -check-prefix=CHECK-REL
-
-# Checks that fixups that can be resolved within the same object file are
-# applied correctly
-
-.LBB0:
-lui t1, %hi(val)
-# CHECK-FIXUP: fixup A - offset: 0, value: %hi(val), kind: fixup_riscv_hi20
-# CHECK-INSTR: lui t1, 74565
-
-lw a0, %lo(val)(t1)
-# CHECK-FIXUP: fixup A - offset: 0, value: %lo(val), kind: fixup_riscv_lo12_i
-# CHECK-INSTR: lw a0, 1656(t1)
-addi a1, t1, %lo(val)
-# CHECK-FIXUP: fixup A - offset: 0, value: %lo(val), kind: fixup_riscv_lo12_i
-# CHECK-INSTR: addi a1, t1, 1656
-sw a0, %lo(val)(t1)
-# CHECK-FIXUP: fixup A - offset: 0, value: %lo(val), kind: fixup_riscv_lo12_s
-# CHECK-INSTR: sw a0, 1656(t1)
-
-jal zero, .LBB0
-# CHECK-FIXUP: fixup A - offset: 0, value: .LBB0, kind: fixup_riscv_jal
-# CHECK-INSTR: jal zero, -16
-jal zero, .LBB2
-# CHECK-FIXUP: fixup A - offset: 0, value: .LBB2, kind: fixup_riscv_jal
-# CHECK-INSTR: jal zero, 330996
-beq a0, a1, .LBB0
-# CHECK-FIXUP: fixup A - offset: 0, value: .LBB0, kind: fixup_riscv_branch
-# CHECK-INSTR: beq a0, a1, -24
-blt a0, a1, .LBB1
-# CHECK-FIXUP: fixup A - offset: 0, value: .LBB1, kind: fixup_riscv_branch
-# CHECK-INSTR: blt a0, a1, 1108
-
-.fill 1104
-
-.LBB1:
-
-.fill 329876
-addi zero, zero, 0
-.LBB2:
-
-.set val, 0x12345678
-
-# CHECK-REL-NOT: R_RISCV
diff --git a/test/MC/RISCV/hilo-constaddr.s b/test/MC/RISCV/hilo-constaddr.s
deleted file mode 100644
index 691401f0bab..00000000000
--- a/test/MC/RISCV/hilo-constaddr.s
+++ /dev/null
@@ -1,39 +0,0 @@
-# RUN: llvm-mc -filetype=obj -triple=riscv32 %s \
-# RUN:  | llvm-objdump -d - | FileCheck %s -check-prefix=CHECK-INSTR
-
-# RUN: llvm-mc -filetype=obj -triple=riscv32 %s \
-# RUN:  | llvm-readobj -r | FileCheck %s -check-prefix=CHECK-REL
-
-# Check the assembler can handle hi and lo expressions with a constant 
-# address, and constant expressions involving labels. Test case derived from 
-# test/MC/Mips/hilo-addressing.s
-
-# Check that 1 is added to the high 20 bits if bit 11 of the low part is 1.
-.equ addr, 0xdeadbeef
-  lui t0, %hi(addr)
-  lw ra, %lo(addr)(t0)
-# CHECK-INSTR: lui t0, 912092
-# CHECK-INSTR: lw ra, -273(t0)
-
-# Check that assembler can handle %hi(label1 - label2) and %lo(label1 - label2)
-# expressions.
-
-tmp1:
-  # Emit zeros so that difference between tmp1 and tmp3 is 0x30124 bytes.
-  .fill 0x30124-8
-tmp2:
-  lui t0, %hi(tmp3-tmp1)
-  lw ra, %lo(tmp3-tmp1)(t0)
-# CHECK-INSTR: lui t0, 48
-# CHECK-INSTR: lw ra, 292(t0)
-
-tmp3:
-  lui t1, %hi(tmp2-tmp3)
-  lw sp, %lo(tmp2-tmp3)(t1)
-# CHECK-INSTR: lui t1, 0
-# CHECK-INSTR: lw sp, -8(t1)
-
-# Check that a relocation isn't emitted for %hi(label1 - label2) and
-# %lo(label1 - label2) expressions.
-
-# CHECK-REL-NOT: R_RISCV
diff --git a/test/MC/RISCV/lit.local.cfg b/test/MC/RISCV/lit.local.cfg
deleted file mode 100644
index d0b081e3e8b..00000000000
--- a/test/MC/RISCV/lit.local.cfg
+++ /dev/null
@@ -1,3 +0,0 @@
-if not 'RISCV' in config.root.targets:
-    config.unsupported = True
-
diff --git a/test/MC/RISCV/relocations.s b/test/MC/RISCV/relocations.s
deleted file mode 100644
index a6009b0ad67..00000000000
--- a/test/MC/RISCV/relocations.s
+++ /dev/null
@@ -1,75 +0,0 @@
-# RUN: llvm-mc -triple riscv32 -mattr=+c < %s -show-encoding \
-# RUN:     | FileCheck -check-prefix=INSTR -check-prefix=FIXUP %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+c < %s \
-# RUN:     | llvm-readobj -r | FileCheck -check-prefix=RELOC %s
-
-# Check prefixes:
-# RELOC - Check the relocation in the object.
-# FIXUP - Check the fixup on the instruction.
-# INSTR - Check the instruction is handled properly by the ASMPrinter
-
-.long foo
-# RELOC: R_RISCV_32 foo
-
-.quad foo
-# RELOC: R_RISCV_64 foo
-
-lui t1, %hi(foo)
-# RELOC: R_RISCV_HI20 foo 0x0
-# INSTR: lui t1, %hi(foo)
-# FIXUP: fixup A - offset: 0, value: %hi(foo), kind: fixup_riscv_hi20
-
-lui t1, %hi(foo+4)
-# RELOC: R_RISCV_HI20 foo 0x4
-# INSTR: lui t1, %hi(foo+4)
-# FIXUP: fixup A - offset: 0, value: %hi(foo+4), kind: fixup_riscv_hi20
-
-addi t1, t1, %lo(foo)
-# RELOC: R_RISCV_LO12_I foo 0x0
-# INSTR: addi t1, t1, %lo(foo)
-# FIXUP: fixup A - offset: 0, value: %lo(foo), kind: fixup_riscv_lo12_i
-
-addi t1, t1, %lo(foo+4)
-# RELOC: R_RISCV_LO12_I foo 0x4
-# INSTR: addi t1, t1, %lo(foo+4)
-# FIXUP: fixup A - offset: 0, value: %lo(foo+4), kind: fixup_riscv_lo12_i
-
-sb t1, %lo(foo)(a2)
-# RELOC: R_RISCV_LO12_S foo 0x0
-# INSTR: sb t1, %lo(foo)(a2)
-# FIXUP: fixup A - offset: 0, value: %lo(foo), kind: fixup_riscv_lo12_s
-
-sb t1, %lo(foo+4)(a2)
-# RELOC: R_RISCV_LO12_S foo 0x4
-# INSTR: sb t1, %lo(foo+4)(a2)
-# FIXUP: fixup A - offset: 0, value: %lo(foo+4), kind: fixup_riscv_lo12_s
-
-auipc t1, %pcrel_hi(foo)
-# RELOC: R_RISCV_PCREL_HI20 foo 0x0
-# INSTR: auipc t1, %pcrel_hi(foo)
-# FIXUP: fixup A - offset: 0, value: %pcrel_hi(foo), kind: fixup_riscv_pcrel_hi20
-
-auipc t1, %pcrel_hi(foo+4)
-# RELOC: R_RISCV_PCREL_HI20 foo 0x4
-# INSTR: auipc t1, %pcrel_hi(foo+4)
-# FIXUP: fixup A - offset: 0, value: %pcrel_hi(foo+4), kind: fixup_riscv_pcrel_hi20
-
-jal zero, foo
-# RELOC: R_RISCV_JAL
-# INSTR: jal zero, foo
-# FIXUP: fixup A - offset: 0, value: foo, kind: fixup_riscv_jal
-
-bgeu a0, a1, foo
-# RELOC: R_RISCV_BRANCH
-# INSTR: bgeu a0, a1, foo
-# FIXUP: fixup A - offset: 0, value: foo, kind: fixup_riscv_branch
-
-c.jal foo
-# RELOC: R_RISCV_RVC_JUMP
-# INSTR: c.jal foo
-# FIXUP: fixup A - offset: 0, value: foo, kind: fixup_riscv_rvc_jump
-
-c.bnez a0, foo
-# RELOC: R_RISCV_RVC_BRANCH
-# INSTR: c.bnez a0, foo
-# FIXUP: fixup A - offset: 0, value: foo, kind: fixup_riscv_rvc_branch
diff --git a/test/MC/RISCV/rv32a-invalid.s b/test/MC/RISCV/rv32a-invalid.s
deleted file mode 100644
index 8ee21bc501b..00000000000
--- a/test/MC/RISCV/rv32a-invalid.s
+++ /dev/null
@@ -1,17 +0,0 @@
-# RUN: not llvm-mc -triple riscv32 -mattr=+a < %s 2>&1 | FileCheck %s
-
-# Final operand must have parentheses
-amoswap.w a1, a2, a3 # CHECK: :[[@LINE]]:19: error: invalid operand for instruction
-amomin.w a1, a2, 1 # CHECK: :[[@LINE]]:18: error: invalid operand for instruction
-lr.w a4, a5 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-
-# Only .aq, .rl, and .aqrl suffixes are valid
-amoxor.w.rlqa a2, a3, (a4) # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-amoor.w.aq.rl a4, a5, (a6) # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-amoor.w. a4, a5, (a6) # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-
-# lr only takes two operands
-lr.w s0, (s1), s2 # CHECK: :[[@LINE]]:16: error: invalid operand for instruction
-
-# Note: errors for use of RV64A instructions for RV32 are checked in
-# rv64a-valid.s
diff --git a/test/MC/RISCV/rv32a-valid.s b/test/MC/RISCV/rv32a-valid.s
deleted file mode 100644
index cf94218a94e..00000000000
--- a/test/MC/RISCV/rv32a-valid.s
+++ /dev/null
@@ -1,146 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv32 -mattr=+a -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+a -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+a < %s \
-# RUN:     | llvm-objdump -mattr=+a -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+a < %s \
-# RUN:     | llvm-objdump -mattr=+a -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# CHECK-INST: lr.w t0, (t1)
-# CHECK: encoding: [0xaf,0x22,0x03,0x10]
-lr.w t0, (t1)
-# CHECK-INST: lr.w.aq t1, (t2)
-# CHECK: encoding: [0x2f,0xa3,0x03,0x14]
-lr.w.aq t1, (t2)
-# CHECK-INST: lr.w.rl t2, (t3)
-# CHECK: encoding: [0xaf,0x23,0x0e,0x12]
-lr.w.rl t2, (t3)
-# CHECK-INST: lr.w.aqrl t3, (t4)
-# CHECK: encoding: [0x2f,0xae,0x0e,0x16]
-lr.w.aqrl t3, (t4)
-
-# CHECK-INST: sc.w t6, t5, (t4)
-# CHECK: encoding: [0xaf,0xaf,0xee,0x19]
-sc.w t6, t5, (t4)
-# CHECK-INST: sc.w.aq t5, t4, (t3)
-# CHECK: encoding: [0x2f,0x2f,0xde,0x1d]
-sc.w.aq t5, t4, (t3)
-# CHECK-INST: sc.w.rl t4, t3, (t2)
-# CHECK: encoding: [0xaf,0xae,0xc3,0x1b]
-sc.w.rl t4, t3, (t2)
-# CHECK-INST: sc.w.aqrl t3, t2, (t1)
-# CHECK: encoding: [0x2f,0x2e,0x73,0x1e]
-sc.w.aqrl t3, t2, (t1)
-
-# CHECK-INST: amoswap.w a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x27,0x14,0x08]
-amoswap.w a4, ra, (s0)
-# CHECK-INST: amoadd.w a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xa5,0xc6,0x00]
-amoadd.w a1, a2, (a3)
-# CHECK-INST: amoxor.w a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x26,0xd7,0x20]
-amoxor.w a2, a3, (a4)
-# CHECK-INST: amoand.w a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xa6,0xe7,0x60]
-amoand.w a3, a4, (a5)
-# CHECK-INST: amoor.w a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x27,0xf8,0x40]
-amoor.w a4, a5, (a6)
-# CHECK-INST: amomin.w a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xa7,0x08,0x81]
-amomin.w a5, a6, (a7)
-# CHECK-INST: amomax.w s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xab,0x6a,0xa1]
-amomax.w s7, s6, (s5)
-# CHECK-INST: amominu.w s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x2b,0x5a,0xc1]
-amominu.w s6, s5, (s4)
-# CHECK-INST: amomaxu.w s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xaa,0x49,0xe1]
-amomaxu.w s5, s4, (s3)
-
-# CHECK-INST: amoswap.w.aq a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x27,0x14,0x0c]
-amoswap.w.aq a4, ra, (s0)
-# CHECK-INST: amoadd.w.aq a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xa5,0xc6,0x04]
-amoadd.w.aq a1, a2, (a3)
-# CHECK-INST: amoxor.w.aq a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x26,0xd7,0x24]
-amoxor.w.aq a2, a3, (a4)
-# CHECK-INST: amoand.w.aq a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xa6,0xe7,0x64]
-amoand.w.aq a3, a4, (a5)
-# CHECK-INST: amoor.w.aq a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x27,0xf8,0x44]
-amoor.w.aq a4, a5, (a6)
-# CHECK-INST: amomin.w.aq a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xa7,0x08,0x85]
-amomin.w.aq a5, a6, (a7)
-# CHECK-INST: amomax.w.aq s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xab,0x6a,0xa5]
-amomax.w.aq s7, s6, (s5)
-# CHECK-INST: amominu.w.aq s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x2b,0x5a,0xc5]
-amominu.w.aq s6, s5, (s4)
-# CHECK-INST: amomaxu.w.aq s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xaa,0x49,0xe5]
-amomaxu.w.aq s5, s4, (s3)
-
-# CHECK-INST: amoswap.w.rl a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x27,0x14,0x0a]
-amoswap.w.rl a4, ra, (s0)
-# CHECK-INST: amoadd.w.rl a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xa5,0xc6,0x02]
-amoadd.w.rl a1, a2, (a3)
-# CHECK-INST: amoxor.w.rl a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x26,0xd7,0x22]
-amoxor.w.rl a2, a3, (a4)
-# CHECK-INST: amoand.w.rl a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xa6,0xe7,0x62]
-amoand.w.rl a3, a4, (a5)
-# CHECK-INST: amoor.w.rl a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x27,0xf8,0x42]
-amoor.w.rl a4, a5, (a6)
-# CHECK-INST: amomin.w.rl a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xa7,0x08,0x83]
-amomin.w.rl a5, a6, (a7)
-# CHECK-INST: amomax.w.rl s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xab,0x6a,0xa3]
-amomax.w.rl s7, s6, (s5)
-# CHECK-INST: amominu.w.rl s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x2b,0x5a,0xc3]
-amominu.w.rl s6, s5, (s4)
-# CHECK-INST: amomaxu.w.rl s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xaa,0x49,0xe3]
-amomaxu.w.rl s5, s4, (s3)
-
-# CHECK-INST: amoswap.w.aqrl a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x27,0x14,0x0e]
-amoswap.w.aqrl a4, ra, (s0)
-# CHECK-INST: amoadd.w.aqrl a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xa5,0xc6,0x06]
-amoadd.w.aqrl a1, a2, (a3)
-# CHECK-INST: amoxor.w.aqrl a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x26,0xd7,0x26]
-amoxor.w.aqrl a2, a3, (a4)
-# CHECK-INST: amoand.w.aqrl a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xa6,0xe7,0x66]
-amoand.w.aqrl a3, a4, (a5)
-# CHECK-INST: amoor.w.aqrl a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x27,0xf8,0x46]
-amoor.w.aqrl a4, a5, (a6)
-# CHECK-INST: amomin.w.aqrl a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xa7,0x08,0x87]
-amomin.w.aqrl a5, a6, (a7)
-# CHECK-INST: amomax.w.aqrl s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xab,0x6a,0xa7]
-amomax.w.aqrl s7, s6, (s5)
-# CHECK-INST: amominu.w.aqrl s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x2b,0x5a,0xc7]
-amominu.w.aqrl s6, s5, (s4)
-# CHECK-INST: amomaxu.w.aqrl s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xaa,0x49,0xe7]
-amomaxu.w.aqrl s5, s4, (s3)
diff --git a/test/MC/RISCV/rv32c-invalid.s b/test/MC/RISCV/rv32c-invalid.s
deleted file mode 100644
index 639148bb4ff..00000000000
--- a/test/MC/RISCV/rv32c-invalid.s
+++ /dev/null
@@ -1,31 +0,0 @@
-# RUN: not llvm-mc -triple=riscv32 -mattr=+c < %s 2>&1 | FileCheck %s
-
-## GPRC
-.LBB:
-c.lw  ra, 4(sp) # CHECK: :[[@LINE]]:7: error: invalid operand for instruction
-c.sw  sp, 4(sp) # CHECK: :[[@LINE]]:7: error: invalid operand for instruction
-c.beqz  t0, .LBB # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-c.bnez  s8, .LBB # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-
-## GPRNoX0
-c.lwsp  x0, 4(sp) # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-c.lwsp  zero, 4(sp) # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-c.jr  x0 # CHECK: :[[@LINE]]:7: error: invalid operand for instruction
-c.jalr  zero # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-
-# Out of range immediates
-
-## uimm8_lsb00
-c.lwsp  ra, 256(sp) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 4 bytes in the range [0, 252]
-c.swsp  ra, -4(sp) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 4 bytes in the range [0, 252]
-## uimm7_lsb00
-c.lw  s0, -4(sp) # CHECK: :[[@LINE]]:11: error: immediate must be a multiple of 4 bytes in the range [0, 124]
-c.sw  s0, 128(sp) # CHECK: :[[@LINE]]:11: error: immediate must be a multiple of 4 bytes in the range [0, 124]
-
-## simm9_lsb0
-c.bnez  s1, -258 # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-256, 254]
-c.beqz  a0, 256 # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-256, 254]
-
-## simm12_lsb0
-c.j 2048 # CHECK: :[[@LINE]]:5: error: immediate must be a multiple of 2 bytes in the range [-2048, 2046]
-c.jal -2050 # CHECK: :[[@LINE]]:7: error: immediate must be a multiple of 2 bytes in the range [-2048, 2046]
diff --git a/test/MC/RISCV/rv32c-valid.s b/test/MC/RISCV/rv32c-valid.s
deleted file mode 100644
index ce4273d3802..00000000000
--- a/test/MC/RISCV/rv32c-valid.s
+++ /dev/null
@@ -1,42 +0,0 @@
-# RUN: llvm-mc -triple=riscv32 -mattr=+c -show-encoding < %s \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -triple=riscv64 -mattr=+c -show-encoding < %s \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+c < %s \
-# RUN:     | llvm-objdump -mattr=+c -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+c < %s \
-# RUN:     | llvm-objdump -mattr=+c -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# TODO: more exhaustive testing of immediate encoding.
-
-# CHECK-INST: c.lwsp  ra, 0(sp)
-# CHECK: encoding: [0x82,0x40]
-c.lwsp  ra, 0(sp)
-# CHECK-INST: c.swsp  ra, 252(sp)
-# CHECK: encoding: [0x86,0xdf]
-c.swsp  ra, 252(sp)
-# CHECK-INST: c.lw    a2, 0(a0)
-# CHECK: encoding: [0x10,0x41]
-c.lw    a2, 0(a0)
-# CHECK-INST: c.sw    a5, 124(a3)
-# CHECK: encoding: [0xfc,0xde]
-c.sw    a5, 124(a3)
-
-# CHECK-INST: c.j     -2048
-# CHECK: encoding: [0x01,0xb0]
-c.j     -2048
-# CHECK-INST: c.jal    2046
-# CHECK: encoding: [0xfd,0x2f]
-c.jal    2046
-# CHECK-INST: c.jr    a7
-# CHECK: encoding: [0x82,0x88]
-c.jr    a7
-# CHECK-INST: c.jalr  a1
-# CHECK: encoding: [0x82,0x95]
-c.jalr  a1
-# CHECK-INST: c.beqz  a3, -256
-# CHECK: encoding: [0x81,0xd2]
-c.beqz  a3, -256
-# CHECK-INST: c.bnez  a5,  254
-# CHECK: encoding: [0xfd,0xef]
-c.bnez  a5,  254
diff --git a/test/MC/RISCV/rv32d-invalid.s b/test/MC/RISCV/rv32d-invalid.s
deleted file mode 100644
index 3c3e265bd28..00000000000
--- a/test/MC/RISCV/rv32d-invalid.s
+++ /dev/null
@@ -1,21 +0,0 @@
-# RUN: not llvm-mc -triple riscv32 -mattr=+d < %s 2>&1 | FileCheck %s
-
-# Out of range immediates
-## simm12
-fld ft1, -2049(a0) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-fsd ft2, 2048(a1) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-
-# Memory operand not formatted correctly
-fld ft1, a0, -200 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-fsd ft2, a1, 100 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-
-# Invalid register names
-fld ft15, 100(a0) # CHECK: :[[@LINE]]:5: error: invalid operand for instruction
-fld ft1, 100(a10) # CHECK: :[[@LINE]]:14: error: expected register
-fsgnjn.d fa100, fa2, fa3 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-
-# Integer registers where FP regs are expected
-fadd.d a2, a1, a0 # CHECK: :[[@LINE]]:8: error: invalid operand for instruction
-
-# FP registers where integer regs are expected
-fcvt.wu.d ft2, a1 # CHECK: :[[@LINE]]:11: error: invalid operand for instruction
diff --git a/test/MC/RISCV/rv32d-valid.s b/test/MC/RISCV/rv32d-valid.s
deleted file mode 100644
index 8fbe96295f7..00000000000
--- a/test/MC/RISCV/rv32d-valid.s
+++ /dev/null
@@ -1,159 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv32 -mattr=+d -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+d -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+d < %s \
-# RUN:     | llvm-objdump -mattr=+d -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+d < %s \
-# RUN:     | llvm-objdump -mattr=+d -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# Support for the 'D' extension implies support for 'F'
-# CHECK-INST: fadd.s fs10, fs11, ft8
-# CHECK: encoding: [0x53,0xfd,0xcd,0x01]
-fadd.s f26, f27, f28
-
-# CHECK-INST: fld ft0, 12(a0)
-# CHECK: encoding: [0x07,0x30,0xc5,0x00]
-fld f0, 12(a0)
-# CHECK-INST: fld ft1, 4(ra)
-# CHECK: encoding: [0x87,0xb0,0x40,0x00]
-fld f1, +4(ra)
-# CHECK-INST: fld ft2, -2048(a3)
-# CHECK: encoding: [0x07,0xb1,0x06,0x80]
-fld f2, -2048(x13)
-# CHECK-INST: fld ft3, -2048(s1)
-# CHECK: encoding: [0x87,0xb1,0x04,0x80]
-fld f3, %lo(2048)(s1)
-# CHECK-INST: fld ft4, 2047(s2)
-# CHECK: encoding: [0x07,0x32,0xf9,0x7f]
-fld f4, 2047(s2)
-# CHECK-INST: fld ft5, 0(s3)
-# CHECK: encoding: [0x87,0xb2,0x09,0x00]
-fld f5, 0(s3)
-
-# CHECK-INST: fsd ft6, 2047(s4)
-# CHECK: encoding: [0xa7,0x3f,0x6a,0x7e]
-fsd f6, 2047(s4)
-# CHECK-INST: fsd ft7, -2048(s5)
-# CHECK: encoding: [0x27,0xb0,0x7a,0x80]
-fsd f7, -2048(s5)
-# CHECK-INST: fsd fs0, -2048(s6)
-# CHECK: encoding: [0x27,0x30,0x8b,0x80]
-fsd f8, %lo(2048)(s6)
-# CHECK-INST: fsd fs1, 999(s7)
-# CHECK: encoding: [0xa7,0xb3,0x9b,0x3e]
-fsd f9, 999(s7)
-
-# CHECK-INST: fmadd.d fa0, fa1, fa2, fa3
-# CHECK: encoding: [0x43,0xf5,0xc5,0x6a]
-fmadd.d f10, f11, f12, f13
-# CHECK-INST: fmsub.d fa4, fa5, fa6, fa7
-# CHECK: encoding: [0x47,0xf7,0x07,0x8b]
-fmsub.d f14, f15, f16, f17
-# CHECK-INST: fnmsub.d fs2, fs3, fs4, fs5
-# CHECK: encoding: [0x4b,0xf9,0x49,0xab]
-fnmsub.d f18, f19, f20, f21
-# CHECK-INST: fnmadd.d fs6, fs7, fs8, fs9
-# CHECK: encoding: [0x4f,0xfb,0x8b,0xcb]
-fnmadd.d f22, f23, f24, f25
-
-# CHECK-INST: fadd.d fs10, fs11, ft8
-# CHECK: encoding: [0x53,0xfd,0xcd,0x03]
-fadd.d f26, f27, f28
-# CHECK-INST: fsub.d ft9, ft10, ft11
-# CHECK: encoding: [0xd3,0x7e,0xff,0x0b]
-fsub.d f29, f30, f31
-# CHECK-INST: fmul.d ft0, ft1, ft2
-# CHECK: encoding: [0x53,0xf0,0x20,0x12]
-fmul.d ft0, ft1, ft2
-# CHECK-INST: fdiv.d ft3, ft4, ft5
-# CHECK: encoding: [0xd3,0x71,0x52,0x1a]
-fdiv.d ft3, ft4, ft5
-# CHECK-INST: fsqrt.d ft6, ft7
-# CHECK: encoding: [0x53,0xf3,0x03,0x5a]
-fsqrt.d ft6, ft7
-# CHECK-INST: fsgnj.d fs1, fa0, fa1
-# CHECK: encoding: [0xd3,0x04,0xb5,0x22]
-fsgnj.d fs1, fa0, fa1
-# CHECK-INST: fsgnjn.d fa1, fa3, fa4
-# CHECK: encoding: [0xd3,0x95,0xe6,0x22]
-fsgnjn.d fa1, fa3, fa4
-# CHECK-INST: fsgnjx.d fa3, fa2, fa1
-# CHECK: encoding: [0xd3,0x26,0xb6,0x22]
-fsgnjx.d fa3, fa2, fa1
-# CHECK-INST: fmin.d fa5, fa6, fa7
-# CHECK: encoding: [0xd3,0x07,0x18,0x2b]
-fmin.d fa5, fa6, fa7
-# CHECK-INST: fmax.d fs2, fs3, fs4
-# CHECK: encoding: [0x53,0x99,0x49,0x2b]
-fmax.d fs2, fs3, fs4
-
-# CHECK-INST: fcvt.s.d fs5, fs6
-# CHECK: encoding: [0xd3,0x7a,0x1b,0x40]
-fcvt.s.d fs5, fs6
-# CHECK-INST: fcvt.d.s fs7, fs8
-# CHECK: encoding: [0xd3,0x0b,0x0c,0x42]
-fcvt.d.s fs7, fs8
-# CHECK-INST: feq.d a1, fs8, fs9
-# CHECK: encoding: [0xd3,0x25,0x9c,0xa3]
-feq.d a1, fs8, fs9
-# CHECK-INST: flt.d a2, fs10, fs11
-# CHECK: encoding: [0x53,0x16,0xbd,0xa3]
-flt.d a2, fs10, fs11
-# CHECK-INST: fle.d a3, ft8, ft9
-# CHECK: encoding: [0xd3,0x06,0xde,0xa3]
-fle.d a3, ft8, ft9
-# CHECK-INST: fclass.d a3, ft10
-# CHECK: encoding: [0xd3,0x16,0x0f,0xe2]
-fclass.d a3, ft10
-
-# CHECK-INST: fcvt.w.d a4, ft11
-# CHECK: encoding: [0x53,0xf7,0x0f,0xc2]
-fcvt.w.d a4, ft11
-# CHECK-INST: fcvt.d.w ft0, a5
-# CHECK: encoding: [0x53,0x80,0x07,0xd2]
-fcvt.d.w ft0, a5
-# CHECK-INST: fcvt.d.wu ft1, a6
-# CHECK: encoding: [0xd3,0x00,0x18,0xd2]
-fcvt.d.wu ft1, a6
-
-# Rounding modes
-
-# CHECK-INST: fmadd.d fa0, fa1, fa2, fa3, rne
-# CHECK: encoding: [0x43,0x85,0xc5,0x6a]
-fmadd.d f10, f11, f12, f13, rne
-# CHECK-INST: fmsub.d fa4, fa5, fa6, fa7, rtz
-# CHECK: encoding: [0x47,0x97,0x07,0x8b]
-fmsub.d f14, f15, f16, f17, rtz
-# CHECK-INST: fnmsub.d fs2, fs3, fs4, fs5, rdn
-# CHECK: encoding: [0x4b,0xa9,0x49,0xab]
-fnmsub.d f18, f19, f20, f21, rdn
-# CHECK-INST: fnmadd.d fs6, fs7, fs8, fs9, rup
-# CHECK: encoding: [0x4f,0xbb,0x8b,0xcb]
-fnmadd.d f22, f23, f24, f25, rup
-
-# CHECK-INST: fadd.d fs10, fs11, ft8, rmm
-# CHECK: encoding: [0x53,0xcd,0xcd,0x03]
-fadd.d f26, f27, f28, rmm
-# CHECK-INST: fsub.d ft9, ft10, ft11
-# CHECK: encoding: [0xd3,0x7e,0xff,0x0b]
-fsub.d f29, f30, f31, dyn
-# CHECK-INST: fmul.d ft0, ft1, ft2, rne
-# CHECK: encoding: [0x53,0x80,0x20,0x12]
-fmul.d ft0, ft1, ft2, rne
-# CHECK-INST: fdiv.d ft3, ft4, ft5, rtz
-# CHECK: encoding: [0xd3,0x11,0x52,0x1a]
-fdiv.d ft3, ft4, ft5, rtz
-
-# CHECK-INST: fsqrt.d ft6, ft7, rdn
-# CHECK: encoding: [0x53,0xa3,0x03,0x5a]
-fsqrt.d ft6, ft7, rdn
-# CHECK-INST: fcvt.s.d fs5, fs6, rup
-# CHECK: encoding: [0xd3,0x3a,0x1b,0x40]
-fcvt.s.d fs5, fs6, rup
-# CHECK-INST: fcvt.w.d a4, ft11, rmm
-# CHECK: encoding: [0x53,0xc7,0x0f,0xc2]
-fcvt.w.d a4, ft11, rmm
-# CHECK-INST: fcvt.wu.d a5, ft10
-# CHECK: encoding: [0xd3,0x77,0x1f,0xc2]
-fcvt.wu.d a5, ft10, dyn
diff --git a/test/MC/RISCV/rv32f-invalid.s b/test/MC/RISCV/rv32f-invalid.s
deleted file mode 100644
index ed9aaed1bca..00000000000
--- a/test/MC/RISCV/rv32f-invalid.s
+++ /dev/null
@@ -1,34 +0,0 @@
-# RUN: not llvm-mc -triple riscv32 -mattr=+f < %s 2>&1 | FileCheck %s
-
-# Out of range immediates
-## simm12
-flw ft1, -2049(a0) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-fsw ft2, 2048(a1) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-
-# Memory operand not formatted correctly
-flw ft1, a0, -200 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-fsw ft2, a1, 100 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
-
-# Invalid register names
-flw ft15, 100(a0) # CHECK: :[[@LINE]]:5: error: invalid operand for instruction
-flw ft1, 100(a10) # CHECK: :[[@LINE]]:14: error: expected register
-fsgnjn.s fa100, fa2, fa3 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-
-# Integer registers where FP regs are expected
-fmv.x.w fs7, a2 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-
-# FP registers where integer regs are expected
-fmv.w.x a8, ft2 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-
-# Rounding mode when a register is expected
-fmadd.s f10, f11, f12, ree # CHECK: :[[@LINE]]:24: error: invalid operand for instruction
-
-# Invalid rounding modes
-fmadd.s f10, f11, f12, f13, ree # CHECK: :[[@LINE]]:29: error: operand must be a valid floating point rounding mode mnemonic
-fmsub.s f14, f15, f16, f17, 0 # CHECK: :[[@LINE]]:29: error: operand must be a valid floating point rounding mode mnemonic
-fnmsub.s f18, f19, f20, f21, 0b111 # CHECK: :[[@LINE]]:30: error: operand must be a valid floating point rounding mode mnemonic
-
-# Using 'D' instructions for an 'F'-only target
-fadd.d ft0, ft1, ft2 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-
-# Using RV64F instructions for RV32 is tested in rv64f-valid.s
diff --git a/test/MC/RISCV/rv32f-valid.s b/test/MC/RISCV/rv32f-valid.s
deleted file mode 100644
index 398173836c5..00000000000
--- a/test/MC/RISCV/rv32f-valid.s
+++ /dev/null
@@ -1,164 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv32 -mattr=+f -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+f -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+f < %s \
-# RUN:     | llvm-objdump -mattr=+f -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+f < %s \
-# RUN:     | llvm-objdump -mattr=+f -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# CHECK-INST: flw ft0, 12(a0)
-# CHECK: encoding: [0x07,0x20,0xc5,0x00]
-flw f0, 12(a0)
-# CHECK-INST: flw ft1, 4(ra)
-# CHECK: encoding: [0x87,0xa0,0x40,0x00]
-flw f1, +4(ra)
-# CHECK-INST: flw ft2, -2048(a3)
-# CHECK: encoding: [0x07,0xa1,0x06,0x80]
-flw f2, -2048(x13)
-# CHECK-INST: flw ft3, -2048(s1)
-# CHECK: encoding: [0x87,0xa1,0x04,0x80]
-flw f3, %lo(2048)(s1)
-# CHECK-INST: flw ft4, 2047(s2)
-# CHECK: encoding: [0x07,0x22,0xf9,0x7f]
-flw f4, 2047(s2)
-# CHECK-INST: flw ft5, 0(s3)
-# CHECK: encoding: [0x87,0xa2,0x09,0x00]
-flw f5, 0(s3)
-
-# CHECK-INST: fsw ft6, 2047(s4)
-# CHECK: encoding: [0xa7,0x2f,0x6a,0x7e]
-fsw f6, 2047(s4)
-# CHECK-INST: fsw ft7, -2048(s5)
-# CHECK: encoding: [0x27,0xa0,0x7a,0x80]
-fsw f7, -2048(s5)
-# CHECK-INST: fsw fs0, -2048(s6)
-# CHECK: encoding: [0x27,0x20,0x8b,0x80]
-fsw f8, %lo(2048)(s6)
-# CHECK-INST: fsw fs1, 999(s7)
-# CHECK: encoding: [0xa7,0xa3,0x9b,0x3e]
-fsw f9, 999(s7)
-
-# CHECK-INST: fmadd.s fa0, fa1, fa2, fa3
-# CHECK: encoding: [0x43,0xf5,0xc5,0x68]
-fmadd.s f10, f11, f12, f13
-# CHECK-INST: fmsub.s fa4, fa5, fa6, fa7
-# CHECK: encoding: [0x47,0xf7,0x07,0x89]
-fmsub.s f14, f15, f16, f17
-# CHECK-INST: fnmsub.s fs2, fs3, fs4, fs5
-# CHECK: encoding: [0x4b,0xf9,0x49,0xa9]
-fnmsub.s f18, f19, f20, f21
-# CHECK-INST: fnmadd.s fs6, fs7, fs8, fs9
-# CHECK: encoding: [0x4f,0xfb,0x8b,0xc9]
-fnmadd.s f22, f23, f24, f25
-
-# CHECK-INST: fadd.s fs10, fs11, ft8
-# CHECK: encoding: [0x53,0xfd,0xcd,0x01]
-fadd.s f26, f27, f28
-# CHECK-INST: fsub.s ft9, ft10, ft11
-# CHECK: encoding: [0xd3,0x7e,0xff,0x09]
-fsub.s f29, f30, f31
-# CHECK-INST: fmul.s ft0, ft1, ft2
-# CHECK: encoding: [0x53,0xf0,0x20,0x10]
-fmul.s ft0, ft1, ft2
-# CHECK-INST: fdiv.s ft3, ft4, ft5
-# CHECK: encoding: [0xd3,0x71,0x52,0x18]
-fdiv.s ft3, ft4, ft5
-# CHECK-INST: fsqrt.s ft6, ft7
-# CHECK: encoding: [0x53,0xf3,0x03,0x58]
-fsqrt.s ft6, ft7
-# CHECK-INST: fsgnj.s fs1, fa0, fa1
-# CHECK: encoding: [0xd3,0x04,0xb5,0x20]
-fsgnj.s fs1, fa0, fa1
-# CHECK-INST: fsgnjn.s fa1, fa3, fa4
-# CHECK: encoding: [0xd3,0x95,0xe6,0x20]
-fsgnjn.s fa1, fa3, fa4
-# CHECK-INST: fsgnjx.s fa4, fa3, fa2
-# CHECK: encoding: [0x53,0xa7,0xc6,0x20]
-fsgnjx.s fa4, fa3, fa2
-# CHECK-INST: fmin.s fa5, fa6, fa7
-# CHECK: encoding: [0xd3,0x07,0x18,0x29]
-fmin.s fa5, fa6, fa7
-# CHECK-INST: fmax.s fs2, fs3, fs4
-# CHECK: encoding: [0x53,0x99,0x49,0x29]
-fmax.s fs2, fs3, fs4
-# CHECK-INST: fcvt.w.s a0, fs5
-# CHECK: encoding: [0x53,0xf5,0x0a,0xc0]
-fcvt.w.s a0, fs5
-# CHECK-INST: fcvt.wu.s a1, fs6
-# CHECK: encoding: [0xd3,0x75,0x1b,0xc0]
-fcvt.wu.s a1, fs6
-# CHECK-INST: fmv.x.w a2, fs7
-# CHECK: encoding: [0x53,0x86,0x0b,0xe0]
-fmv.x.w a2, fs7
-# CHECK-INST: feq.s a1, fs8, fs9
-# CHECK: encoding: [0xd3,0x25,0x9c,0xa1]
-feq.s a1, fs8, fs9
-# CHECK-INST: flt.s a2, fs10, fs11
-# CHECK: encoding: [0x53,0x16,0xbd,0xa1]
-flt.s a2, fs10, fs11
-# CHECK-INST: fle.s a3, ft8, ft9
-# CHECK: encoding: [0xd3,0x06,0xde,0xa1]
-fle.s a3, ft8, ft9
-# CHECK-INST: fclass.s a3, ft10
-# CHECK: encoding: [0xd3,0x16,0x0f,0xe0]
-fclass.s a3, ft10
-# CHECK-INST: fcvt.s.w ft11, a4
-# CHECK: encoding: [0xd3,0x7f,0x07,0xd0]
-fcvt.s.w ft11, a4
-# CHECK-INST: fcvt.s.wu ft0, a5
-# CHECK: encoding: [0x53,0xf0,0x17,0xd0]
-fcvt.s.wu ft0, a5
-# CHECK-INST: fmv.w.x ft1, a6
-# CHECK: encoding: [0xd3,0x00,0x08,0xf0]
-fmv.w.x ft1, a6
-
-# Rounding modes
-
-# CHECK-INST: fmadd.s fa0, fa1, fa2, fa3, rne
-# CHECK: encoding: [0x43,0x85,0xc5,0x68]
-fmadd.s f10, f11, f12, f13, rne
-# CHECK-INST: fmsub.s fa4, fa5, fa6, fa7, rtz
-# CHECK: encoding: [0x47,0x97,0x07,0x89]
-fmsub.s f14, f15, f16, f17, rtz
-# CHECK-INST: fnmsub.s fs2, fs3, fs4, fs5, rdn
-# CHECK: encoding: [0x4b,0xa9,0x49,0xa9]
-fnmsub.s f18, f19, f20, f21, rdn
-# CHECK-INST: fnmadd.s fs6, fs7, fs8, fs9, rup
-# CHECK: encoding: [0x4f,0xbb,0x8b,0xc9]
-fnmadd.s f22, f23, f24, f25, rup
-# CHECK-INST: fmadd.s fa0, fa1, fa2, fa3, rmm
-# CHECK: encoding: [0x43,0xc5,0xc5,0x68]
-fmadd.s f10, f11, f12, f13, rmm
-# CHECK-INST: fmsub.s fa4, fa5, fa6, fa7
-# CHECK: encoding: [0x47,0xf7,0x07,0x89]
-fmsub.s f14, f15, f16, f17, dyn
-
-# CHECK-INST: fadd.s fs10, fs11, ft8, rne
-# CHECK: encoding: [0x53,0x8d,0xcd,0x01]
-fadd.s f26, f27, f28, rne
-# CHECK-INST: fsub.s ft9, ft10, ft11, rtz
-# CHECK: encoding: [0xd3,0x1e,0xff,0x09]
-fsub.s f29, f30, f31, rtz
-# CHECK-INST: fmul.s ft0, ft1, ft2, rdn
-# CHECK: encoding: [0x53,0xa0,0x20,0x10]
-fmul.s ft0, ft1, ft2, rdn
-# CHECK-INST: fdiv.s ft3, ft4, ft5, rup
-# CHECK: encoding: [0xd3,0x31,0x52,0x18]
-fdiv.s ft3, ft4, ft5, rup
-
-# CHECK-INST: fsqrt.s ft6, ft7, rmm
-# CHECK: encoding: [0x53,0xc3,0x03,0x58]
-fsqrt.s ft6, ft7, rmm
-# CHECK-INST: fcvt.w.s a0, fs5, rup
-# CHECK: encoding: [0x53,0xb5,0x0a,0xc0]
-fcvt.w.s a0, fs5, rup
-# CHECK-INST: fcvt.wu.s a1, fs6, rdn
-# CHECK: encoding: [0xd3,0x25,0x1b,0xc0]
-fcvt.wu.s a1, fs6, rdn
-# CHECK-INST: fcvt.s.w ft11, a4, rtz
-# CHECK: encoding: [0xd3,0x1f,0x07,0xd0]
-fcvt.s.w ft11, a4, rtz
-# CHECK-INST: fcvt.s.wu ft0, a5, rne
-# CHECK: encoding: [0x53,0x80,0x17,0xd0]
-fcvt.s.wu ft0, a5, rne
diff --git a/test/MC/RISCV/rv32i-invalid.s b/test/MC/RISCV/rv32i-invalid.s
deleted file mode 100644
index 938298e4347..00000000000
--- a/test/MC/RISCV/rv32i-invalid.s
+++ /dev/null
@@ -1,139 +0,0 @@
-# RUN: not llvm-mc -triple riscv32 < %s 2>&1 | FileCheck %s
-
-# Out of range immediates
-## fencearg
-fence iorw, iore # CHECK: :[[@LINE]]:13: error: operand must be formed of letters selected in-order from 'iorw'
-fence wr, wr # CHECK: :[[@LINE]]:7: error: operand must be formed of letters selected in-order from 'iorw'
-fence rw, rr # CHECK: :[[@LINE]]:11: error: operand must be formed of letters selected in-order from 'iorw'
-fence 1, rw # CHECK: :[[@LINE]]:7: error: operand must be formed of letters selected in-order from 'iorw'
-
-## uimm5
-slli a0, a0, 32 # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [0, 31]
-srli a0, a0, -1 # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [0, 31]
-srai a0, a0, -19 # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [0, 31]
-csrrwi a1, 0x1, -1 # CHECK: :[[@LINE]]:17: error: immediate must be an integer in the range [0, 31]
-csrrsi t1, 999, 32 # CHECK: :[[@LINE]]:17: error: immediate must be an integer in the range [0, 31]
-csrrci x0, 43, -90 # CHECK: :[[@LINE]]:16: error: immediate must be an integer in the range [0, 31]
-
-## simm12
-ori a0, a1, -2049 # CHECK: :[[@LINE]]:13: error: immediate must be an integer in the range [-2048, 2047]
-andi ra, sp, 2048 # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [-2048, 2047]
-
-## uimm12
-csrrw a0, -1, a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrs a0, 4096, a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrs a0, -0xf, a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrc a0, 0x1000, a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrwi a0, -50, 0 # CHECK: :[[@LINE]]:12: error: immediate must be an integer in the range [0, 4095]
-csrrsi a0, 4097, a0 # CHECK: :[[@LINE]]:12: error: immediate must be an integer in the range [0, 4095]
-csrrci a0, 0xffff, a0 # CHECK: :[[@LINE]]:12: error: immediate must be an integer in the range [0, 4095]
-
-## simm13_lsb0
-beq t0, t1, -4098 # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bne t0, t1, -4097 # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-blt t0, t1, 4095 # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bge t0, t1, 4096 # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bltu t0, t1, 13 # CHECK: :[[@LINE]]:14: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bgeu t0, t1, -13 # CHECK: :[[@LINE]]:14: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-
-## uimm20
-lui a0, -1 # CHECK: :[[@LINE]]:9: error: immediate must be an integer in the range [0, 1048575]
-lui s0, 1048576 # CHECK: :[[@LINE]]:9: error: immediate must be an integer in the range [0, 1048575]
-auipc zero, -0xf # CHECK: :[[@LINE]]:13: error: immediate must be an integer in the range [0, 1048575]
-
-## simm21_lsb0
-jal gp, -1048578 # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, -1048577 # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, 1048575 # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, 1048576 # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, 1 # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-
-# Illegal operand modifier
-## fencearg
-fence %hi(iorw), iorw # CHECK: :[[@LINE]]:7: error: operand must be formed of letters selected in-order from 'iorw'
-fence %lo(iorw), iorw # CHECK: :[[@LINE]]:7: error: operand must be formed of letters selected in-order from 'iorw'
-fence %pcrel_hi(iorw), iorw # CHECK: :[[@LINE]]:7: error: operand must be formed of letters selected in-order from 'iorw'
-
-## uimm5
-slli a0, a0, %lo(1) # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [0, 31]
-srli a0, a0, %lo(a) # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [0, 31]
-srai a0, a0, %hi(2) # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [0, 31]
-csrrwi a1, 0x1, %hi(b) # CHECK: :[[@LINE]]:17: error: immediate must be an integer in the range [0, 31]
-csrrsi t1, 999, %pcrel_hi(3) # CHECK: :[[@LINE]]:17: error: immediate must be an integer in the range [0, 31]
-csrrci x0, 43, %pcrel_hi(c) # CHECK: :[[@LINE]]:16: error: immediate must be an integer in the range [0, 31]
-
-## simm12
-ori a0, a1, %hi(foo) # CHECK: :[[@LINE]]:13: error: immediate must be an integer in the range [-2048, 2047]
-andi ra, sp, %pcrel_hi(123) # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [-2048, 2047]
-xori a2, a3, %hi(345) # CHECK: :[[@LINE]]:14: error: immediate must be an integer in the range [-2048, 2047]
-
-## uimm12
-csrrw a0, %lo(1), a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrs a0, %lo(a), a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrs a0, %hi(2), a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrc a0, %hi(b), a0 # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 4095]
-csrrwi a0, %pcrel_hi(3), 0 # CHECK: :[[@LINE]]:12: error: immediate must be an integer in the range [0, 4095]
-csrrsi a0, %pcrel_hi(c), a0 # CHECK: :[[@LINE]]:12: error: immediate must be an integer in the range [0, 4095]
-
-## simm13_lsb0
-beq t0, t1, %lo(1) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bne t0, t1, %lo(a) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-blt t0, t1, %hi(2) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bge t0, t1, %hi(b) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bltu t0, t1, %pcrel_hi(3) # CHECK: :[[@LINE]]:14: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-bgeu t0, t1, %pcrel_hi(c) # CHECK: :[[@LINE]]:14: error: immediate must be a multiple of 2 bytes in the range [-4096, 4094]
-
-## uimm20
-lui a0, %lo(1) # CHECK: :[[@LINE]]:9: error: immediate must be an integer in the range [0, 1048575]
-auipc a1, %lo(foo) # CHECK: :[[@LINE]]:11: error: immediate must be an integer in the range [0, 1048575]
-
-## simm21_lsb0
-jal gp, %lo(1) # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, %lo(a) # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, %hi(2) # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, %hi(b) # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, %pcrel_hi(3) # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-jal gp, %pcrel_hi(c) # CHECK: :[[@LINE]]:9: error: immediate must be a multiple of 2 bytes in the range [-1048576, 1048574]
-
-# Unrecognized operand modifier
-addi t0, sp, %modifer(255) # CHECK: :[[@LINE]]:15: error: unrecognized operand modifier
-
-# Use of operand modifier on register name
-addi t1, %lo(t2), 1 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-
-# Invalid mnemonics
-subs t0, t2, t1 # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-nandi t0, zero, 0 # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-
-# Invalid register names
-addi foo, sp, 10 # CHECK: :[[@LINE]]:6: error: invalid operand for instruction
-slti a10, a2, 0x20 # CHECK: :[[@LINE]]:6: error: invalid operand for instruction
-slt x32, s0, s0 # CHECK: :[[@LINE]]:5: error: invalid operand for instruction
-
-# RV64I mnemonics
-addiw a0, sp, 100 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-sraw t0, s2, zero # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-
-# Invalid operand types
-xori sp, 22, 220 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-sub t0, t2, 1 # CHECK: :[[@LINE]]:13: error: invalid operand for instruction
-add a1, a2, (a3) # CHECK: :[[@LINE]]:13: error: invalid operand for instruction
-
-# Too many operands
-add ra, zero, zero, zero # CHECK: :[[@LINE]]:21: error: invalid operand for instruction
-sltiu s2, s3, 0x50, 0x60 # CHECK: :[[@LINE]]:21: error: invalid operand for instruction
-
-# Memory operand not formatted correctly
-lw a4, a5, 111 # CHECK: :[[@LINE]]:8: error: immediate must be an integer in the range [-2048, 2047]
-
-# Too few operands
-ori a0, a1 # CHECK: :[[@LINE]]:1: error: too few operands for instruction
-xor s2, s2 # CHECK: :[[@LINE]]:1: error: too few operands for instruction
-
-# Instruction not in the base ISA
-mul a4, ra, s0 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-amomaxu.w s5, s4, (s3) # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-fadd.s ft0, ft1, ft2 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-
-# Using floating point registers when integer registers are expected
-addi a2, ft0, 24 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
diff --git a/test/MC/RISCV/rv32i-valid.s b/test/MC/RISCV/rv32i-valid.s
deleted file mode 100644
index be6560062bb..00000000000
--- a/test/MC/RISCV/rv32i-valid.s
+++ /dev/null
@@ -1,238 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv32 -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc %s -triple=riscv64 -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 < %s \
-# RUN:     | llvm-objdump -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 < %s \
-# RUN:     | llvm-objdump -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# CHECK-INST: lui a0, 2
-# CHECK: encoding: [0x37,0x25,0x00,0x00]
-lui a0, 2
-# CHECK-INST: lui s11, 552960
-# CHECK: encoding: [0xb7,0x0d,0x00,0x87]
-lui s11, (0x87000000>>12)
-# CHECK-INST: lui a0, 0
-# CHECK: encoding: [0x37,0x05,0x00,0x00]
-lui a0, %hi(2)
-# CHECK-INST: lui s11, 552960
-# CHECK: encoding: [0xb7,0x0d,0x00,0x87]
-lui s11, (0x87000000>>12)
-# CHECK-INST: lui s11, 552960
-# CHECK: encoding: [0xb7,0x0d,0x00,0x87]
-lui s11, %hi(0x87000000)
-# CHECK-INST: lui t0, 1048575
-# CHECK: encoding: [0xb7,0xf2,0xff,0xff]
-lui t0, 1048575
-# CHECK-INST: lui gp, 0
-# CHECK: encoding: [0xb7,0x01,0x00,0x00]
-lui gp, 0
-
-# CHECK-INST: auipc a0, 2
-# CHECK: encoding: [0x17,0x25,0x00,0x00]
-auipc a0, 2
-# CHECK-INST: auipc s11, 552960
-# CHECK: encoding: [0x97,0x0d,0x00,0x87]
-auipc s11, (0x87000000>>12)
-# CHECK-INST: auipc t0, 1048575
-# CHECK: encoding: [0x97,0xf2,0xff,0xff]
-auipc t0, 1048575
-# CHECK-INST: auipc gp, 0
-# CHECK: encoding: [0x97,0x01,0x00,0x00]
-auipc gp, 0
-
-# CHECK-INST: jal a2, 1048574
-# CHECK: encoding: [0x6f,0xf6,0xff,0x7f]
-jal a2, 1048574
-# CHECK-INST: jal a3, 256
-# CHECK: encoding: [0xef,0x06,0x00,0x10]
-jal a3, 256
-
-# CHECK-INST: jalr a0, a1, -2048
-# CHECK: encoding: [0x67,0x85,0x05,0x80]
-jalr a0, a1, -2048
-# CHECK-INST: jalr a0, a1, -2048
-# CHECK: encoding: [0x67,0x85,0x05,0x80]
-jalr a0, a1, %lo(2048)
-# CHECK-INST: jalr t2, t1, 2047
-# CHECK: encoding: [0xe7,0x03,0xf3,0x7f]
-jalr t2, t1, 2047
-# CHECK-INST: jalr sp, zero, 256
-# CHECK: encoding: [0x67,0x01,0x00,0x10]
-jalr sp, zero, 256
-
-# CHECK-INST: beq s1, s1, 102
-# CHECK: encoding: [0x63,0x83,0x94,0x06]
-beq s1, s1, 102
-# CHECK-INST: bne a4, a5, -4096
-# CHECK: encoding: [0x63,0x10,0xf7,0x80]
-bne a4, a5, -4096
-# CHECK-INST: blt sp, gp, 4094
-# CHECK: encoding: [0xe3,0x4f,0x31,0x7e]
-blt sp, gp, 4094
-# CHECK-INST: bge s2, ra, -224
-# CHECK: encoding: [0xe3,0x50,0x19,0xf2]
-bge s2, ra, -224
-# CHECK-INST: bltu zero, zero, 0
-# CHECK: encoding: [0x63,0x60,0x00,0x00]
-bltu zero, zero, 0
-# CHECK-INST: bgeu s8, sp, 512
-# CHECK: encoding: [0x63,0x70,0x2c,0x20]
-bgeu s8, sp, 512
-
-# CHECK-INST: lb s3, 4(ra)
-# CHECK: encoding: [0x83,0x89,0x40,0x00]
-lb s3, 4(ra)
-# CHECK-INST: lb s3, 4(ra)
-# CHECK: encoding: [0x83,0x89,0x40,0x00]
-lb s3, +4(ra)
-# CHECK-INST: lh t1, -2048(zero)
-# CHECK: encoding: [0x03,0x13,0x00,0x80]
-lh t1, -2048(zero)
-# CHECK-INST: lh t1, -2048(zero)
-# CHECK: encoding: [0x03,0x13,0x00,0x80]
-lh t1, %lo(2048)(zero)
-# CHECK-INST: lh sp, 2047(a0)
-# CHECK: encoding: [0x03,0x11,0xf5,0x7f]
-lh sp, 2047(a0)
-# CHECK-INST: lw a0, 97(a2)
-# CHECK: encoding: [0x03,0x25,0x16,0x06]
-lw a0, 97(a2)
-# CHECK-INST: lbu s5, 0(s6)
-# CHECK: encoding: [0x83,0x4a,0x0b,0x00]
-lbu s5, 0(s6)
-# CHECK-INST: lhu t3, 255(t3)
-# CHECK: encoding: [0x03,0x5e,0xfe,0x0f]
-lhu t3, 255(t3)
-
-# CHECK-INST: sb a0, 2047(a2)
-# CHECK: encoding: [0xa3,0x0f,0xa6,0x7e]
-sb a0, 2047(a2)
-# CHECK-INST: sh t3, -2048(t5)
-# CHECK: encoding: [0x23,0x10,0xcf,0x81]
-sh t3, -2048(t5)
-# CHECK-INST: sh t3, -2048(t5)
-# CHECK: encoding: [0x23,0x10,0xcf,0x81]
-sh t3, %lo(2048)(t5)
-# CHECK-INST: sw ra, 999(zero)
-# CHECK: encoding: [0xa3,0x23,0x10,0x3e]
-sw ra, 999(zero)
-
-# CHECK-INST: addi ra, sp, 2
-# CHECK: encoding: [0x93,0x00,0x21,0x00]
-addi ra, sp, 2
-# CHECK-INST: slti a0, a2, -20
-# CHECK: encoding: [0x13,0x25,0xc6,0xfe]
-slti a0, a2, -20
-# CHECK-INST: sltiu s2, s3, 80
-# CHECK: encoding: [0x13,0xb9,0x09,0x05]
-sltiu s2, s3, 0x50
-# CHECK-INST: xori tp, t1, -99
-# CHECK: encoding: [0x13,0x42,0xd3,0xf9]
-xori tp, t1, -99
-# CHECK-INST: ori a0, a1, -2048
-# CHECK: encoding: [0x13,0xe5,0x05,0x80]
-ori a0, a1, -2048
-# CHECK-INST: ori a0, a1, -2048
-# CHECK: encoding: [0x13,0xe5,0x05,0x80]
-ori a0, a1, %lo(2048)
-# CHECK-INST: andi ra, sp, 2047
-# CHECK: encoding: [0x93,0x70,0xf1,0x7f]
-andi ra, sp, 2047
-# CHECK-INST: andi ra, sp, 2047
-# CHECK: encoding: [0x93,0x70,0xf1,0x7f]
-andi x1, x2, 2047
-
-# CHECK-INST: slli t3, t3, 31
-# CHECK: encoding: [0x13,0x1e,0xfe,0x01]
-slli t3, t3, 31
-# CHECK-INST: srli a0, a4, 0
-# CHECK: encoding: [0x13,0x55,0x07,0x00]
-srli a0, a4, 0
-# CHECK-INST: srai a2, sp, 15
-# CHECK: encoding: [0x13,0x56,0xf1,0x40]
-srai a2, sp, 15
-
-# CHECK-INST: add ra, zero, zero
-# CHECK: encoding: [0xb3,0x00,0x00,0x00]
-add ra, zero, zero
-# CHECK-INST: add ra, zero, zero
-# CHECK: encoding: [0xb3,0x00,0x00,0x00]
-add x1, x0, x0
-# CHECK-INST: sub t0, t2, t1
-# CHECK: encoding: [0xb3,0x82,0x63,0x40]
-sub t0, t2, t1
-# CHECK-INST: sll a5, a4, a3
-# CHECK: encoding: [0xb3,0x17,0xd7,0x00]
-sll a5, a4, a3
-# CHECK-INST: slt s0, s0, s0
-# CHECK: encoding: [0x33,0x24,0x84,0x00]
-slt s0, s0, s0
-# CHECK-INST: sltu gp, a0, a1
-# CHECK: encoding: [0xb3,0x31,0xb5,0x00]
-sltu gp, a0, a1
-# CHECK-INST: xor s2, s2, s8
-# CHECK: encoding: [0x33,0x49,0x89,0x01]
-xor s2, s2, s8
-# CHECK-INST: xor s2, s2, s8
-# CHECK: encoding: [0x33,0x49,0x89,0x01]
-xor x18, x18, x24
-# CHECK-INST: srl a0, s0, t0
-# CHECK: encoding: [0x33,0x55,0x54,0x00]
-srl a0, s0, t0
-# CHECK-INST: sra t0, s2, zero
-# CHECK: encoding: [0xb3,0x52,0x09,0x40]
-sra t0, s2, zero
-# CHECK-INST: or s10, t1, ra
-# CHECK: encoding: [0x33,0x6d,0x13,0x00]
-or s10, t1, ra
-# CHECK-INST: and a0, s2, s3
-# CHECK: encoding: [0x33,0x75,0x39,0x01]
-and a0, s2, s3
-
-# CHECK-INST: fence iorw, iorw
-# CHECK: encoding: [0x0f,0x00,0xf0,0x0f]
-fence iorw, iorw
-# CHECK-INST: fence io, rw
-# CHECK: encoding: [0x0f,0x00,0x30,0x0c]
-fence io, rw
-# CHECK-INST: fence r, w
-# CHECK: encoding: [0x0f,0x00,0x10,0x02]
-fence r,w
-# CHECK-INST: fence w, ir
-# CHECK: encoding: [0x0f,0x00,0xa0,0x01]
-fence w,ir
-
-# CHECK-INST: fence.i
-# CHECK: encoding: [0x0f,0x10,0x00,0x00]
-fence.i
-
-# CHECK-INST: ecall
-# CHECK: encoding: [0x73,0x00,0x00,0x00]
-ecall
-# CHECK-INST: ebreak
-# CHECK: encoding: [0x73,0x00,0x10,0x00]
-ebreak
-
-# CHECK-INST: csrrw t0, 4095, t1
-# CHECK: encoding: [0xf3,0x12,0xf3,0xff]
-csrrw t0, 0xfff, t1
-# CHECK-INST: csrrs s0, 3072, zero
-# CHECK: encoding: [0x73,0x24,0x00,0xc0]
-csrrs s0, 0xc00, x0
-# CHECK-INST: csrrs s3, 1, s5
-# CHECK: encoding: [0xf3,0xa9,0x1a,0x00]
-csrrs s3, 0x001, s5
-# CHECK-INST: csrrc sp, 0, ra
-# CHECK: encoding: [0x73,0xb1,0x00,0x00]
-csrrc sp, 0x000, ra
-# CHECK-INST: csrrwi a5, 0, 0
-# CHECK: encoding: [0xf3,0x57,0x00,0x00]
-csrrwi a5, 0x000, 0
-# CHECK-INST: csrrsi t2, 4095, 31
-# CHECK: encoding: [0xf3,0xe3,0xff,0xff]
-csrrsi t2, 0xfff, 31
-# CHECK-INST: csrrci t1, 320, 5
-# CHECK: encoding: [0x73,0xf3,0x02,0x14]
-csrrci t1, 0x140, 5
diff --git a/test/MC/RISCV/rv32m-invalid.s b/test/MC/RISCV/rv32m-invalid.s
deleted file mode 100644
index 5e268e8b916..00000000000
--- a/test/MC/RISCV/rv32m-invalid.s
+++ /dev/null
@@ -1,9 +0,0 @@
-# RUN: not llvm-mc -triple riscv32 -mattr=+m < %s 2>&1 | FileCheck %s
-
-# RV64M instructions can't be used for RV32
-mulw ra, sp, gp # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-divw tp, t0, t1 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-divuw t2, s0, s2 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-remw a0, a1, a2 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-remuw a3, a4, a5 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-
diff --git a/test/MC/RISCV/rv32m-valid.s b/test/MC/RISCV/rv32m-valid.s
deleted file mode 100644
index 70c1c29d3ad..00000000000
--- a/test/MC/RISCV/rv32m-valid.s
+++ /dev/null
@@ -1,33 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv32 -mattr=+m -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+m -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+m < %s \
-# RUN:     | llvm-objdump -mattr=+m -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+m < %s \
-# RUN:     | llvm-objdump -mattr=+m -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# CHECK-INST: mul a4, ra, s0
-# CHECK: encoding: [0x33,0x87,0x80,0x02]
-mul a4, ra, s0
-# CHECK-INST: mulh ra, zero, zero
-# CHECK: encoding: [0xb3,0x10,0x00,0x02]
-mulh x1, x0, x0
-# CHECK-INST: mulhsu t0, t2, t1
-# CHECK: encoding: [0xb3,0xa2,0x63,0x02]
-mulhsu t0, t2, t1
-# CHECK-INST: mulhu a5, a4, a3
-# CHECK: encoding: [0xb3,0x37,0xd7,0x02]
-mulhu a5, a4, a3
-# CHECK-INST: div s0, s0, s0
-# CHECK: encoding: [0x33,0x44,0x84,0x02]
-div s0, s0, s0
-# CHECK-INST: divu gp, a0, a1
-# CHECK: encoding: [0xb3,0x51,0xb5,0x02]
-divu gp, a0, a1
-# CHECK-INST: rem s2, s2, s8
-# CHECK: encoding: [0x33,0x69,0x89,0x03]
-rem s2, s2, s8
-# CHECK-INST: remu s2, s2, s8
-# CHECK: encoding: [0x33,0x79,0x89,0x03]
-remu x18, x18, x24
diff --git a/test/MC/RISCV/rv64a-invalid.s b/test/MC/RISCV/rv64a-invalid.s
deleted file mode 100644
index 7ab89ff9994..00000000000
--- a/test/MC/RISCV/rv64a-invalid.s
+++ /dev/null
@@ -1,14 +0,0 @@
-# RUN: not llvm-mc -triple riscv64 -mattr=+a < %s 2>&1 | FileCheck %s
-
-# Final operand must have parentheses
-amoswap.d a1, a2, a3 # CHECK: :[[@LINE]]:19: error: invalid operand for instruction
-amomin.d a1, a2, 1 # CHECK: :[[@LINE]]:18: error: invalid operand for instruction
-lr.d a4, a5 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-
-# Only .aq, .rl, and .aqrl suffixes are valid
-amoxor.d.rlqa a2, a3, (a4) # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-amoor.d.aq.rl a4, a5, (a6) # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-amoor.d. a4, a5, (a6) # CHECK: :[[@LINE]]:1: error: unrecognized instruction mnemonic
-
-# lr only takes two operands
-lr.d s0, (s1), s2 # CHECK: :[[@LINE]]:16: error: invalid operand for instruction
diff --git a/test/MC/RISCV/rv64a-valid.s b/test/MC/RISCV/rv64a-valid.s
deleted file mode 100644
index 18299548ffa..00000000000
--- a/test/MC/RISCV/rv64a-valid.s
+++ /dev/null
@@ -1,189 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+a -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+a < %s \
-# RUN:     | llvm-objdump -mattr=+a -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: not llvm-mc -triple riscv32 -mattr=+a < %s 2>&1 \
-# RUN:     | FileCheck -check-prefix=CHECK-RV32 %s
-
-# CHECK-INST: lr.d t0, (t1)
-# CHECK: encoding: [0xaf,0x32,0x03,0x10]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-lr.d t0, (t1)
-# CHECK-INST: lr.d.aq t1, (t2)
-# CHECK: encoding: [0x2f,0xb3,0x03,0x14]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-lr.d.aq t1, (t2)
-# CHECK-INST: lr.d.rl t2, (t3)
-# CHECK: encoding: [0xaf,0x33,0x0e,0x12]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-lr.d.rl t2, (t3)
-# CHECK-INST: lr.d.aqrl t3, (t4)
-# CHECK: encoding: [0x2f,0xbe,0x0e,0x16]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-lr.d.aqrl t3, (t4)
-
-# CHECK-INST: sc.d t6, t5, (t4)
-# CHECK: encoding: [0xaf,0xbf,0xee,0x19]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-sc.d t6, t5, (t4)
-# CHECK-INST: sc.d.aq t5, t4, (t3)
-# CHECK: encoding: [0x2f,0x3f,0xde,0x1d]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-sc.d.aq t5, t4, (t3)
-# CHECK-INST: sc.d.rl t4, t3, (t2)
-# CHECK: encoding: [0xaf,0xbe,0xc3,0x1b]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-sc.d.rl t4, t3, (t2)
-# CHECK-INST: sc.d.aqrl t3, t2, (t1)
-# CHECK: encoding: [0x2f,0x3e,0x73,0x1e]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-sc.d.aqrl t3, t2, (t1)
-
-# CHECK-INST: amoswap.d a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x37,0x14,0x08]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoswap.d a4, ra, (s0)
-# CHECK-INST: amoadd.d a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xb5,0xc6,0x00]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoadd.d a1, a2, (a3)
-# CHECK-INST: amoxor.d a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x36,0xd7,0x20]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoxor.d a2, a3, (a4)
-# CHECK-INST: amoand.d a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xb6,0xe7,0x60]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoand.d a3, a4, (a5)
-# CHECK-INST: amoor.d a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x37,0xf8,0x40]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoor.d a4, a5, (a6)
-# CHECK-INST: amomin.d a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xb7,0x08,0x81]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomin.d a5, a6, (a7)
-# CHECK-INST: amomax.d s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xbb,0x6a,0xa1]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomax.d s7, s6, (s5)
-# CHECK-INST: amominu.d s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x3b,0x5a,0xc1]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amominu.d s6, s5, (s4)
-# CHECK-INST: amomaxu.d s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xba,0x49,0xe1]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomaxu.d s5, s4, (s3)
-
-
-# CHECK-INST: amoswap.d.aq a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x37,0x14,0x0c]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoswap.d.aq a4, ra, (s0)
-# CHECK-INST: amoadd.d.aq a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xb5,0xc6,0x04]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoadd.d.aq a1, a2, (a3)
-# CHECK-INST: amoxor.d.aq a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x36,0xd7,0x24]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoxor.d.aq a2, a3, (a4)
-# CHECK-INST: amoand.d.aq a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xb6,0xe7,0x64]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoand.d.aq a3, a4, (a5)
-# CHECK-INST: amoor.d.aq a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x37,0xf8,0x44]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoor.d.aq a4, a5, (a6)
-# CHECK-INST: amomin.d.aq a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xb7,0x08,0x85]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomin.d.aq a5, a6, (a7)
-# CHECK-INST: amomax.d.aq s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xbb,0x6a,0xa5]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomax.d.aq s7, s6, (s5)
-# CHECK-INST: amominu.d.aq s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x3b,0x5a,0xc5]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amominu.d.aq s6, s5, (s4)
-# CHECK-INST: amomaxu.d.aq s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xba,0x49,0xe5]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomaxu.d.aq s5, s4, (s3)
-
-# CHECK-INST: amoswap.d.rl a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x37,0x14,0x0a]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoswap.d.rl a4, ra, (s0)
-# CHECK-INST: amoadd.d.rl a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xb5,0xc6,0x02]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoadd.d.rl a1, a2, (a3)
-# CHECK-INST: amoxor.d.rl a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x36,0xd7,0x22]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoxor.d.rl a2, a3, (a4)
-# CHECK-INST: amoand.d.rl a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xb6,0xe7,0x62]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoand.d.rl a3, a4, (a5)
-# CHECK-INST: amoor.d.rl a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x37,0xf8,0x42]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoor.d.rl a4, a5, (a6)
-# CHECK-INST: amomin.d.rl a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xb7,0x08,0x83]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomin.d.rl a5, a6, (a7)
-# CHECK-INST: amomax.d.rl s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xbb,0x6a,0xa3]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomax.d.rl s7, s6, (s5)
-# CHECK-INST: amominu.d.rl s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x3b,0x5a,0xc3]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amominu.d.rl s6, s5, (s4)
-# CHECK-INST: amomaxu.d.rl s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xba,0x49,0xe3]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomaxu.d.rl s5, s4, (s3)
-
-# CHECK-INST: amoswap.d.aqrl a4, ra, (s0)
-# CHECK: encoding: [0x2f,0x37,0x14,0x0e]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoswap.d.aqrl a4, ra, (s0)
-# CHECK-INST: amoadd.d.aqrl a1, a2, (a3)
-# CHECK: encoding: [0xaf,0xb5,0xc6,0x06]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoadd.d.aqrl a1, a2, (a3)
-# CHECK-INST: amoxor.d.aqrl a2, a3, (a4)
-# CHECK: encoding: [0x2f,0x36,0xd7,0x26]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoxor.d.aqrl a2, a3, (a4)
-# CHECK-INST: amoand.d.aqrl a3, a4, (a5)
-# CHECK: encoding: [0xaf,0xb6,0xe7,0x66]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoand.d.aqrl a3, a4, (a5)
-# CHECK-INST: amoor.d.aqrl a4, a5, (a6)
-# CHECK: encoding: [0x2f,0x37,0xf8,0x46]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amoor.d.aqrl a4, a5, (a6)
-# CHECK-INST: amomin.d.aqrl a5, a6, (a7)
-# CHECK: encoding: [0xaf,0xb7,0x08,0x87]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomin.d.aqrl a5, a6, (a7)
-# CHECK-INST: amomax.d.aqrl s7, s6, (s5)
-# CHECK: encoding: [0xaf,0xbb,0x6a,0xa7]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomax.d.aqrl s7, s6, (s5)
-# CHECK-INST: amominu.d.aqrl s6, s5, (s4)
-# CHECK: encoding: [0x2f,0x3b,0x5a,0xc7]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amominu.d.aqrl s6, s5, (s4)
-# CHECK-INST: amomaxu.d.aqrl s5, s4, (s3)
-# CHECK: encoding: [0xaf,0xba,0x49,0xe7]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-amomaxu.d.aqrl s5, s4, (s3)
diff --git a/test/MC/RISCV/rv64c-invalid.s b/test/MC/RISCV/rv64c-invalid.s
deleted file mode 100644
index 1dcf5e40a8a..00000000000
--- a/test/MC/RISCV/rv64c-invalid.s
+++ /dev/null
@@ -1,18 +0,0 @@
-# RUN: not llvm-mc -triple=riscv64 -mattr=+c < %s 2>&1 | FileCheck %s
-
-## GPRC
-c.ld ra, 4(sp) # CHECK: :[[@LINE]]:6: error: invalid operand for instruction
-c.sd sp, 4(sp) # CHECK: :[[@LINE]]:6: error: invalid operand for instruction
-
-## GPRNoX0
-c.ldsp  x0, 4(sp) # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-c.ldsp  zero, 4(sp) # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-
-# Out of range immediates
-
-## uimm9_lsb000
-c.ldsp  ra, 512(sp) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 8 bytes in the range [0, 504]
-c.sdsp  ra, -8(sp) # CHECK: :[[@LINE]]:13: error: immediate must be a multiple of 8 bytes in the range [0, 504]
-## uimm8_lsb000
-c.ld  s0, -8(sp) # CHECK: :[[@LINE]]:11: error: immediate must be a multiple of 8 bytes in the range [0, 248]
-c.sd  s0, 256(sp) # CHECK: :[[@LINE]]:11: error: immediate must be a multiple of 8 bytes in the range [0, 248]
diff --git a/test/MC/RISCV/rv64c-valid.s b/test/MC/RISCV/rv64c-valid.s
deleted file mode 100644
index 9521f9ebd08..00000000000
--- a/test/MC/RISCV/rv64c-valid.s
+++ /dev/null
@@ -1,19 +0,0 @@
-# RUN: llvm-mc -triple=riscv64 -mattr=+c -show-encoding < %s \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+c < %s \
-# RUN:     | llvm-objdump -mattr=+c -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# TODO: more exhaustive testing of immediate encoding.
-
-# CHECK-INST: c.ldsp  ra, 0(sp)
-# CHECK: encoding: [0x82,0x60]
-c.ldsp  ra, 0(sp)
-# CHECK-INST: c.sdsp  ra, 504(sp)
-# CHECK: encoding: [0x86,0xff]
-c.sdsp  ra, 504(sp)
-# CHECK-INST: c.ld    a4, 0(a3)
-# CHECK: encoding: [0x98,0x62]
-c.ld    a4, 0(a3)
-# CHECK-INST: c.sd    a5, 248(a3)
-# CHECK: encoding: [0xfc,0xfe]
-c.sd    a5, 248(a3)
diff --git a/test/MC/RISCV/rv64d-invalid.s b/test/MC/RISCV/rv64d-invalid.s
deleted file mode 100644
index 0f508aafd9b..00000000000
--- a/test/MC/RISCV/rv64d-invalid.s
+++ /dev/null
@@ -1,11 +0,0 @@
-# RUN: not llvm-mc -triple riscv64 -mattr=+d < %s 2>&1 | FileCheck %s
-
-# Integer registers where FP regs are expected
-fcvt.l.d ft0, a0 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-fcvt.lu.d ft1, a1 # CHECK: :[[@LINE]]:11: error: invalid operand for instruction
-fmv.x.d ft2, a2 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
-
-# FP registers where integer regs are expected
-fcvt.d.l a3, ft3 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-fcvt.d.lu a4, ft4 # CHECK: :[[@LINE]]:11: error: invalid operand for instruction
-fmv.d.x a5, ft5 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
diff --git a/test/MC/RISCV/rv64d-valid.s b/test/MC/RISCV/rv64d-valid.s
deleted file mode 100644
index e24fd250d43..00000000000
--- a/test/MC/RISCV/rv64d-valid.s
+++ /dev/null
@@ -1,49 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+d -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+d < %s \
-# RUN:     | llvm-objdump -mattr=+d -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: not llvm-mc -triple riscv32 -mattr=+d < %s 2>&1 \
-# RUN:     | FileCheck -check-prefix=CHECK-RV32 %s
-
-# CHECK-INST: fcvt.l.d a0, ft0
-# CHECK: encoding: [0x53,0x75,0x20,0xc2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.l.d a0, ft0
-# CHECK-INST: fcvt.lu.d a1, ft1
-# CHECK: encoding: [0xd3,0xf5,0x30,0xc2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.lu.d a1, ft1
-# CHECK-INST: fmv.x.d a2, ft2
-# CHECK: encoding: [0x53,0x06,0x01,0xe2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fmv.x.d a2, ft2
-# CHECK-INST: fcvt.d.l ft3, a3
-# CHECK: encoding: [0xd3,0xf1,0x26,0xd2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.d.l ft3, a3
-# CHECK-INST: fcvt.d.lu ft4, a4
-# CHECK: encoding: [0x53,0x72,0x37,0xd2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.d.lu ft4, a4
-# CHECK-INST: fmv.d.x ft5, a5
-# CHECK: encoding: [0xd3,0x82,0x07,0xf2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fmv.d.x ft5, a5
-
-# Rounding modes
-# CHECK-INST: fcvt.d.l ft3, a3, rne
-# CHECK: encoding: [0xd3,0x81,0x26,0xd2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.d.l ft3, a3, rne
-# CHECK-INST: fcvt.d.lu ft4, a4, rtz
-# CHECK: encoding: [0x53,0x12,0x37,0xd2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.d.lu ft4, a4, rtz
-# CHECK-INST: fcvt.l.d a0, ft0, rdn
-# CHECK: encoding: [0x53,0x25,0x20,0xc2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.l.d a0, ft0, rdn
-# CHECK-INST: fcvt.lu.d a1, ft1, rup
-# CHECK: encoding: [0xd3,0xb5,0x30,0xc2]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.lu.d a1, ft1, rup
diff --git a/test/MC/RISCV/rv64f-invalid.s b/test/MC/RISCV/rv64f-invalid.s
deleted file mode 100644
index 698da796a7e..00000000000
--- a/test/MC/RISCV/rv64f-invalid.s
+++ /dev/null
@@ -1,9 +0,0 @@
-# RUN: not llvm-mc -triple riscv64 -mattr=+f < %s 2>&1 | FileCheck %s
-
-# Integer registers where FP regs are expected
-fcvt.l.s ft0, a0 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-fcvt.lu.s ft1, a1 # CHECK: :[[@LINE]]:11: error: invalid operand for instruction
-
-# FP registers where integer regs are expected
-fcvt.s.l a2, ft2 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-fcvt.s.lu a3, ft3 # CHECK: :[[@LINE]]:11: error: invalid operand for instruction
diff --git a/test/MC/RISCV/rv64f-valid.s b/test/MC/RISCV/rv64f-valid.s
deleted file mode 100644
index eda826dfd97..00000000000
--- a/test/MC/RISCV/rv64f-valid.s
+++ /dev/null
@@ -1,37 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+f -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+f < %s \
-# RUN:     | llvm-objdump -mattr=+f -d - | FileCheck -check-prefix=CHECK-INST %s
-# RUN: not llvm-mc -triple riscv32 -mattr=+f < %s 2>&1 \
-# RUN:     | FileCheck -check-prefix=CHECK-RV32 %s
-
-# CHECK-INST: fcvt.l.s a0, ft0
-# CHECK: encoding: [0x53,0x75,0x20,0xc0]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.l.s a0, ft0
-# CHECK-INST: fcvt.lu.s a1, ft1
-# CHECK: encoding: [0xd3,0xf5,0x30,0xc0]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.lu.s a1, ft1
-# CHECK-INST: fcvt.s.l ft2, a2
-# CHECK: encoding: [0x53,0x71,0x26,0xd0]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.s.l ft2, a2
-# CHECK-INST: fcvt.s.lu ft3, a3
-# CHECK: encoding: [0xd3,0xf1,0x36,0xd0]
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.s.lu ft3, a3
-
-# Rounding modes
-# CHECK-INST: fcvt.l.s a4, ft4, rne
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.l.s a4, ft4, rne
-# CHECK-INST: fcvt.lu.s a5, ft5, rtz
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.lu.s a5, ft5, rtz
-# CHECK-INST: fcvt.s.l ft6, a6, rdn
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.s.l ft6, a6, rdn
-# CHECK-INST: fcvt.s.lu ft7, a7, rup
-# CHECK-RV32: :[[@LINE+1]]:1: error: instruction use requires an option to be enabled
-fcvt.s.lu ft7, a7, rup
diff --git a/test/MC/RISCV/rv64i-invalid.s b/test/MC/RISCV/rv64i-invalid.s
deleted file mode 100644
index d35fada3874..00000000000
--- a/test/MC/RISCV/rv64i-invalid.s
+++ /dev/null
@@ -1,20 +0,0 @@
-# RUN: not llvm-mc -triple riscv64 < %s 2>&1 | FileCheck %s
-
-# Out of range immediates
-## uimm5
-slliw a0, a0, 32 # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [0, 31]
-srliw a0, a0, -1 # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [0, 31]
-sraiw a0, a0, -19 # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [0, 31]
-
-## simm12
-addiw a0, a1, -2049 # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [-2048, 2047]
-ld ra, 2048(sp) # CHECK: :[[@LINE]]:8: error: immediate must be an integer in the range [-2048, 2047]
-
-# Illegal operand modifier
-## uimm5
-slliw a0, a0, %lo(1) # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [0, 31]
-srliw a0, a0, %lo(a) # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [0, 31]
-sraiw a0, a0, %hi(2) # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [0, 31]
-
-## simm12
-addiw a0, a1, %hi(foo) # CHECK: :[[@LINE]]:15: error: immediate must be an integer in the range [-2048, 2047]
diff --git a/test/MC/RISCV/rv64i-valid.s b/test/MC/RISCV/rv64i-valid.s
deleted file mode 100644
index d33b1d1ef43..00000000000
--- a/test/MC/RISCV/rv64i-valid.s
+++ /dev/null
@@ -1,98 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv64 -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 < %s \
-# RUN:     | llvm-objdump -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# CHECK-INST: lwu zero, 4(ra)
-# CHECK: encoding: [0x03,0xe0,0x40,0x00]
-lwu x0, 4(x1)
-# CHECK-INST: lwu sp, 4(gp)
-# CHECK: encoding: [0x03,0xe1,0x41,0x00]
-lwu x2, +4(x3)
-# CHECK-INST: lwu tp, -2048(t0)
-# CHECK: encoding: [0x03,0xe2,0x02,0x80]
-lwu x4, -2048(x5)
-# CHECK-INST: lwu t1, -2048(t2)
-# CHECK: encoding: [0x03,0xe3,0x03,0x80]
-lwu x6, %lo(2048)(x7)
-# CHECK-INST: lwu s0, 2047(s1)
-# CHECK: encoding: [0x03,0xe4,0xf4,0x7f]
-lwu x8, 2047(x9)
-
-# CHECK-INST: ld a0, -2048(a1)
-# CHECK: encoding: [0x03,0xb5,0x05,0x80]
-ld x10, -2048(x11)
-# CHECK-INST: ld a2, -2048(a3)
-# CHECK: encoding: [0x03,0xb6,0x06,0x80]
-ld x12, %lo(2048)(x13)
-# CHECK-INST: ld a4, 2047(a5)
-# CHECK: encoding: [0x03,0xb7,0xf7,0x7f]
-ld x14, 2047(x15)
-
-# CHECK-INST: sd a6, -2048(a7)
-# CHECK: encoding: [0x23,0xb0,0x08,0x81]
-sd x16, -2048(x17)
-# CHECK-INST: sd s2, -2048(s3)
-# CHECK: encoding: [0x23,0xb0,0x29,0x81]
-sd x18, %lo(2048)(x19)
-# CHECK-INST: sd s4, 2047(s5)
-# CHECK: encoding: [0xa3,0xbf,0x4a,0x7f]
-sd x20, 2047(x21)
-
-# CHECK-INST: slli s6, s7, 45
-# CHECK: encoding: [0x13,0x9b,0xdb,0x02]
-slli x22, x23, 45
-# CHECK-INST: srli s8, s9, 0
-# CHECK: encoding: [0x13,0xdc,0x0c,0x00]
-srli x24, x25, 0
-# CHECK-INST: srai s10, s11, 31
-# CHECK: encoding: [0x13,0xdd,0xfd,0x41]
-srai x26, x27, 31
-
-# CHECK-INST: addiw t3, t4, -2048
-# CHECK: encoding: [0x1b,0x8e,0x0e,0x80]
-addiw x28, x29, -2048
-# CHECK-INST: addiw t5, t6, 2047
-# CHECK: encoding: [0x1b,0x8f,0xff,0x7f]
-addiw x30, x31, 2047
-
-# CHECK-INST: slliw zero, ra, 0
-# CHECK: encoding: [0x1b,0x90,0x00,0x00]
-slliw zero, ra, 0
-# CHECK-INST: slliw sp, gp, 31
-# CHECK: encoding: [0x1b,0x91,0xf1,0x01]
-slliw sp, gp, 31
-# CHECK-INST: srliw tp, t0, 0
-# CHECK: encoding: [0x1b,0xd2,0x02,0x00]
-srliw tp, t0, 0
-# CHECK-INST: srliw t1, t2, 31
-# CHECK: encoding: [0x1b,0xd3,0xf3,0x01]
-srliw t1, t2, 31
-# CHECK-INST: sraiw s0, s1, 0
-# CHECK: encoding: [0x1b,0xd4,0x04,0x40]
-sraiw s0, s1, 0
-# CHECK-INST: sraiw a0, a1, 31
-# CHECK: encoding: [0x1b,0xd5,0xf5,0x41]
-sraiw a0, a1, 31
-
-# CHECK-INST: addw a2, a3, a4
-# CHECK: encoding: [0x3b,0x86,0xe6,0x00]
-addw a2, a3, a4
-# CHECK-INST: addw a5, a6, a7
-# CHECK: encoding: [0xbb,0x07,0x18,0x01]
-addw a5, a6, a7
-# CHECK-INST: subw s2, s3, s4
-# CHECK: encoding: [0x3b,0x89,0x49,0x41]
-subw s2, s3, s4
-# CHECK-INST: subw s5, s6, s7
-# CHECK: encoding: [0xbb,0x0a,0x7b,0x41]
-subw s5, s6, s7
-# CHECK-INST: sllw s8, s9, s10
-# CHECK: encoding: [0x3b,0x9c,0xac,0x01]
-sllw s8, s9, s10
-# CHECK-INST: srlw s11, t3, t4
-# CHECK: encoding: [0xbb,0x5d,0xde,0x01]
-srlw s11, t3, t4
-# CHECK-INST: sraw t5, t6, zero
-# CHECK: encoding: [0x3b,0xdf,0x0f,0x40]
-sraw t5, t6, zero
diff --git a/test/MC/RISCV/rv64m-valid.s b/test/MC/RISCV/rv64m-valid.s
deleted file mode 100644
index 3de540dac21..00000000000
--- a/test/MC/RISCV/rv64m-valid.s
+++ /dev/null
@@ -1,20 +0,0 @@
-# RUN: llvm-mc %s -triple=riscv64 -mattr=+m -show-encoding \
-# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
-# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+m < %s \
-# RUN:     | llvm-objdump -mattr=+m -d - | FileCheck -check-prefix=CHECK-INST %s
-
-# CHECK-INST: mulw ra, sp, gp
-# CHECK: encoding: [0xbb,0x00,0x31,0x02]
-mulw ra, sp, gp
-# CHECK-INST: divw tp, t0, t1
-# CHECK: encoding: [0x3b,0xc2,0x62,0x02]
-divw tp, t0, t1
-# CHECK-INST: divuw t2, s0, s2
-# CHECK: encoding: [0xbb,0x53,0x24,0x03]
-divuw t2, s0, s2
-# CHECK-INST: remw a0, a1, a2
-# CHECK: encoding: [0x3b,0xe5,0xc5,0x02]
-remw a0, a1, a2
-# CHECK-INST: remuw a3, a4, a5
-# CHECK: encoding: [0xbb,0x76,0xf7,0x02]
-remuw a3, a4, a5
diff --git a/test/Object/RISCV/elf-flags.yaml b/test/Object/RISCV/elf-flags.yaml
deleted file mode 100644
index ff8637f000a..00000000000
--- a/test/Object/RISCV/elf-flags.yaml
+++ /dev/null
@@ -1,24 +0,0 @@
-# RUN: yaml2obj %s > %t
-# RUN: llvm-readobj -file-headers %t | FileCheck -check-prefix=OBJ %s
-# RUN: obj2yaml %t | FileCheck -check-prefix=YAML %s
-
-# OBJ: Flags [ (0xD)
-# OBJ-NEXT:   EF_RISCV_FLOAT_ABI_DOUBLE (0x4)
-# OBJ-NEXT:   EF_RISCV_RVC (0x1)
-# OBJ-NEXT:   EF_RISCV_RVE (0x8)
-# OBJ-NEXT: ]
-
-# YAML:      FileHeader:
-# YAML-NEXT:   Class:           ELFCLASS32
-# YAML-NEXT:   Data:            ELFDATA2LSB
-# YAML-NEXT:   Type:            ET_EXEC
-# YAML-NEXT:   Machine:         EM_RISCV
-# YAML-NEXT:   Flags:           [ EF_RISCV_RVC, EF_RISCV_FLOAT_ABI_DOUBLE, EF_RISCV_RVE ]
-
---- !ELF
-FileHeader:
-  Class:           ELFCLASS32
-  Data:            ELFDATA2LSB
-  Type:            ET_EXEC
-  Machine:         EM_RISCV
-  Flags:           [ EF_RISCV_RVC, EF_RISCV_FLOAT_ABI_DOUBLE, EF_RISCV_RVE ]
diff --git a/test/Object/RISCV/lit.local.cfg b/test/Object/RISCV/lit.local.cfg
deleted file mode 100644
index c63820126f8..00000000000
--- a/test/Object/RISCV/lit.local.cfg
+++ /dev/null
@@ -1,2 +0,0 @@
-if not 'RISCV' in config.root.targets:
-    config.unsupported = True
diff --git a/tools/llvm-objdump/llvm-objdump.cpp b/tools/llvm-objdump/llvm-objdump.cpp
index 02eaa89f088..1a797c499ee 100644
--- a/tools/llvm-objdump/llvm-objdump.cpp
+++ b/tools/llvm-objdump/llvm-objdump.cpp
@@ -750,7 +750,6 @@ static std::error_code getRelocationValueString(const ELFObjectFile<ELFT> *Obj,
   case ELF::EM_HEXAGON:
   case ELF::EM_MIPS:
   case ELF::EM_BPF:
-  case ELF::EM_RISCV:
     res = Target;
     break;
   case ELF::EM_WEBASSEMBLY:
diff --git a/tools/llvm-readobj/ELFDumper.cpp b/tools/llvm-readobj/ELFDumper.cpp
index 9678667abff..2a341077e3c 100644
--- a/tools/llvm-readobj/ELFDumper.cpp
+++ b/tools/llvm-readobj/ELFDumper.cpp
@@ -995,7 +995,6 @@ static const EnumEntry<unsigned> ElfMachineType[] = {
   ENUM_ENT(EM_78KOR,         "EM_78KOR"),
   ENUM_ENT(EM_56800EX,       "EM_56800EX"),
   ENUM_ENT(EM_AMDGPU,        "EM_AMDGPU"),
-  ENUM_ENT(EM_RISCV,         "RISC-V"),
   ENUM_ENT(EM_WEBASSEMBLY,   "EM_WEBASSEMBLY"),
   ENUM_ENT(EM_LANAI,         "EM_LANAI"),
   ENUM_ENT(EM_BPF,           "EM_BPF"),
@@ -1249,14 +1248,6 @@ static const EnumEntry<unsigned> ElfHeaderAMDGPUFlags[] = {
   LLVM_READOBJ_ENUM_ENT(ELF, EF_AMDGPU_ARCH_GCN)
 };
 
-static const EnumEntry<unsigned> ElfHeaderRISCVFlags[] = {
-  LLVM_READOBJ_ENUM_ENT(ELF, EF_RISCV_RVC),
-  LLVM_READOBJ_ENUM_ENT(ELF, EF_RISCV_FLOAT_ABI_SINGLE),
-  LLVM_READOBJ_ENUM_ENT(ELF, EF_RISCV_FLOAT_ABI_DOUBLE),
-  LLVM_READOBJ_ENUM_ENT(ELF, EF_RISCV_FLOAT_ABI_QUAD),
-  LLVM_READOBJ_ENUM_ENT(ELF, EF_RISCV_RVE)
-};
-
 static const EnumEntry<unsigned> ElfSymOtherFlags[] = {
   LLVM_READOBJ_ENUM_ENT(ELF, STV_INTERNAL),
   LLVM_READOBJ_ENUM_ENT(ELF, STV_HIDDEN),
@@ -3642,8 +3633,6 @@ template <class ELFT> void LLVMStyle<ELFT>::printFileHeaders(const ELFO *Obj) {
     else if (e->e_machine == EM_AMDGPU)
       W.printFlags("Flags", e->e_flags, makeArrayRef(ElfHeaderAMDGPUFlags),
                    unsigned(ELF::EF_AMDGPU_ARCH));
-    else if (e->e_machine == EM_RISCV)
-      W.printFlags("Flags", e->e_flags, makeArrayRef(ElfHeaderRISCVFlags));
     else
       W.printFlags("Flags", e->e_flags);
     W.printNumber("HeaderSize", e->e_ehsize);
diff --git a/unittests/ADT/TripleTest.cpp b/unittests/ADT/TripleTest.cpp
index ed4a88067b1..375993e8c1a 100644
--- a/unittests/ADT/TripleTest.cpp
+++ b/unittests/ADT/TripleTest.cpp
@@ -278,24 +278,6 @@ TEST(TripleTest, ParsedIDs) {
   EXPECT_EQ(Triple::AMDPAL, T.getOS());
   EXPECT_EQ(Triple::UnknownEnvironment, T.getEnvironment());
 
-  T = Triple("riscv32-unknown-unknown");
-  EXPECT_EQ(Triple::riscv32, T.getArch());
-  EXPECT_EQ(Triple::UnknownVendor, T.getVendor());
-  EXPECT_EQ(Triple::UnknownOS, T.getOS());
-  EXPECT_EQ(Triple::UnknownEnvironment, T.getEnvironment());
-
-  T = Triple("riscv64-unknown-linux");
-  EXPECT_EQ(Triple::riscv64, T.getArch());
-  EXPECT_EQ(Triple::UnknownVendor, T.getVendor());
-  EXPECT_EQ(Triple::Linux, T.getOS());
-  EXPECT_EQ(Triple::UnknownEnvironment, T.getEnvironment());
-
-  T = Triple("riscv64-unknown-freebsd");
-  EXPECT_EQ(Triple::riscv64, T.getArch());
-  EXPECT_EQ(Triple::UnknownVendor, T.getVendor());
-  EXPECT_EQ(Triple::FreeBSD, T.getOS());
-  EXPECT_EQ(Triple::UnknownEnvironment, T.getEnvironment());
-
   T = Triple("armv7hl-suse-linux-gnueabi");
   EXPECT_EQ(Triple::arm, T.getArch());
   EXPECT_EQ(Triple::SUSE, T.getVendor());
@@ -643,16 +625,6 @@ TEST(TripleTest, BitWidthPredicates) {
   EXPECT_FALSE(T.isArch16Bit());
   EXPECT_TRUE(T.isArch32Bit());
   EXPECT_FALSE(T.isArch64Bit());
-
-  T.setArch(Triple::riscv32);
-  EXPECT_FALSE(T.isArch16Bit());
-  EXPECT_TRUE(T.isArch32Bit());
-  EXPECT_FALSE(T.isArch64Bit());
-
-  T.setArch(Triple::riscv64);
-  EXPECT_FALSE(T.isArch16Bit());
-  EXPECT_FALSE(T.isArch32Bit());
-  EXPECT_TRUE(T.isArch64Bit());
 }
 
 TEST(TripleTest, BitWidthArchVariants) {
@@ -744,14 +716,6 @@ TEST(TripleTest, BitWidthArchVariants) {
   EXPECT_EQ(Triple::wasm32, T.get32BitArchVariant().getArch());
   EXPECT_EQ(Triple::wasm64, T.get64BitArchVariant().getArch());
 
-  T.setArch(Triple::riscv32);
-  EXPECT_EQ(Triple::riscv32, T.get32BitArchVariant().getArch());
-  EXPECT_EQ(Triple::riscv64, T.get64BitArchVariant().getArch());
-
-  T.setArch(Triple::riscv64);
-  EXPECT_EQ(Triple::riscv32, T.get32BitArchVariant().getArch());
-  EXPECT_EQ(Triple::riscv64, T.get64BitArchVariant().getArch());
-
   T.setArch(Triple::thumbeb);
   EXPECT_EQ(Triple::thumbeb, T.get32BitArchVariant().getArch());
   EXPECT_EQ(Triple::aarch64_be, T.get64BitArchVariant().getArch());
diff --git a/utils/update_llc_test_checks.py b/utils/update_llc_test_checks.py
index 57d6e578259..a26ffcf153e 100755
--- a/utils/update_llc_test_checks.py
+++ b/utils/update_llc_test_checks.py
@@ -67,12 +67,6 @@ ASM_FUNCTION_PPC_RE = re.compile(
     r'.Lfunc_end[0-9]+:\n',
     flags=(re.M | re.S))
 
-ASM_FUNCTION_RISCV_RE = re.compile(
-    r'^_?(?P<func>[^:]+):[ \t]*#+[ \t]*@(?P=func)\n[^:]*?'
-    r'(?P<body>^##?[ \t]+[^:]+:.*?)\s*'
-    r'.Lfunc_end[0-9]+:\n',
-    flags=(re.M | re.S))
-
 ASM_FUNCTION_SYSTEMZ_RE = re.compile(
     r'^_?(?P<func>[^:]+):[ \t]*#+[ \t]*@(?P=func)\n'
     r'[ \t]+.cfi_startproc\n'
@@ -160,16 +154,6 @@ def scrub_asm_mips(asm, args):
   asm = SCRUB_TRAILING_WHITESPACE_RE.sub(r'', asm)
   return asm
 
-def scrub_asm_riscv(asm, args):
-  # Scrub runs of whitespace out of the assembly, but leave the leading
-  # whitespace in place.
-  asm = SCRUB_WHITESPACE_RE.sub(r' ', asm)
-  # Expand the tabs used for indentation.
-  asm = string.expandtabs(asm, 2)
-  # Strip trailing whitespace.
-  asm = SCRUB_TRAILING_WHITESPACE_RE.sub(r'', asm)
-  return asm
-
 def scrub_asm_systemz(asm, args):
   # Scrub runs of whitespace out of the assembly, but leave the leading
   # whitespace in place.
@@ -214,8 +198,6 @@ def build_function_body_dictionary(raw_tool_output, triple, prefixes, func_dict,
       'mips': (scrub_asm_mips, ASM_FUNCTION_MIPS_RE),
       'powerpc64': (scrub_asm_powerpc64, ASM_FUNCTION_PPC_RE),
       'powerpc64le': (scrub_asm_powerpc64, ASM_FUNCTION_PPC_RE),
-      'riscv32': (scrub_asm_riscv, ASM_FUNCTION_RISCV_RE),
-      'riscv64': (scrub_asm_riscv, ASM_FUNCTION_RISCV_RE),
       's390x': (scrub_asm_systemz, ASM_FUNCTION_SYSTEMZ_RE),
   }
   handlers = None
-- 
2.15.1

