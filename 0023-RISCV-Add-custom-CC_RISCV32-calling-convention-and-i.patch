From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alex Bradbury <asb@lowrisc.org>
Subject: [RISCV] Add custom CC_RISCV32 calling convention and improved call
 support

The TableGen-based calling convention definitions are inflexible, while
writing a function to implement the calling convention is very
straight-forward, and allows difficult cases to be handled more easily. With
this patch adds support for:
* Passing large scalars according to the RV32I calling convention
* Byval arguments
* Passing values on the stack when the argument registers are exhausted

It also documents the ABI lowering that a language frontend is expected to
perform. I would like to drastically simplify these requirements over time,
but this will require further discussion within the LLVM community.
---
 lib/Target/RISCV/RISCVCallingConv.td   |  12 +-
 lib/Target/RISCV/RISCVISelLowering.cpp | 227 +++++++++++++++++++--
 test/CodeGen/RISCV/byval.ll            |  27 +++
 test/CodeGen/RISCV/calling-conv.ll     | 362 +++++++++++++++++++++++++++++++++
 test/CodeGen/RISCV/calls.ll            |  27 +++
 test/CodeGen/RISCV/fp128.ll            |  14 ++
 6 files changed, 644 insertions(+), 25 deletions(-)
 create mode 100644 test/CodeGen/RISCV/byval.ll
 create mode 100644 test/CodeGen/RISCV/calling-conv.ll
 create mode 100644 test/CodeGen/RISCV/fp128.ll

diff --git a/lib/Target/RISCV/RISCVCallingConv.td b/lib/Target/RISCV/RISCVCallingConv.td
index 05a515e7b76..51a4470f5ca 100644
--- a/lib/Target/RISCV/RISCVCallingConv.td
+++ b/lib/Target/RISCV/RISCVCallingConv.td
@@ -15,17 +15,7 @@
 def RetCC_RISCV32 : CallingConv<[CCIfType<[i32], CCAssignToReg<[X10_32, X11_32]>>]>;
 
 // RISCV 32-bit C Calling convention.
-def CC_RISCV32 : CallingConv<[
-  // Promote i8/i16 args to i32
-  CCIfType<[ i8, i16 ], CCPromoteToType<i32>>,
-
-  // All arguments get passed in integer registers if there is space.
-  CCIfType<[i32], CCAssignToReg<[ X10_32, X11_32, X12_32, X13_32, X14_32,
-                                  X15_32, X16_32, X17_32 ]>>,
-
-  // Could be assigned to the stack in 8-byte aligned units, but unsupported
-  CCAssignToStack<8, 8>
-]>;
+def CC_RISCV32 : CustomCallingConv;
 
 def CSR : CalleeSavedRegs<(add X1_32, X3_32, X4_32, X8_32, X9_32,
                           (sequence "X%u_32", 18, 27))>;
diff --git a/lib/Target/RISCV/RISCVISelLowering.cpp b/lib/Target/RISCV/RISCVISelLowering.cpp
index 4b334dd8ff9..c755d2ae321 100644
--- a/lib/Target/RISCV/RISCVISelLowering.cpp
+++ b/lib/Target/RISCV/RISCVISelLowering.cpp
@@ -283,6 +283,109 @@ RISCVTargetLowering::EmitInstrWithCustomInserter(MachineInstr &MI,
 }
 
 // Calling Convention Implementation
+// The expectations for frontend ABI lowering vary from target to target.
+// Ideally, an LLVM frontend would be able to avoid worrying about many ABI
+// details, but this is a longer term goal. For now, we simply try to keep the
+// role of the frontend as simple and well-defined as possible. The rules can
+// be summarised as:
+// * Never split up large scalar arguments. We handle them here.
+// * If a hardfloat calling convention is being used, and the struct may be
+// passed in a pair of registers (fp+fp, int+fp), and both registers are
+// available, then pass as two separate arguments. If either the GPRs or FPRs
+// are exhausted, then pass according to the rule below.
+// * If a struct could never be passed in registers or directly in a stack
+// slot (as it is larger than 2x xlen and the floating point rules don't
+// apply), then pass it using a pointer with the byval attribute
+// * If a struct is less than 2x xlen, then coerce to either a two-element
+// word-sized array or a 2x xlen scalar (depending on alignment).
+// * The frontend can determine whether a struct or scalar is returned by
+// reference or not based on its size and fields. If it will be returned by
+// reference, the frontend must modify the prototype so a pointer with the
+// sret annotation is passed as the first argument.
+// * Struct return values and varargs should be coerced to structs containing
+// register-size fields in the same situations they would be for fixed
+// arguments.
+static bool CC_RISCV32(unsigned ValNo, MVT ValVT, MVT LocVT,
+                       CCValAssign::LocInfo LocInfo, ISD::ArgFlagsTy ArgFlags,
+                       CCState &State) {
+  static const MCPhysReg ArgGPRs[] = {
+      RISCV::X10_32, RISCV::X11_32, RISCV::X12_32, RISCV::X13_32,
+      RISCV::X14_32, RISCV::X15_32, RISCV::X16_32, RISCV::X17_32};
+
+  // Promote i8 and i16
+  if (LocVT == MVT::i8 || LocVT == MVT::i16) {
+    LocVT = MVT::i32;
+    if (ArgFlags.isSExt())
+      LocInfo = CCValAssign::SExt;
+    else if (ArgFlags.isZExt())
+      LocInfo = CCValAssign::ZExt;
+    else
+      LocInfo = CCValAssign::AExt;
+  }
+
+  SmallVectorImpl<CCValAssign> &PendingMembers = State.getPendingLocs();
+
+  // Split arguments might be passed indirectly, so keep track of the pending
+  // values.
+  if (ArgFlags.isSplit() || !PendingMembers.empty()) {
+    LocVT = MVT::i32;
+    LocInfo = CCValAssign::Indirect;
+    PendingMembers.push_back(
+        CCValAssign::getPending(ValNo, ValVT, LocVT, LocInfo));
+    if (!ArgFlags.isSplitEnd()) {
+      return false;
+    }
+  }
+
+  // If the split argument only had two elements, it should be passed directly
+  // in registers or on the stack
+  if (ArgFlags.isSplitEnd() && PendingMembers.size() <= 2) {
+    assert(PendingMembers.size() == 2);
+    // Apply the normal calling convention rules to the first half of the
+    // split argument
+    CCValAssign VA = PendingMembers[0];
+    PendingMembers.clear();
+    CC_RISCV32(VA.getValNo(), VA.getValVT(), VA.getLocVT(), CCValAssign::Full,
+               ISD::ArgFlagsTy(), State);
+    // Continue with this second half of the argument as normal
+    LocInfo = CCValAssign::Full;
+  }
+
+  // Allocate to a register if possible, or else a stack slot
+  unsigned Reg = State.AllocateReg(ArgGPRs);
+  unsigned StackOffset = Reg ? 0 : State.AllocateStack(4, 4);
+
+  // If we reach this point and PendingMembers is non-empty, we must be at the
+  // end of a split argument that must be passed indirect
+  if (!PendingMembers.empty()) {
+    assert(ArgFlags.isSplitEnd());
+    assert(PendingMembers.size() > 2);
+
+    for (auto &It : PendingMembers) {
+      if (Reg)
+        It.convertToReg(Reg);
+      else
+        It.convertToMem(StackOffset);
+      State.addLoc(It);
+    }
+    PendingMembers.clear();
+    return false;
+  }
+
+  assert(LocVT.getSizeInBits() == 32 &&
+         "Programming error: should have a 32-bit sized type at this point");
+  // TODO: do I need to bit-convert f32?
+  assert(LocVT == MVT::i32 && "Expected and i32 at this stage");
+
+  if (Reg) {
+    State.addLoc(CCValAssign::getReg(ValNo, ValVT, Reg, LocVT, LocInfo));
+  } else {
+    State.addLoc(
+        CCValAssign::getMem(ValNo, ValVT, StackOffset, LocVT, LocInfo));
+  }
+  return false;
+}
+
 #include "RISCVGenCallingConv.inc"
 
 // Transform physical registers into virtual registers
@@ -299,7 +402,9 @@ SDValue RISCVTargetLowering::LowerFormalArguments(
   }
 
   MachineFunction &MF = DAG.getMachineFunction();
+  MachineFrameInfo &MFI = MF.getFrameInfo();
   MachineRegisterInfo &RegInfo = MF.getRegInfo();
+  EVT PtrVT = getPointerTy(DAG.getDataLayout());
 
   if (IsVarArg) {
     llvm_unreachable("VarArg not supported");
@@ -310,27 +415,59 @@ SDValue RISCVTargetLowering::LowerFormalArguments(
   CCState CCInfo(CallConv, IsVarArg, MF, ArgLocs, *DAG.getContext());
   CCInfo.AnalyzeFormalArguments(Ins, CC_RISCV32);
 
-  for (auto &VA : ArgLocs) {
+  for (unsigned I = 0, E = ArgLocs.size(); I != E; ++I) {
+    CCValAssign &VA = ArgLocs[I];
+    EVT LocVT = VA.getLocVT();
+    SDValue ArgValue;
     if (VA.isRegLoc()) {
       // Arguments passed in registers
-      EVT RegVT = VA.getLocVT();
-      switch (RegVT.getSimpleVT().SimpleTy) {
+      switch (LocVT.getSimpleVT().SimpleTy) {
       case MVT::i32: {
         const unsigned VReg =
             RegInfo.createVirtualRegister(&RISCV::GPRRegClass);
         RegInfo.addLiveIn(VA.getLocReg(), VReg);
-        SDValue ArgIn = DAG.getCopyFromReg(Chain, DL, VReg, RegVT);
-
-        InVals.push_back(ArgIn);
+        ArgValue = DAG.getCopyFromReg(Chain, DL, VReg, LocVT);
         break;
       }
       default:
         DEBUG(dbgs() << "LowerFormalArguments Unhandled argument type: "
-                     << RegVT.getEVTString() << "\n");
+                     << LocVT.getEVTString() << "\n");
         llvm_unreachable("unhandled argument type");
       }
     } else {
-      llvm_unreachable("Defined with too many args");
+      assert(VA.isMemLoc() && "Argument not register or memory");
+
+      // Create the frame index object for this incoming parameter.
+      int FI = MFI.CreateFixedObject(LocVT.getSizeInBits() / 8,
+                                     VA.getLocMemOffset(), true);
+
+      // Create the SelectionDAG nodes corresponding to a load
+      // from this parameter
+      SDValue FIN = DAG.getFrameIndex(FI, PtrVT);
+      ArgValue = DAG.getLoad(VA.getLocVT(), DL, Chain, FIN,
+                             MachinePointerInfo::getFixedStack(MF, FI));
+    }
+    // Convert the value of the argument register into the value that's
+    // being passed.
+    if (VA.getLocInfo() == CCValAssign::Indirect) {
+      InVals.push_back(DAG.getLoad(VA.getValVT(), DL, Chain, ArgValue,
+                                   MachinePointerInfo()));
+      // If the original argument was split and passed by reference (e.g. i128
+      // on RV32), we need to load all parts of it here (using the same
+      // address).
+      unsigned ArgIndex = Ins[I].OrigArgIndex;
+      assert(Ins[I].PartOffset == 0);
+      while (I + 1 != E && Ins[I + 1].OrigArgIndex == ArgIndex) {
+        CCValAssign &PartVA = ArgLocs[I + 1];
+        unsigned PartOffset = Ins[I + 1].PartOffset;
+        SDValue Address = DAG.getNode(ISD::ADD, DL, PtrVT, ArgValue,
+                                      DAG.getIntPtrConstant(PartOffset, DL));
+        InVals.push_back(DAG.getLoad(PartVA.getValVT(), DL, Chain, Address,
+                                     MachinePointerInfo()));
+        ++I;
+      }
+    } else {
+      InVals.push_back(ArgValue);
     }
   }
   return Chain;
@@ -366,39 +503,101 @@ SDValue RISCVTargetLowering::LowerCall(CallLoweringInfo &CLI,
   // Get a count of how many bytes are to be pushed on the stack.
   unsigned NumBytes = ArgCCInfo.getNextStackOffset();
 
-  for (auto &Arg : Outs) {
-    if (!Arg.Flags.isByVal())
+  // Create local copies for byval args
+  SmallVector<SDValue, 8> ByValArgs;
+  for (unsigned I = 0, E = Outs.size(); I != E; ++I) {
+    ISD::ArgFlagsTy Flags = Outs[I].Flags;
+    if (!Flags.isByVal())
       continue;
-    llvm_unreachable("Passing arguments byval not yet implemented");
+
+    SDValue Arg = OutVals[I];
+    unsigned Size = Flags.getByValSize();
+    unsigned Align = Flags.getByValAlign();
+
+    int FI = MF.getFrameInfo().CreateStackObject(Size, Align, false);
+    SDValue FIPtr = DAG.getFrameIndex(FI, getPointerTy(DAG.getDataLayout()));
+    // TODO: will need to change for i64
+    SDValue SizeNode = DAG.getConstant(Size, DL, MVT::i32);
+
+    Chain = DAG.getMemcpy(Chain, DL, FIPtr, Arg, SizeNode, Align,
+                          /*IsVolatile=*/false,
+                          /*AlwaysInline=*/false,
+                          /*isTailCall=*/false, MachinePointerInfo(),
+                          MachinePointerInfo());
+    ByValArgs.push_back(FIPtr);
   }
 
   Chain = DAG.getCALLSEQ_START(Chain, NumBytes, 0, CLI.DL);
 
   // Copy argument values to their designated locations.
   SmallVector<std::pair<unsigned, SDValue>, 8> RegsToPass;
+  SmallVector<SDValue, 8> MemOpChains;
   SDValue StackPtr;
-  for (unsigned I = 0, E = ArgLocs.size(); I != E; ++I) {
+  for (unsigned I = 0, J = 0, E = ArgLocs.size(); I != E; ++I) {
     CCValAssign &VA = ArgLocs[I];
     SDValue ArgValue = OutVals[I];
+    ISD::ArgFlagsTy Flags = Outs[I].Flags;
 
     // Promote the value if needed.
-    // For now, only handle fully promoted arguments.
+    // For now, only handle fully promoted and indirect arguments.
     switch (VA.getLocInfo()) {
     case CCValAssign::Full:
       break;
+    case CCValAssign::Indirect: {
+      // Store the argument in a stack slot and pass its address.
+      SDValue SpillSlot = DAG.CreateStackTemporary(Outs[I].ArgVT);
+      int FI = cast<FrameIndexSDNode>(SpillSlot)->getIndex();
+      MemOpChains.push_back(
+          DAG.getStore(Chain, DL, ArgValue, SpillSlot,
+                       MachinePointerInfo::getFixedStack(MF, FI)));
+      // If the original argument was split (e.g. i128), we need
+      // to store all parts of it here (and pass just one address).
+      unsigned ArgIndex = Outs[I].OrigArgIndex;
+      assert(Outs[I].PartOffset == 0);
+      while (I + 1 != E && Outs[I + 1].OrigArgIndex == ArgIndex) {
+        SDValue PartValue = OutVals[I + 1];
+        unsigned PartOffset = Outs[I + 1].PartOffset;
+        SDValue Address = DAG.getNode(ISD::ADD, DL, PtrVT, SpillSlot,
+                                      DAG.getIntPtrConstant(PartOffset, DL));
+        MemOpChains.push_back(
+            DAG.getStore(Chain, DL, PartValue, Address,
+                         MachinePointerInfo::getFixedStack(MF, FI)));
+        ++I;
+      }
+      ArgValue = SpillSlot;
+      break;
+    }
     default:
       llvm_unreachable("Unknown loc info!");
     }
 
+    // Use local copy if it is a byval arg.
+    if (Flags.isByVal())
+      ArgValue = ByValArgs[J++];
+
     if (VA.isRegLoc())
       // Queue up the argument copies and emit them at the end.
       RegsToPass.push_back(std::make_pair(VA.getLocReg(), ArgValue));
     else {
       assert(VA.isMemLoc() && "Argument not register or memory");
-      llvm_unreachable("Passing arguments via the stack not yet implemented");
+
+      // Work out the address of the stack slot.
+      if (!StackPtr.getNode())
+        StackPtr = DAG.getCopyFromReg(Chain, DL, RISCV::X2_32, PtrVT);
+      SDValue Address =
+          DAG.getNode(ISD::ADD, DL, PtrVT, StackPtr,
+                      DAG.getIntPtrConstant(VA.getLocMemOffset(), DL));
+
+      // Emit the store.
+      MemOpChains.push_back(
+          DAG.getStore(Chain, DL, ArgValue, Address, MachinePointerInfo()));
     }
   }
 
+  // Join the stores, which are independent of one another.
+  if (!MemOpChains.empty())
+    Chain = DAG.getNode(ISD::TokenFactor, DL, MVT::Other, MemOpChains);
+
   SDValue Glue;
 
   // Build a sequence of copy-to-reg nodes, chained and glued together.
diff --git a/test/CodeGen/RISCV/byval.ll b/test/CodeGen/RISCV/byval.ll
new file mode 100644
index 00000000000..bef084f8376
--- /dev/null
+++ b/test/CodeGen/RISCV/byval.ll
@@ -0,0 +1,27 @@
+; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s | FileCheck %s
+
+%struct.Foo = type { i32, i32, i32, i16, i8 }
+@foo = global %struct.Foo { i32 1, i32 2, i32 3, i16 4, i8 5 }, align 4
+
+define i32 @callee(%struct.Foo* byval %f) nounwind {
+entry:
+; CHECK-LABEL: callee:
+; CHECK: lw a0, 0(a0)
+  %0 = getelementptr inbounds %struct.Foo, %struct.Foo* %f, i32 0, i32 0
+  %1 = load i32, i32* %0, align 4
+  ret i32 %1
+}
+
+
+define void @caller() nounwind {
+entry:
+; CHECK-LABEL: caller:
+; CHECK: lui a0, %hi(foo)
+; CHECK: addi a0, a0, %lo(foo)
+; CHECK: lw a0, 0(a0)
+; CHECK: sw a0, -24(s0)
+; CHECK: addi a0, s0, -24
+; CHECK-NEXT: jalr
+  %call = call i32 @callee(%struct.Foo* byval @foo)
+  ret void
+}
diff --git a/test/CodeGen/RISCV/calling-conv.ll b/test/CodeGen/RISCV/calling-conv.ll
new file mode 100644
index 00000000000..274993dd690
--- /dev/null
+++ b/test/CodeGen/RISCV/calling-conv.ll
@@ -0,0 +1,362 @@
+; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s | FileCheck %s
+
+; Check that on RV32, i64 and double are passed in a pair of registers. Unlike 
+; the convention for varargs, this need not be an aligned pair
+
+define i32 @callee_scalars(i32 %a, i64 %b, i32 %c, i32 %d, double %e) {
+; CHECK-LABEL: callee_scalars:
+; CHECK: addi s1, a4, 0
+; CHECK: addi s2, a3, 0
+; CHECK: addi s3, a1, 0
+; CHECK: addi s4, a0, 0
+; CHECK: lui a0, %hi(__fixdfsi)
+; CHECK: addi a2, a0, %lo(__fixdfsi)
+; CHECK: addi a0, a5, 0
+; CHECK: addi a1, a6, 0
+; CHECK: jalr ra, a2, 0
+; CHECK: add a1, s4, s3
+; CHECK: add a1, a1, s2
+; CHECK: add a1, a1, s1
+; CHECK: add a0, a1, a0
+  %b_trunc = trunc i64 %b to i32
+  %e_fptosi = fptosi double %e to i32
+  %1 = add i32 %a, %b_trunc
+  %2 = add i32 %1, %c
+  %3 = add i32 %2, %d
+  %4 = add i32 %3, %e_fptosi
+  ret i32 %4
+}
+
+define i32 @caller_scalars() {
+; CHECK-LABEL: caller_scalars:
+; CHECK: lui a0, 262464
+; CHECK: addi a6, a0, 0
+; CHECK: lui a0, %hi(callee_scalars)
+; CHECK: addi a7, a0, %lo(callee_scalars)
+; CHECK: addi a0, zero, 1
+; CHECK: addi a1, zero, 2
+; CHECK: addi a3, zero, 3
+; CHECK: addi a4, zero, 4
+; CHECK: addi a2, zero, 0
+; CHECK: addi a5, zero, 0
+; CHECK: jalr ra, a7, 0
+  %1 = call i32 @callee_scalars(i32 1, i64 2, i32 3, i32 4, double 5.000000e+00)
+  ret i32 %1
+}
+
+; Check that i128 and fp128 are passed indirectly
+
+define i32 @callee_large_scalars(i128 %a, fp128 %b) {
+; CHECK-LABEL: callee_large_scalars:
+; CHECK: lw a2, 12(a1)
+; CHECK: lw a3, 12(a0)
+; CHECK: xor a2, a3, a2
+; CHECK: lw a3, 4(a1)
+; CHECK: lw a4, 4(a0)
+; CHECK: xor a3, a4, a3
+; CHECK: or a2, a3, a2
+; CHECK: lw a3, 8(a1)
+; CHECK: lw a4, 8(a0)
+; CHECK: xor a3, a4, a3
+; CHECK: lw a1, 0(a1)
+; CHECK: lw a0, 0(a0)
+; CHECK: xor a0, a0, a1
+; CHECK: or a0, a0, a3
+; CHECK: or a0, a0, a2
+; CHECK: xor a0, a0, zero
+; CHECK: sltiu a0, a0, 1
+  %b_bitcast = bitcast fp128 %b to i128
+  %1 = icmp eq i128 %a, %b_bitcast
+  %2 = zext i1 %1 to i32
+  ret i32 %2
+}
+
+define i32 @caller_large_scalars() {
+; CHECK-LABEL: caller_large_scalars:
+; CHECK: sw zero, -40(s0)
+; CHECK: sw zero, -44(s0)
+; CHECK: sw zero, -48(s0)
+; CHECK: sw zero, -12(s0)
+; CHECK: sw zero, -16(s0)
+; CHECK: sw zero, -20(s0)
+; CHECK: addi a0, zero, 1
+; CHECK: sw a0, -24(s0)
+; CHECK: lui a0, 524272
+; CHECK: addi a0, a0, 0
+; CHECK: sw a0, -36(s0)
+; CHECK: lui a0, %hi(callee_large_scalars)
+; CHECK: addi a2, a0, %lo(callee_large_scalars)
+; CHECK: addi a0, s0, -24
+; CHECK: addi a1, s0, -48
+; CHECK: jalr ra, a2, 0
+  %1 = call i32 @callee_large_scalars(i128 1, fp128 0xL00000000000000007FFF000000000000)
+  ret i32 %1
+}
+
+; Check that the stack is used once the GPRs are exhausted
+
+define i32 @callee_many_scalars(i8 %a, i16 %b, i32 %c, i64 %d, i32 %e, i32 %f, i64 %g, i32 %h) {
+; CHECK-LABEL: callee_many_scalars:
+; CHECK: lw t0, 0(s0)
+; CHECK: xor a4, a4, t0
+; CHECK: xor a3, a3, a7
+; CHECK: or a3, a3, a4
+; CHECK: xor a3, a3, zero
+; CHECK: lui a4, 16
+; CHECK: addi a4, a4, -1
+; CHECK: and a1, a1, a4
+; CHECK: andi a0, a0, 255
+; CHECK: add a0, a0, a1
+; CHECK: add a0, a0, a2
+; CHECK: sltiu a1, a3, 1
+; CHECK: add a0, a1, a0
+; CHECK: add a0, a0, a5
+; CHECK: add a0, a0, a6
+; CHECK: lw a1, 4(s0)
+; CHECK: add a0, a0, a1
+  %a_ext = zext i8 %a to i32
+  %b_ext = zext i16 %b to i32
+  %1 = add i32 %a_ext, %b_ext
+  %2 = add i32 %1, %c
+  %3 = icmp eq i64 %d, %g
+  %4 = zext i1 %3 to i32
+  %5 = add i32 %4, %2
+  %6 = add i32 %5, %e
+  %7 = add i32 %6, %f
+  %8 = add i32 %7, %h
+  ret i32 %8
+}
+
+define i32 @caller_many_scalars() {
+; CHECK-LABEL: caller_many_scalars:
+; CHECK: addi a0, zero, 8
+; CHECK: sw a0, 4(sp)
+; CHECK: sw zero, 0(sp)
+; CHECK: lui a0, %hi(callee_many_scalars)
+; CHECK: addi t0, a0, %lo(callee_many_scalars)
+; CHECK: addi a0, zero, 1
+; CHECK: addi a1, zero, 2
+; CHECK: addi a2, zero, 3
+; CHECK: addi a3, zero, 4
+; CHECK: addi a5, zero, 5
+; CHECK: addi a6, zero, 6
+; CHECK: addi a7, zero, 7
+; CHECK: addi a4, zero, 0
+; CHECK: jalr ra, t0, 0
+  %1 = call i32 @callee_many_scalars(i8 1, i16 2, i32 3, i64 4, i32 5, i32 6, i64 7, i32 8)
+  ret i32 %1
+}
+
+; Check passing of coerced integer arrays
+
+%struct.small = type { i32, i32* }
+
+define i32 @callee_small_coerced_struct([2 x i32] %a.coerce) {
+; CHECK-LABEL: callee_small_coerced_struct:
+; CHECK: xor a0, a0, a1
+; CHECK: sltiu a0, a0, 1
+  %1 = extractvalue [2 x i32] %a.coerce, 0
+  %2 = extractvalue [2 x i32] %a.coerce, 1
+  %3 = icmp eq i32 %1, %2
+  %4 = zext i1 %3 to i32
+  ret i32 %4
+}
+
+define i32 @caller_small_coerced_struct() {
+; CHECK-LABEL: caller_small_coerced_struct:
+; CHECK: lui a0, %hi(callee_small_coerced_struct)
+; CHECK: addi a2, a0, %lo(callee_small_coerced_struct)
+; CHECK: addi a0, zero, 1
+; CHECK: addi a1, zero, 2
+; CHECK: jalr ra, a2, 0
+  %1 = call i32 @callee_small_coerced_struct([2 x i32] [i32 1, i32 2])
+  ret i32 %1
+}
+
+; Check large struct arguments, which are passed byval
+
+%struct.large = type { i32, i32, i32, i32 }
+
+define i32 @callee_large_struct(%struct.large* byval align 4 %a) {
+; CHECK-LABEL: callee_large_struct:
+; CHECK: lw a1, 12(a0)
+; CHECK: lw a0, 0(a0)
+; CHECK: add a0, a0, a1
+  %1 = getelementptr inbounds %struct.large, %struct.large* %a, i32 0, i32 0
+  %2 = getelementptr inbounds %struct.large, %struct.large* %a, i32 0, i32 3
+  %3 = load i32, i32* %1
+  %4 = load i32, i32* %2
+  %5 = add i32 %3, %4
+  ret i32 %5
+}
+
+define i32 @caller_large_struct() {
+; CHECK-LABEL: caller_large_struct:
+; CHECK: addi a0, zero, 1
+; CHECK: sw a0, -24(s0)
+; CHECK: sw a0, -40(s0)
+; CHECK: addi a0, zero, 2
+; CHECK: sw a0, -20(s0)
+; CHECK: sw a0, -36(s0)
+; CHECK: addi a0, zero, 3
+; CHECK: sw a0, -16(s0)
+; CHECK: sw a0, -32(s0)
+; CHECK: addi a0, zero, 4
+; CHECK: sw a0, -12(s0)
+; CHECK: sw a0, -28(s0)
+; CHECK: lui a0, %hi(callee_large_struct)
+; CHECK: addi a1, a0, %lo(callee_large_struct)
+; CHECK: addi a0, s0, -40
+; CHECK: jalr ra, a1, 0
+  %ls = alloca %struct.large, align 4
+  %1 = bitcast %struct.large* %ls to i8*
+  %a = getelementptr inbounds %struct.large, %struct.large* %ls, i32 0, i32 0
+  store i32 1, i32* %a
+  %b = getelementptr inbounds %struct.large, %struct.large* %ls, i32 0, i32 1
+  store i32 2, i32* %b
+  %c = getelementptr inbounds %struct.large, %struct.large* %ls, i32 0, i32 2
+  store i32 3, i32* %c
+  %d = getelementptr inbounds %struct.large, %struct.large* %ls, i32 0, i32 3
+  store i32 4, i32* %d
+  %2 = call i32 @callee_large_struct(%struct.large* byval align 4 %ls)
+  ret i32 %2
+}
+
+; Check return of 2x xlen scalars
+
+define i64 @callee_small_scalar_ret() {
+; CHECK-LABEL: callee_small_scalar_ret:
+; CHECK: lui a0, 466866
+; CHECK: addi a0, a0, 1677
+; CHECK: addi a1, zero, 287
+  ret i64 1234567898765
+}
+
+define i32 @caller_small_scalar_ret() {
+; CHECK-LABEL: caller_small_scalar_ret:
+; CHECK: lui a0, %hi(callee_small_scalar_ret)
+; CHECK: addi a0, a0, %lo(callee_small_scalar_ret)
+; CHECK: jalr ra, a0, 0
+; CHECK: lui a2, 56
+; CHECK: addi a2, a2, 580
+; CHECK: xor a1, a1, a2
+; CHECK: lui a2, 200614
+; CHECK: addi a2, a2, 647
+; CHECK: xor a0, a0, a2
+; CHECK: or a0, a0, a1
+; CHECK: xor a0, a0, zero
+; CHECK: sltiu a0, a0, 1
+  %1 = call i64 @callee_small_scalar_ret()
+  %2 = icmp eq i64 987654321234567, %1
+  %3 = zext i1 %2 to i32
+  ret i32 %3
+}
+
+; Check return of 2x xlen structs
+
+define %struct.small @callee_small_struct_ret() {
+; CHECK-LABEL: callee_small_struct_ret:
+; CHECK: addi a0, zero, 1
+; CHECK: addi a1, zero, 0
+  ret %struct.small { i32 1, i32* null }
+}
+
+define i32 @caller_small_struct_ret() {
+; CHECK-LABEL: caller_small_struct_ret:
+; CHECK: sw ra, 4(sp)
+; CHECK: sw s0, 0(sp)
+; CHECK: addi s0, sp, 8
+; CHECK: lui a0, %hi(callee_small_struct_ret)
+; CHECK: addi a0, a0, %lo(callee_small_struct_ret)
+; CHECK: jalr ra, a0, 0
+; CHECK: add a0, a0, a1
+; CHECK: lw s0, 0(sp)
+; CHECK: lw ra, 4(sp)
+; CHECK: addi sp, sp, 8
+; CHECK: jalr zero, ra, 0
+  %1 = call %struct.small @callee_small_struct_ret()
+  %2 = extractvalue %struct.small %1, 0
+  %3 = extractvalue %struct.small %1, 1
+  %4 = ptrtoint i32* %3 to i32
+  %5 = add i32 %2, %4
+  ret i32 %5
+}
+
+; Check return of >2x xlen scalars
+
+define void @callee_large_scalar_ret(fp128* noalias nocapture sret %agg.result) {
+; CHECK-LABEL: callee_large_scalar_ret:
+; CHECK: sw zero, 8(a0)
+; CHECK: sw zero, 4(a0)
+; CHECK: sw zero, 0(a0)
+; CHECK: lui a1, 524272
+; CHECK: addi a1, a1, 0
+; CHECK: sw a1, 12(a0)
+  store fp128 0xL00000000000000007FFF000000000000, fp128* %agg.result, align 16
+  ret void
+}
+
+define void @caller_large_scalar_ret() {
+; CHECK-LABEL: caller_large_scalar_ret:
+; CHECK: addi sp, sp, -32
+; CHECK: sw ra, 28(sp)
+; CHECK: sw s0, 24(sp)
+; CHECK: addi s0, sp, 32
+; CHECK: lui a0, %hi(callee_large_scalar_ret)
+; CHECK: addi a1, a0, %lo(callee_large_scalar_ret)
+; CHECK: addi a0, s0, -32
+; CHECK: jalr ra, a1, 0
+  %1 = alloca fp128, align 16
+  call void @callee_large_scalar_ret(fp128* sret %1)
+  ret void
+}
+
+; Check return of >2x xlen structs
+
+define void @callee_large_struct_ret(%struct.large* noalias sret %agg.result) {
+; CHECK-LABEL: callee_large_struct_ret:
+; CHECK: addi a1, zero, 2
+; CHECK: sw a1, 4(a0)
+; CHECK: addi a1, zero, 1
+; CHECK: sw a1, 0(a0)
+; CHECK: addi a1, zero, 3
+; CHECK: sw a1, 8(a0)
+; CHECK: addi a1, zero, 4
+; CHECK: sw a1, 12(a0)
+  %a = getelementptr inbounds %struct.large, %struct.large* %agg.result, i32 0, i32 0
+  store i32 1, i32* %a, align 4
+  %b = getelementptr inbounds %struct.large, %struct.large* %agg.result, i32 0, i32 1
+  store i32 2, i32* %b, align 4
+  %c = getelementptr inbounds %struct.large, %struct.large* %agg.result, i32 0, i32 2
+  store i32 3, i32* %c, align 4
+  %d = getelementptr inbounds %struct.large, %struct.large* %agg.result, i32 0, i32 3
+  store i32 4, i32* %d, align 4
+  ret void
+}
+
+define i32 @caller_large_struct_ret() {
+; CHECK-LABEL: caller_large_struct_ret:
+; CHECK: addi sp, sp, -24
+; CHECK: sw ra, 20(sp)
+; CHECK: sw s0, 16(sp)
+; CHECK: addi s0, sp, 24
+; CHECK: lui a0, %hi(callee_large_struct_ret)
+; CHECK: addi a1, a0, %lo(callee_large_struct_ret)
+; CHECK: addi a0, s0, -24
+; CHECK: jalr ra, a1, 0
+; CHECK: lw a0, -12(s0)
+; CHECK: lw a1, -24(s0)
+; CHECK: add a0, a1, a0
+; CHECK: lw s0, 16(sp)
+; CHECK: lw ra, 20(sp)
+; CHECK: addi sp, sp, 24
+; CHECK: jalr zero, ra, 0
+  %1 = alloca %struct.large
+  call void @callee_large_struct_ret(%struct.large* sret %1)
+  %2 = getelementptr inbounds %struct.large, %struct.large* %1, i32 0, i32 0
+  %3 = load i32, i32* %2
+  %4 = getelementptr inbounds %struct.large, %struct.large* %1, i32 0, i32 3
+  %5 = load i32, i32* %4
+  %6 = add i32 %3, %5
+  ret i32 %6
+}
diff --git a/test/CodeGen/RISCV/calls.ll b/test/CodeGen/RISCV/calls.ll
index 04113f8b854..f56f8b2d13c 100644
--- a/test/CodeGen/RISCV/calls.ll
+++ b/test/CodeGen/RISCV/calls.ll
@@ -33,3 +33,30 @@ define i32 @test_call_indirect(i32 (i32)* %a, i32 %b) {
   %1 = call i32 %a(i32 %b)
   ret i32 %1
 }
+
+declare i32 @external_many_args(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) nounwind
+
+define i32 @test_call_external_many_args(i32 %a) {
+; CHECK-LABEL: test_call_external_many_args:
+; CHECK: lui a0, %hi(external_many_args)
+; CHECK: addi t0, a0, %lo(external_many_args)
+; CHECK: jalr ra, t0, 0
+  %1 = call i32 @external_many_args(i32 %a, i32 %a, i32 %a, i32 %a, i32 %a,
+                                    i32 %a, i32 %a, i32 %a, i32 %a, i32 %a)
+  ret i32 %a
+}
+
+define i32 @defined_many_args(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 %j) {
+  %added = add i32 %j, 1
+  ret i32 %added
+}
+
+define i32 @test_call_defined_many_args(i32 %a) {
+; CHECK-LABEL: test_call_defined_many_args:
+; CHECK: lui a1, %hi(defined_many_args)
+; CHECK: addi t0, a1, %lo(defined_many_args)
+; CHECK: jalr ra, t0, 0
+  %1 = call i32 @defined_many_args(i32 %a, i32 %a, i32 %a, i32 %a, i32 %a,
+                                   i32 %a, i32 %a, i32 %a, i32 %a, i32 %a)
+  ret i32 %1
+}
diff --git a/test/CodeGen/RISCV/fp128.ll b/test/CodeGen/RISCV/fp128.ll
new file mode 100644
index 00000000000..0a3dca3c4d4
--- /dev/null
+++ b/test/CodeGen/RISCV/fp128.ll
@@ -0,0 +1,14 @@
+; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s | FileCheck %s
+
+@x = local_unnamed_addr global fp128 0xL00000000000000007FFF000000000000, align 16
+@y = local_unnamed_addr global fp128 0xL00000000000000007FFF000000000000, align 16
+
+define i32 @foo() {
+; CHECK-LABEL: foo:
+; TODO: add proper tests for the outpu
+  %1 = load fp128, fp128* @x, align 16
+  %2 = load fp128, fp128* @y, align 16
+  %cmp = fcmp une fp128 %1, %2
+  %3 = zext i1 %cmp to i32
+  ret i32 %3
+}
-- 
2.14.1

