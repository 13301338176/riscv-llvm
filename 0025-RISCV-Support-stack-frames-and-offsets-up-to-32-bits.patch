From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alex Bradbury <asb@lowrisc.org>
Subject: [RISCV] Support stack frames and offsets up to 32-bits

Also, factor out stack pointer manipulation to use the new 'adjustReg' helper
function.
---
 lib/Target/RISCV/RISCVFrameLowering.cpp | 78 +++++++++++++++++++++------------
 lib/Target/RISCV/RISCVFrameLowering.h   |  3 ++
 lib/Target/RISCV/RISCVRegisterInfo.cpp  | 68 +++++++++++++++++-----------
 lib/Target/RISCV/RISCVRegisterInfo.h    |  8 ++++
 test/CodeGen/RISCV/large-stack.ll       | 27 ++++++++++++
 5 files changed, 131 insertions(+), 53 deletions(-)
 create mode 100644 test/CodeGen/RISCV/large-stack.ll

diff --git a/lib/Target/RISCV/RISCVFrameLowering.cpp b/lib/Target/RISCV/RISCVFrameLowering.cpp
index cd1c33059d5..ad01a88f12c 100644
--- a/lib/Target/RISCV/RISCVFrameLowering.cpp
+++ b/lib/Target/RISCV/RISCVFrameLowering.cpp
@@ -57,6 +57,49 @@ void RISCVFrameLowering::determineFrameLayout(MachineFunction &MF) const {
   MFI.setStackSize(FrameSize);
 }
 
+void RISCVFrameLowering::adjustReg(MachineBasicBlock &MBB,
+                                   MachineBasicBlock::iterator MBBI,
+                                   const DebugLoc &DL, unsigned DestReg,
+                                   unsigned SrcReg, int64_t Val,
+                                   MachineInstr::MIFlag Flag) const {
+  MachineRegisterInfo &MRI = MBB.getParent()->getRegInfo();
+  const RISCVInstrInfo *TII = STI.getInstrInfo();
+
+  if (DestReg == SrcReg && Val == 0)
+    return;
+
+  if (isInt<12>(Val)) {
+    BuildMI(MBB, MBBI, DL, TII->get(RISCV::ADDI), DestReg)
+        .addReg(SrcReg)
+        .addImm(Val)
+        .setMIFlag(Flag);
+  } else if (isInt<32>(Val)) {
+    unsigned Opc = RISCV::ADD;
+    bool isSub = Val < 0;
+    if (isSub) {
+      Val = -Val;
+      Opc = RISCV::SUB;
+    }
+
+    unsigned ScratchReg = MRI.createVirtualRegister(&RISCV::GPRRegClass);
+    uint64_t Hi20 = ((Val + 0x800) >> 12) & 0xfffff;
+    uint64_t Lo12 = SignExtend64<12>(Val);
+    BuildMI(MBB, MBBI, DL, TII->get(RISCV::LUI), ScratchReg)
+        .addImm(Hi20)
+        .setMIFlag(Flag);
+    BuildMI(MBB, MBBI, DL, TII->get(RISCV::ADDI), ScratchReg)
+        .addReg(ScratchReg, RegState::Kill)
+        .addImm(Lo12)
+        .setMIFlag(Flag);
+    BuildMI(MBB, MBBI, DL, TII->get(Opc), DestReg)
+        .addReg(SrcReg)
+        .addReg(ScratchReg, RegState::Kill)
+        .setMIFlag(Flag);
+  } else {
+    llvm_unreachable("adjustReg cannot yet handle adjustments >32 bits");
+  }
+}
+
 void RISCVFrameLowering::emitPrologue(MachineFunction &MF,
                                       MachineBasicBlock &MBB) const {
   assert(&MF.front() == &MBB && "Shrink-wrapping not yet supported");
@@ -67,7 +110,6 @@ void RISCVFrameLowering::emitPrologue(MachineFunction &MF,
   }
 
   MachineFrameInfo &MFI = MF.getFrameInfo();
-  const RISCVInstrInfo *TII = STI.getInstrInfo();
   RISCVMachineFunctionInfo *RVFI = MF.getInfo<RISCVMachineFunctionInfo>();
   MachineBasicBlock::iterator MBBI = MBB.begin();
 
@@ -89,17 +131,8 @@ void RISCVFrameLowering::emitPrologue(MachineFunction &MF,
   if (StackSize == 0 && !MFI.adjustsStack())
     return;
 
-  if (!isInt<12>(StackSize)) {
-    report_fatal_error("Stack adjustment won't fit in signed 12-bit immediate");
-  }
-
   // Allocate space on the stack if necessary
-  if (StackSize != 0) {
-    BuildMI(MBB, MBBI, DL, TII->get(RISCV::ADDI), SPReg)
-        .addReg(SPReg)
-        .addImm(-StackSize)
-        .setMIFlag(MachineInstr::FrameSetup);
-  }
+  adjustReg(MBB, MBBI, DL, SPReg, SPReg, -StackSize, MachineInstr::FrameSetup);
 
   // The frame pointer is callee-saved, and code has been generated for us to
   // save it to the stack. We need to skip over the storing of callee-saved
@@ -111,10 +144,8 @@ void RISCVFrameLowering::emitPrologue(MachineFunction &MF,
   }
 
   // Generate new FP
-  BuildMI(MBB, MBBI, DL, TII->get(RISCV::ADDI), FPReg)
-      .addReg(SPReg)
-      .addImm(StackSize - RVFI->getVarArgsSaveSize())
-      .setMIFlag(MachineInstr::FrameSetup);
+  adjustReg(MBB, MBBI, DL, FPReg, SPReg, StackSize - RVFI->getVarArgsSaveSize(),
+            MachineInstr::FrameSetup);
 }
 
 void RISCVFrameLowering::emitEpilogue(MachineFunction &MF,
@@ -125,7 +156,6 @@ void RISCVFrameLowering::emitEpilogue(MachineFunction &MF,
   }
 
   MachineBasicBlock::iterator MBBI = MBB.getLastNonDebugInstr();
-  const RISCVInstrInfo *TII = STI.getInstrInfo();
   const RISCVRegisterInfo *RI = STI.getRegisterInfo();
   MachineFrameInfo &MFI = MF.getFrameInfo();
   RISCVMachineFunctionInfo *RVFI = MF.getInfo<RISCVMachineFunctionInfo>();
@@ -148,21 +178,13 @@ void RISCVFrameLowering::emitEpilogue(MachineFunction &MF,
   // necessary if the stack pointer was modified, meaning the stack size is
   // unknown.
   if (RI->needsStackRealignment(MF) || MFI.hasVarSizedObjects()) {
-    BuildMI(MBB, LastFrameDestroy, DL, TII->get(RISCV::ADDI), SPReg)
-        .addReg(FPReg)
-        .addImm(-StackSize + RVFI->getVarArgsSaveSize())
-        .setMIFlag(MachineInstr::FrameDestroy);
-  }
-
-  if (!isInt<12>(StackSize)) {
-    report_fatal_error("Stack adjustment won't fit in signed 12-bit immediate");
+    adjustReg(MBB, LastFrameDestroy, DL, SPReg, FPReg,
+              -StackSize + RVFI->getVarArgsSaveSize(),
+              MachineInstr::FrameDestroy);
   }
 
   // Deallocate stack
-  BuildMI(MBB, MBBI, DL, TII->get(RISCV::ADDI), SPReg)
-      .addReg(SPReg)
-      .addImm(StackSize)
-      .setMIFlag(MachineInstr::FrameDestroy);
+  adjustReg(MBB, MBBI, DL, SPReg, SPReg, StackSize, MachineInstr::FrameDestroy);
 }
 
 void RISCVFrameLowering::determineCalleeSaves(MachineFunction &MF,
diff --git a/lib/Target/RISCV/RISCVFrameLowering.h b/lib/Target/RISCV/RISCVFrameLowering.h
index 3bd8d0ffd84..e608a5e7d53 100644
--- a/lib/Target/RISCV/RISCVFrameLowering.h
+++ b/lib/Target/RISCV/RISCVFrameLowering.h
@@ -46,6 +46,9 @@ protected:
 
 private:
   void determineFrameLayout(MachineFunction &MF) const;
+  void adjustReg(MachineBasicBlock &MBB, MachineBasicBlock::iterator MBBI,
+                 const DebugLoc &DL, unsigned DestReg, unsigned SrcReg,
+                 int64_t Val, MachineInstr::MIFlag Flag) const;
 };
 }
 #endif
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.cpp b/lib/Target/RISCV/RISCVRegisterInfo.cpp
index 63899acff17..55f1091f301 100644
--- a/lib/Target/RISCV/RISCVRegisterInfo.cpp
+++ b/lib/Target/RISCV/RISCVRegisterInfo.cpp
@@ -63,6 +63,7 @@ void RISCVRegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,
   MachineFunction &MF = *MI.getParent()->getParent();
   RISCVMachineFunctionInfo *RVFI = MF.getInfo<RISCVMachineFunctionInfo>();
   MachineFrameInfo &MFI = MF.getFrameInfo();
+  MachineRegisterInfo &MRI = MF.getRegInfo();
   const TargetFrameLowering *TFI = MF.getSubtarget().getFrameLowering();
   const TargetInstrInfo *TII = MF.getSubtarget().getInstrInfo();
   DebugLoc DL = MI.getDebugLoc();
@@ -101,31 +102,48 @@ void RISCVRegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,
 
   MachineBasicBlock &MBB = *MI.getParent();
 
-  // If the offset fits in an immediate, then directly encode it
-  if (isInt<12>(Offset)) {
-    switch (MI.getOpcode()) {
-    case RISCV::LW_FI:
-      BuildMI(MBB, II, DL, TII->get(RISCV::LW), Reg)
-          .addReg(FrameReg)
-          .addImm(Offset);
-      break;
-    case RISCV::SW_FI:
-      BuildMI(MBB, II, DL, TII->get(RISCV::SW))
-          .addReg(Reg, getKillRegState(MI.getOperand(0).isKill()))
-          .addReg(FrameReg)
-          .addImm(Offset);
-      break;
-    case RISCV::LEA_FI:
-      BuildMI(MBB, II, DL, TII->get(RISCV::ADDI), Reg)
-          .addReg(FrameReg)
-          .addImm(Offset);
-      break;
-    default:
-      llvm_unreachable("Unexpected opcode");
-    }
-  } else {
-    report_fatal_error(
-        "Frame offsets outside of the signed 12-bit range not supported");
+  unsigned FrameRegFlags = 0;
+
+  if (!isInt<12>(Offset) && isInt<32>(Offset)) {
+    // The offset won't fit in an immediate, so use a scratch register instead
+    // Modify Offset and FrameReg appropriately
+    unsigned ScratchReg = MRI.createVirtualRegister(&RISCV::GPRRegClass);
+    uint64_t Hi20 = ((Offset + 0x800) >> 12) & 0xfffff;
+    uint64_t Lo12 = SignExtend64<12>(Offset);
+    BuildMI(MBB, II, DL, TII->get(RISCV::LUI), ScratchReg).addImm(Hi20);
+    BuildMI(MBB, II, DL, TII->get(RISCV::ADDI), ScratchReg)
+        .addReg(ScratchReg, RegState::Kill)
+        .addImm(Lo12);
+    BuildMI(MBB, II, DL, TII->get(RISCV::ADD), ScratchReg)
+        .addReg(FrameReg)
+        .addReg(ScratchReg, RegState::Kill);
+    Offset = 0;
+    FrameReg = ScratchReg;
+    FrameRegFlags = RegState::Kill;
+  } else if (!isInt<32>(Offset)) {
+    llvm_unreachable(
+        "Frame offsets outside of the signed 32-bit range not supported");
+  }
+
+  switch (MI.getOpcode()) {
+  case RISCV::LW_FI:
+    BuildMI(MBB, II, DL, TII->get(RISCV::LW), Reg)
+        .addReg(FrameReg, FrameRegFlags)
+        .addImm(Offset);
+    break;
+  case RISCV::SW_FI:
+    BuildMI(MBB, II, DL, TII->get(RISCV::SW))
+        .addReg(Reg, getKillRegState(MI.getOperand(0).isKill()))
+        .addReg(FrameReg, FrameRegFlags | RegState::Kill)
+        .addImm(Offset);
+    break;
+  case RISCV::LEA_FI:
+    BuildMI(MBB, II, DL, TII->get(RISCV::ADDI), Reg)
+        .addReg(FrameReg, FrameRegFlags)
+        .addImm(Offset);
+    break;
+  default:
+    llvm_unreachable("Unexpected opcode");
   }
 
   // Erase old instruction.
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.h b/lib/Target/RISCV/RISCVRegisterInfo.h
index 159b9d5bd9b..d01b61ee936 100644
--- a/lib/Target/RISCV/RISCVRegisterInfo.h
+++ b/lib/Target/RISCV/RISCVRegisterInfo.h
@@ -39,6 +39,14 @@ struct RISCVRegisterInfo : public RISCVGenRegisterInfo {
                            RegScavenger *RS = nullptr) const override;
 
   unsigned getFrameRegister(const MachineFunction &MF) const override;
+
+  bool requiresRegisterScavenging(const MachineFunction &MF) const override {
+    return true;
+  }
+
+  bool requiresFrameIndexScavenging(const MachineFunction &MF) const override {
+    return true;
+  }
 };
 }
 
diff --git a/test/CodeGen/RISCV/large-stack.ll b/test/CodeGen/RISCV/large-stack.ll
new file mode 100644
index 00000000000..18b357c25c7
--- /dev/null
+++ b/test/CodeGen/RISCV/large-stack.ll
@@ -0,0 +1,27 @@
+; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s | FileCheck %s
+
+; TODO: the quality of the generated code is poor
+
+define void @test() {
+; CHECK-LABEL: test:
+; CHECK: lui a0, 74565
+; CHECK: addi a0, a0, 1664
+; CHECK: sub sp, sp, a0
+; CHECK: lui a0, 74565
+; CHECK: addi a0, a0, 1660
+; CHECK: add a0, sp, a0
+; CHECK: sw s0, 0(a0)
+; CHECK: lui a0, 74565
+; CHECK: addi a0, a0, 1664
+; CHECK: add s0, sp, a0
+; CHECK: lui a0, 74565
+; CHECK: addi a0, a0, 1660
+; CHECK: add a0, sp, a0
+; CHECK: lw s0, 0(a0)
+; CHECK: lui a0, 74565
+; CHECK: addi a0, a0, 1664
+; CHECK: add sp, sp, a0
+; CHECK: jalr zero, ra, 0
+  %tmp = alloca [ 305419896 x i8 ] , align 4
+  ret void
+}
-- 
2.14.1

