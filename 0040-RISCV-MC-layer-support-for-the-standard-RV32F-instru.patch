From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alex Bradbury <asb@lowrisc.org>
Subject: [RISCV] MC-layer support for the standard RV32F instruction set
 extension

---
 .../RISCV/Disassembler/RISCVDisassembler.cpp       |  26 +++++
 lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h      |  11 +-
 lib/Target/RISCV/RISCV.td                          |   5 +
 lib/Target/RISCV/RISCVInstrFormats.td              |  29 +++++-
 lib/Target/RISCV/RISCVInstrInfo.td                 |   1 +
 lib/Target/RISCV/RISCVInstrInfoF.td                |  95 +++++++++++++++++
 lib/Target/RISCV/RISCVRegisterInfo.td              |   8 ++
 lib/Target/RISCV/RISCVSubtarget.cpp                |   3 +-
 lib/Target/RISCV/RISCVSubtarget.h                  |   2 +
 test/MC/RISCV/rv32f-invalid.s                      |  21 ++++
 test/MC/RISCV/rv32f-valid.s                        | 114 +++++++++++++++++++++
 test/MC/RISCV/rv32i-invalid.s                      |   4 +
 12 files changed, 308 insertions(+), 11 deletions(-)
 create mode 100644 lib/Target/RISCV/RISCVInstrInfoF.td
 create mode 100644 test/MC/RISCV/rv32f-invalid.s
 create mode 100644 test/MC/RISCV/rv32f-valid.s

diff --git a/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp b/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
index e64d875a567..06e2f8ffe21 100644
--- a/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
+++ b/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
@@ -81,6 +81,32 @@ static DecodeStatus DecodeGPRRegisterClass(MCInst &Inst, uint64_t RegNo,
    return MCDisassembler::Success;
 }
 
+static const unsigned FPR32DecoderTable[] = {
+  RISCV::F0_32,  RISCV::F1_32,  RISCV::F2_32,  RISCV::F3_32,
+  RISCV::F4_32,  RISCV::F5_32,  RISCV::F6_32,  RISCV::F7_32,
+  RISCV::F8_32,  RISCV::F9_32,  RISCV::F10_32, RISCV::F11_32,
+  RISCV::F12_32, RISCV::F13_32, RISCV::F14_32, RISCV::F15_32,
+  RISCV::F16_32, RISCV::F17_32, RISCV::F18_32, RISCV::F19_32,
+  RISCV::F20_32, RISCV::F21_32, RISCV::F22_32, RISCV::F23_32,
+  RISCV::F24_32, RISCV::F25_32, RISCV::F26_32, RISCV::F27_32,
+  RISCV::F28_32, RISCV::F29_32, RISCV::F30_32, RISCV::F31_32
+};
+
+static DecodeStatus DecodeFPR32RegisterClass(MCInst &Inst, uint64_t RegNo,
+                                             uint64_t Address,
+                                             const void *Decoder) {
+   if (RegNo > sizeof(FPR32DecoderTable)) {
+     return MCDisassembler::Fail;
+   }
+
+   // We must define our own mapping from RegNo to register identifier.
+   // Accessing index RegNo in the register class will work in the case that
+   // registers were added in ascending order, but not in general.
+   unsigned Reg = FPR32DecoderTable[RegNo];
+   Inst.addOperand(MCOperand::createReg(Reg));
+   return MCDisassembler::Success;
+}
+
 template <unsigned N>
 static DecodeStatus decodeUImmOperand(MCInst &Inst, uint64_t Imm,
                                       int64_t Address, const void *Decoder) {
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h b/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
index 59a41bd7072..9c96fe8b234 100644
--- a/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
+++ b/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
@@ -24,11 +24,12 @@ namespace RISCVII {
 enum {
   InstFormatPseudo = 0,
   InstFormatR = 1,
-  InstFormatI = 2,
-  InstFormatS = 3,
-  InstFormatB = 4,
-  InstFormatU = 5,
-  InstFormatOther = 6,
+  InstFormatR4 = 2,
+  InstFormatI = 3,
+  InstFormatS = 4,
+  InstFormatB = 5,
+  InstFormatU = 6,
+  InstFormatOther = 7,
 
   InstFormatMask = 15
 };
diff --git a/lib/Target/RISCV/RISCV.td b/lib/Target/RISCV/RISCV.td
index 541f466a878..a7674436727 100644
--- a/lib/Target/RISCV/RISCV.td
+++ b/lib/Target/RISCV/RISCV.td
@@ -23,6 +23,11 @@ def FeatureStdExtA : SubtargetFeature<"a", "HasStdExtA", "true",
 def HasStdExtA     :  Predicate<"Subtarget->hasStdExtA()">,
                            AssemblerPredicate<"FeatureStdExtA">;
 
+def FeatureStdExtF : SubtargetFeature<"f", "HasStdExtF", "true",
+                           "'F' (Single-Precision Floating-Point)">;
+def HasStdExtF     :  Predicate<"Subtarget->hasStdExtF()">,
+                           AssemblerPredicate<"FeatureStdExtF">;
+
 def Feature64Bit   : SubtargetFeature<"64bit", "HasRV64", "true",
                            "Implements RV64">;
 
diff --git a/lib/Target/RISCV/RISCVInstrFormats.td b/lib/Target/RISCV/RISCVInstrFormats.td
index 25b39f25f1b..0d3ddac7287 100644
--- a/lib/Target/RISCV/RISCVInstrFormats.td
+++ b/lib/Target/RISCV/RISCVInstrFormats.td
@@ -33,11 +33,12 @@ class InstFormat<bits<4> val> {
 }
 def InstFormatPseudo : InstFormat<0>;
 def InstFormatR      : InstFormat<1>;
-def InstFormatI      : InstFormat<2>;
-def InstFormatS      : InstFormat<3>;
-def InstFormatB      : InstFormat<4>;
-def InstFormatU      : InstFormat<5>;
-def InstFormatOther  : InstFormat<6>;
+def InstFormatR4     : InstFormat<2>;
+def InstFormatI      : InstFormat<3>;
+def InstFormatS      : InstFormat<4>;
+def InstFormatB      : InstFormat<5>;
+def InstFormatU      : InstFormat<6>;
+def InstFormatOther  : InstFormat<7>;
 
 class RISCVInst<dag outs, dag ins, string asmstr, list<dag> pattern,
                 InstFormat format>
@@ -103,6 +104,24 @@ class FRAtomic<bits<5> funct5, bit aq, bit rl, bits<3> funct3, bits<7> opcode, d
   let Opcode = opcode;
 }
 
+class FR4<bits<2> funct2, bits<3> funct3, bits<7> opcode, dag outs, dag ins,
+          string asmstr, list<dag> pattern>
+    : RISCVInst<outs, ins, asmstr, pattern, InstFormatR4>
+{
+  bits<5> rs3;
+  bits<5> rs2;
+  bits<5> rs1;
+  bits<5> rd;
+
+  let Inst{31-27} = rs3;
+  let Inst{26-25} = funct2;
+  let Inst{24-20} = rs2;
+  let Inst{19-15} = rs1;
+  let Inst{14-12} = funct3;
+  let Inst{11-7} = rd;
+  let Opcode = opcode;
+}
+
 class FI<bits<3> funct3, bits<7> opcode, dag outs, dag ins, string asmstr, list<dag> pattern>
     : RISCVInst<outs, ins, asmstr, pattern, InstFormatI>
 {
diff --git a/lib/Target/RISCV/RISCVInstrInfo.td b/lib/Target/RISCV/RISCVInstrInfo.td
index 193f3d9c6be..ebce21d36b1 100644
--- a/lib/Target/RISCV/RISCVInstrInfo.td
+++ b/lib/Target/RISCV/RISCVInstrInfo.td
@@ -435,3 +435,4 @@ let Defs = [X2_32], Uses = [X2_32] in {
 
 include "RISCVInstrInfoM.td"
 include "RISCVInstrInfoA.td"
+include "RISCVInstrInfoF.td"
diff --git a/lib/Target/RISCV/RISCVInstrInfoF.td b/lib/Target/RISCV/RISCVInstrInfoF.td
new file mode 100644
index 00000000000..85ae1255d30
--- /dev/null
+++ b/lib/Target/RISCV/RISCVInstrInfoF.td
@@ -0,0 +1,95 @@
+//===-- RISCVInstrInfoF.td - RISC-V 'F' instructions -------*- tablegen -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file describes the RISC-V instructions from the standard 'F', 
+// Single-Precision Floating-Point instruction set extension.
+//
+//===----------------------------------------------------------------------===//
+
+
+let Predicates = [HasStdExtF] in {
+
+let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in {
+class FPFMA_rr<bits<2> funct2, bits<3> funct3, bits<7> opcode, string OpcodeStr> :
+      FR4<funct2, funct3, opcode, (outs FPR32:$rd),
+          (ins FPR32:$rs1, FPR32:$rs2, FPR32:$rs3),
+          OpcodeStr#"\t$rd, $rs1, $rs2, $rs3", []>;
+
+class FPALU_rr<bits<7> funct7, bits<3> funct3, RegisterClass rdty,
+               RegisterClass rs1ty, RegisterClass rs2ty, string OpcodeStr> :
+        FR<funct7, funct3, 0b1010011, (outs rdty:$rd), (ins rs1ty:$rs1, rs2ty:$rs2),
+           OpcodeStr#"\t$rd, $rs1, $rs2", []>;
+
+class FPMisc_r<bits<7> funct7, bits<3> funct3,
+               RegisterClass rdty, RegisterClass rs1ty, string OpcodeStr> :
+        FR<funct7, funct3, 0b1010011, (outs rdty:$rd), (ins rs1ty:$rs1),
+           OpcodeStr#"\t$rd, $rs1", []>;
+}
+
+let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
+def FLW : FI<0b010, 0b0000111, (outs FPR32:$rd), (ins GPR:$rs1, simm12:$imm12), 
+             "flw\t$rd, ${imm12}(${rs1})", []>;
+
+
+// Operands for stores are in the order srcreg, base, offset rather than
+// reflecting the order these fields are specified in the instruction
+// encoding.
+
+let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
+def FSW : FS<0b010, 0b0100111, (outs), (ins FPR32:$rs2, GPR:$rs1, simm12:$imm12),
+             "fsw\t $rs2, ${imm12}(${rs1})", []>;
+
+// Hard-code the rounding mode to dynamic, as there doesn't seem to be any
+// standard RISC-V assembly syntax for specifying the rounding mode field
+
+def FMADD_S   : FPFMA_rr<0b00, 0b111, 0b1000011, "fmadd.s">;
+def FMSUB_S   : FPFMA_rr<0b00, 0b111, 0b1000111, "fmsub.s">;
+def FNMSUB_S  : FPFMA_rr<0b00, 0b111, 0b1001011, "fnmsub.s">;
+def FNMADD_S  : FPFMA_rr<0b00, 0b111, 0b1001111, "fnmadd.s">;
+
+
+def FADD_S    : FPALU_rr<0b0000000, 0b111, FPR32, FPR32, FPR32, "fadd.s">;
+def FSUB_S    : FPALU_rr<0b0000100, 0b111, FPR32, FPR32, FPR32, "fsub.s">;
+def FMUL_S    : FPALU_rr<0b0001000, 0b111, FPR32, FPR32, FPR32, "fmul.s">;
+def FDIV_S    : FPALU_rr<0b0001100, 0b111, FPR32, FPR32, FPR32, "fdiv.s">;
+
+let rs2 = 0b00000 in
+def FSQRT_S   : FPMisc_r<0b0101100, 0b111, FPR32, FPR32, "fsqrt.s">;
+
+def FSGNJ_S   : FPALU_rr<0b0010000, 0b000, FPR32, FPR32, FPR32, "fsgnj.s">;
+def FSGNJN_S  : FPALU_rr<0b0010000, 0b001, FPR32, FPR32, FPR32, "fsgnjn.s">;
+def FSGNJX_S  : FPALU_rr<0b0010000, 0b010, FPR32, FPR32, FPR32, "fsgnjx.s">;
+def FMIN_S    : FPALU_rr<0b0010100, 0b000, FPR32, FPR32, FPR32, "fmin.s">;
+def FMAX_S    : FPALU_rr<0b0010100, 0b001, FPR32, FPR32, FPR32, "fmax.s">;
+
+let rs2 = 0b00000 in
+def FCVT_W_S  : FPMisc_r<0b1100000, 0b111, GPR, FPR32, "fcvt.w.s">;
+
+let rs2 = 0b00001 in
+def FCVT_WU_S : FPMisc_r<0b1100000, 0b111, GPR, FPR32, "fcvt.wu.s">;
+
+let rs2 = 0b00000 in
+def FMV_X_W : FPMisc_r<0b1110000, 0b000, GPR, FPR32, "fmv.x.w">;
+
+def FEQ_S : FPALU_rr<0b1010000, 0b010, GPR, FPR32, FPR32, "feq.s">;
+def FLT_S : FPALU_rr<0b1010000, 0b001, GPR, FPR32, FPR32, "flt.s">;
+def FLE_S : FPALU_rr<0b1010000, 0b000, GPR, FPR32, FPR32, "fle.s">;
+
+let rs2 = 0b00000 in
+def FCLASS_S : FPMisc_r<0b1110000, 0b001, GPR, FPR32, "fclass.s">;
+
+let rs2 = 0b00000 in
+def FCVT_S_W : FPMisc_r<0b1101000, 0b111, FPR32, GPR, "fcvt.s.w">;
+
+let rs2 = 0b00001 in
+def FCVT_S_WU : FPMisc_r<0b1101000, 0b111, FPR32, GPR, "fcvt.s.wu">;
+
+let rs2 = 0b00000 in
+def FMV_W_X : FPMisc_r<0b1111000, 0b000, FPR32, GPR, "fmv.w.x">;
+}
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.td b/lib/Target/RISCV/RISCVRegisterInfo.td
index 787886a412d..3ce1d7eb810 100644
--- a/lib/Target/RISCV/RISCVRegisterInfo.td
+++ b/lib/Target/RISCV/RISCVRegisterInfo.td
@@ -149,3 +149,11 @@ def FPR32 : RegisterClass<"RISCV", [f32], 32, (add
   (sequence "F%u_32", 8, 9),
   (sequence "F%u_32", 18, 27)
 )>;
+
+def FPR64 : RegisterClass<"RISCV", [f64], 64, (add
+  (sequence "F%u_64", 0, 7),
+  (sequence "F%u_64", 10, 17),
+  (sequence "F%u_64", 28, 31),
+  (sequence "F%u_64", 8, 9),
+  (sequence "F%u_64", 18, 27)
+)>;
diff --git a/lib/Target/RISCV/RISCVSubtarget.cpp b/lib/Target/RISCV/RISCVSubtarget.cpp
index 8a8ba9590eb..2dfec6158fd 100644
--- a/lib/Target/RISCV/RISCVSubtarget.cpp
+++ b/lib/Target/RISCV/RISCVSubtarget.cpp
@@ -29,4 +29,5 @@ void RISCVSubtarget::anchor() {}
 RISCVSubtarget::RISCVSubtarget(const Triple &TT, const std::string &CPU,
                                const std::string &FS, const TargetMachine &TM)
     : RISCVGenSubtargetInfo(TT, CPU, FS), InstrInfo(), FrameLowering(*this),
-      TLInfo(TM, *this), HasStdExtM(false), HasStdExtA(false), HasRV64(false) {}
+      TLInfo(TM, *this), HasStdExtM(false), HasStdExtA(false),
+      HasStdExtF(false), HasRV64(false) {}
diff --git a/lib/Target/RISCV/RISCVSubtarget.h b/lib/Target/RISCV/RISCVSubtarget.h
index c617126b194..daeaa34f877 100644
--- a/lib/Target/RISCV/RISCVSubtarget.h
+++ b/lib/Target/RISCV/RISCVSubtarget.h
@@ -36,6 +36,7 @@ class RISCVSubtarget : public RISCVGenSubtargetInfo {
   SelectionDAGTargetInfo TSInfo;
   bool HasStdExtM;
   bool HasStdExtA;
+  bool HasStdExtF;
   bool HasRV64;
 
 public:
@@ -62,6 +63,7 @@ public:
   }
   bool hasStdExtM() const { return HasStdExtM; }
   bool hasStdExtA() const { return HasStdExtA; }
+  bool hasStdExtF() const { return HasStdExtF; }
   bool is64Bit() const { return HasRV64; }
 };
 } // End llvm namespace
diff --git a/test/MC/RISCV/rv32f-invalid.s b/test/MC/RISCV/rv32f-invalid.s
new file mode 100644
index 00000000000..a5654bd1c22
--- /dev/null
+++ b/test/MC/RISCV/rv32f-invalid.s
@@ -0,0 +1,21 @@
+# RUN: not llvm-mc -triple riscv32 < %s 2>&1 | FileCheck %s
+
+# Out of range immediates
+## simm12
+flw ft1, -2049(a0) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+fsw ft2, 2048(a1) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+
+# Memory operand not formatted correctly
+flw ft1, a0, -200 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+fsw ft2, a1, 100 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+
+# Invalid register names
+flw ft15, 100(a0) # CHECK: :[[@LINE]]:5: error: invalid operand for instruction
+flw ft1, 100(a10) # CHECK: :[[@LINE]]:14: error: expected register
+fsgnjn.s fa100, fa2, fa3 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
+
+# Integer registers where FP regs are expected
+fmv.x.w fs7, a2 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
+
+# FP registers where integer regs are expected
+fmv.w.x a8, ft2 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
diff --git a/test/MC/RISCV/rv32f-valid.s b/test/MC/RISCV/rv32f-valid.s
new file mode 100644
index 00000000000..d8cdad059e7
--- /dev/null
+++ b/test/MC/RISCV/rv32f-valid.s
@@ -0,0 +1,114 @@
+# RUN: llvm-mc %s -triple=riscv32 -mattr=+f -show-encoding \
+# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
+# RUN: llvm-mc %s -triple=riscv64 -mattr=+f -show-encoding \
+# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
+# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+f < %s \
+# RUN:     | llvm-objdump -mattr=+f -d - | FileCheck -check-prefix=CHECK-INST %s
+# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+f < %s \
+# RUN:     | llvm-objdump -mattr=+f -d - | FileCheck -check-prefix=CHECK-INST %s
+
+# CHECK-INST: flw ft0, 12(a0)
+# CHECK: encoding: [0x07,0x20,0xc5,0x00]
+flw f0, 12(a0)
+# CHECK-INST: flw ft1, 4(ra)
+# CHECK: encoding: [0x87,0xa0,0x40,0x00]
+flw f1, +4(ra)
+# CHECK-INST: flw ft2, -2048(a3)
+# CHECK: encoding: [0x07,0xa1,0x06,0x80]
+flw f2, -2048(x13)
+# CHECK-INST: flw ft3, -2048(s1)
+# CHECK: encoding: [0x87,0xa1,0x04,0x80]
+flw f3, %lo(2048)(s1)
+# CHECK-INST: flw ft4, 2047(s2)
+# CHECK: encoding: [0x07,0x22,0xf9,0x7f]
+flw f4, 2047(s2)
+# CHECK-INST: flw ft5, 0(s3)
+# CHECK: encoding: [0x87,0xa2,0x09,0x00]
+flw f5, 0(s3)
+
+# CHECK-INST: fsw ft6, 2047(s4)
+# CHECK: encoding: [0xa7,0x2f,0x6a,0x7e]
+fsw f6, 2047(s4)
+# CHECK-INST: fsw ft7, -2048(s5)
+# CHECK: encoding: [0x27,0xa0,0x7a,0x80]
+fsw f7, -2048(s5)
+# CHECK-INST: fsw fs0, -2048(s6)
+# CHECK: encoding: [0x27,0x20,0x8b,0x80]
+fsw f8, %lo(2048)(s6)
+# CHECK-INST: fsw fs1, 999(s7)
+# CHECK: encoding: [0xa7,0xa3,0x9b,0x3e]
+fsw f9, 999(s7)
+
+# CHECK-INST: fmadd.s fa0, fa1, fa2, fa3
+# CHECK: encoding: [0x43,0xf5,0xc5,0x68]
+fmadd.s f10, f11, f12, f13
+# CHECK-INST: fmsub.s fa4, fa5, fa6, fa7
+# CHECK: encoding: [0x47,0xf7,0x07,0x89]
+fmsub.s f14, f15, f16, f17
+# CHECK-INST: fnmsub.s fs2, fs3, fs4, fs5
+# CHECK: encoding: [0x4b,0xf9,0x49,0xa9]
+fnmsub.s f18, f19, f20, f21
+# CHECK-INST: fnmadd.s fs6, fs7, fs8, fs9
+# CHECK: encoding: [0x4f,0xfb,0x8b,0xc9]
+fnmadd.s f22, f23, f24, f25
+
+# CHECK-INST: fadd.s fs10, fs11, ft8
+# CHECK: encoding: [0x53,0xfd,0xcd,0x01]
+fadd.s f26, f27, f28
+# CHECK-INST: fsub.s ft9, ft10, ft11
+# CHECK: encoding: [0xd3,0x7e,0xff,0x09]
+fsub.s f29, f30, f31
+# CHECK-INST: fmul.s ft0, ft1, ft2
+# CHECK: encoding: [0x53,0xf0,0x20,0x10]
+fmul.s ft0, ft1, ft2
+# CHECK-INST: fdiv.s ft3, ft4, ft5
+# CHECK: encoding: [0xd3,0x71,0x52,0x18]
+fdiv.s ft3, ft4, ft5
+# CHECK-INST: fsqrt.s ft6, ft7
+# CHECK: encoding: [0x53,0xf3,0x03,0x58]
+fsqrt.s ft6, ft7
+# CHECK-INST: fsgnj.s fs1, fa0, fa1
+# CHECK: encoding: [0xd3,0x04,0xb5,0x20]
+fsgnj.s fs1, fa0, fa1
+# CHECK-INST: fsgnjn.s fa1, fa3, fa4
+# CHECK: encoding: [0xd3,0x95,0xe6,0x20]
+fsgnjn.s fa1, fa3, fa4
+# CHECK-INST: fsgnjx.s fa4, fa3, fa2
+# CHECK: encoding: [0x53,0xa7,0xc6,0x20]
+fsgnjx.s fa4, fa3, fa2
+# CHECK-INST: fmin.s fa5, fa6, fa7
+# CHECK: encoding: [0xd3,0x07,0x18,0x29]
+fmin.s fa5, fa6, fa7
+# CHECK-INST: fmax.s fs2, fs3, fs4
+# CHECK: encoding: [0x53,0x99,0x49,0x29]
+fmax.s fs2, fs3, fs4
+# CHECK-INST: fcvt.w.s a0, fs5
+# CHECK: encoding: [0x53,0xf5,0x0a,0xc0]
+fcvt.w.s a0, fs5
+# CHECK-INST: fcvt.wu.s a1, fs6
+# CHECK: encoding: [0xd3,0x75,0x1b,0xc0]
+fcvt.wu.s a1, fs6
+# CHECK-INST: fmv.x.w a2, fs7
+# CHECK: encoding: [0x53,0x86,0x0b,0xe0]
+fmv.x.w a2, fs7
+# CHECK-INST: feq.s a1, fs8, fs9
+# CHECK: encoding: [0xd3,0x25,0x9c,0xa1]
+feq.s a1, fs8, fs9
+# CHECK-INST: flt.s a2, fs10, fs11
+# CHECK: encoding: [0x53,0x16,0xbd,0xa1]
+flt.s a2, fs10, fs11
+# CHECK-INST: fle.s a3, ft8, ft9
+# CHECK: encoding: [0xd3,0x06,0xde,0xa1]
+fle.s a3, ft8, ft9
+# CHECK-INST: fclass.s a3, ft10
+# CHECK: encoding: [0xd3,0x16,0x0f,0xe0]
+fclass.s a3, ft10
+# CHECK-INST: fcvt.s.w ft11, a4
+# CHECK: encoding: [0xd3,0x7f,0x07,0xd0]
+fcvt.s.w ft11, a4
+# CHECK-INST: fcvt.s.wu ft0, a5
+# CHECK: encoding: [0x53,0xf0,0x17,0xd0]
+fcvt.s.wu ft0, a5
+# CHECK-INST: fmv.w.x ft1, a6
+# CHECK: encoding: [0xd3,0x00,0x08,0xf0]
+fmv.w.x ft1, a6
diff --git a/test/MC/RISCV/rv32i-invalid.s b/test/MC/RISCV/rv32i-invalid.s
index c321d0481ca..d5f98e72626 100644
--- a/test/MC/RISCV/rv32i-invalid.s
+++ b/test/MC/RISCV/rv32i-invalid.s
@@ -133,3 +133,7 @@ xor s2, s2 # CHECK: :[[@LINE]]:1: error: too few operands for instruction
 # Instruction not in the base ISA
 mul a4, ra, s0 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
 amomaxu.w s5, s4, (s3) # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
+fadd.s ft0, ft1, ft2 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
+
+# Using floating point registers when integer registers are expected
+addi a2, ft0, 24 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
-- 
2.14.1

