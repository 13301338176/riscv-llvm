From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alex Bradbury <asb@lowrisc.org>
Subject: [RISCV] MC-layer support for the standard RV32D extension (WIP)

---
 lib/Target/RISCV/RISCV.td           |   6 ++
 lib/Target/RISCV/RISCVInstrInfo.td  |   1 +
 lib/Target/RISCV/RISCVInstrInfoD.td |  80 ++++++++++++++++++++++++
 lib/Target/RISCV/RISCVInstrInfoF.td |  17 +++---
 lib/Target/RISCV/RISCVSubtarget.h   |   1 +
 test/MC/RISCV/rv32d-invalid.s       |  21 +++++++
 test/MC/RISCV/rv32d-valid.s         | 118 ++++++++++++++++++++++++++++++++++++
 test/MC/RISCV/rv32f-invalid.s       |   5 +-
 8 files changed, 240 insertions(+), 9 deletions(-)
 create mode 100644 lib/Target/RISCV/RISCVInstrInfoD.td
 create mode 100644 test/MC/RISCV/rv32d-invalid.s
 create mode 100644 test/MC/RISCV/rv32d-valid.s

diff --git a/lib/Target/RISCV/RISCV.td b/lib/Target/RISCV/RISCV.td
index a7674436727..b2bc0d88d83 100644
--- a/lib/Target/RISCV/RISCV.td
+++ b/lib/Target/RISCV/RISCV.td
@@ -28,6 +28,12 @@ def FeatureStdExtF : SubtargetFeature<"f", "HasStdExtF", "true",
 def HasStdExtF     :  Predicate<"Subtarget->hasStdExtF()">,
                            AssemblerPredicate<"FeatureStdExtF">;
 
+def FeatureStdExtD : SubtargetFeature<"d", "HasStdExtD", "true",
+                           "'D' (Double-Precision Floating-Point)",
+                           [FeatureStdExtF]>;
+def HasStdExtD     :  Predicate<"Subtarget->hasStdExtD()">,
+                           AssemblerPredicate<"FeatureStdExtD">;
+
 def Feature64Bit   : SubtargetFeature<"64bit", "HasRV64", "true",
                            "Implements RV64">;
 
diff --git a/lib/Target/RISCV/RISCVInstrInfo.td b/lib/Target/RISCV/RISCVInstrInfo.td
index ebce21d36b1..3fb7e353b29 100644
--- a/lib/Target/RISCV/RISCVInstrInfo.td
+++ b/lib/Target/RISCV/RISCVInstrInfo.td
@@ -436,3 +436,4 @@ let Defs = [X2_32], Uses = [X2_32] in {
 include "RISCVInstrInfoM.td"
 include "RISCVInstrInfoA.td"
 include "RISCVInstrInfoF.td"
+include "RISCVInstrInfoD.td"
diff --git a/lib/Target/RISCV/RISCVInstrInfoD.td b/lib/Target/RISCV/RISCVInstrInfoD.td
new file mode 100644
index 00000000000..b60e964d6b3
--- /dev/null
+++ b/lib/Target/RISCV/RISCVInstrInfoD.td
@@ -0,0 +1,80 @@
+//===-- RISCVInstrInfoD.td - RISC-V 'D' instructions -------*- tablegen -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file describes the RISC-V instructions from the standard 'D',
+// Double-Precision Floating-Point instruction set extension.
+//
+//===----------------------------------------------------------------------===//
+
+// TODO: Note that as a temporary HACK, RV32F registers are always specified
+// as operands. This is sufficent for (dis)assembler support, but is obviously
+// incorrect for codegen.
+
+let Predicates = [HasStdExtD] in {
+
+let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
+def FLD : FI<0b011, 0b0000111, (outs FPR32:$rd), (ins GPR:$rs1, simm12:$imm12),
+             "fld\t$rd, ${imm12}(${rs1})", []>;
+
+
+// Operands for stores are in the order srcreg, base, offset rather than
+// reflecting the order these fields are specified in the instruction
+// encoding.
+
+let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
+def FSD : FS<0b011, 0b0100111, (outs), (ins FPR32:$rs2, GPR:$rs1, simm12:$imm12),
+             "fsd\t $rs2, ${imm12}(${rs1})", []>;
+
+// Hard-code the rounding mode to dynamic, as there doesn't seem to be any
+// standard RISC-V assembly syntax for specifying the rounding mode field
+
+def FMADD_D   : FPFMA_rr<0b01, 0b111, 0b1000011, FPR32, "fmadd.d">;
+def FMSUB_D   : FPFMA_rr<0b01, 0b111, 0b1000111, FPR32, "fmsub.d">;
+def FNMSUB_D  : FPFMA_rr<0b01, 0b111, 0b1001011, FPR32, "fnmsub.d">;
+def FNMADD_D  : FPFMA_rr<0b01, 0b111, 0b1001111, FPR32, "fnmadd.d">;
+
+def FADD_D    : FPALU_rr<0b0000001, 0b111, FPR32, FPR32, FPR32, "fadd.d">;
+def FSUB_D    : FPALU_rr<0b0000101, 0b111, FPR32, FPR32, FPR32, "fsub.d">;
+def FMUL_D    : FPALU_rr<0b0001001, 0b111, FPR32, FPR32, FPR32, "fmul.d">;
+def FDIV_D    : FPALU_rr<0b0001101, 0b111, FPR32, FPR32, FPR32, "fdiv.d">;
+
+let rs2 = 0b00000 in
+def FSQRT_D   : FPMisc_r<0b0101101, 0b111, FPR32, FPR32, "fsqrt.d">;
+
+def FSGNJ_D   : FPALU_rr<0b0010001, 0b000, FPR32, FPR32, FPR32, "fsgnj.d">;
+def FSGNJN_D  : FPALU_rr<0b0010001, 0b001, FPR32, FPR32, FPR32, "fsgnjn.d">;
+def FSGNJX_D  : FPALU_rr<0b0010001, 0b010, FPR32, FPR32, FPR32, "fsgnjx.d">;
+def FMIN_D    : FPALU_rr<0b0010101, 0b000, FPR32, FPR32, FPR32, "fmin.d">;
+def FMAX_D    : FPALU_rr<0b0010101, 0b001, FPR32, FPR32, FPR32, "fmax.d">;
+
+let rs2 = 0b00001 in
+def FCVT_S_D  : FPMisc_r<0b0100000, 0b111, FPR32, FPR32, "fcvt.s.d">;
+
+let rs2 = 0b00000 in
+def FCVT_D_S  : FPMisc_r<0b0100001, 0b000, FPR32, FPR32, "fcvt.d.s">;
+
+def FEQ_D     : FPALU_rr<0b1010001, 0b010, GPR, FPR32, FPR32, "feq.d">;
+def FLT_D     : FPALU_rr<0b1010001, 0b001, GPR, FPR32, FPR32, "flt.d">;
+def FLE_D     : FPALU_rr<0b1010001, 0b000, GPR, FPR32, FPR32, "fle.d">;
+
+let rs2 = 0b00000 in
+def FCLASS_D  : FPMisc_r<0b1110001, 0b001, GPR, FPR32, "fclass.d">;
+
+let rs2 = 0b00000 in
+def FCVT_W_D  : FPMisc_r<0b1100001, 0b111, GPR, FPR32, "fcvt.w.d">;
+
+let rs2 = 0b00001 in
+def FCVT_WU_D : FPMisc_r<0b1100001, 0b111, GPR, FPR32, "fcvt.wu.d">;
+
+let rs2 = 0b00000 in
+def FCVT_D_W  : FPMisc_r<0b1101001, 0b000, FPR32, GPR, "fcvt.d.w">;
+
+let rs2 = 0b00001 in
+def FCVT_D_WU : FPMisc_r<0b1101001, 0b000, FPR32, GPR, "fcvt.d.wu">;
+}
diff --git a/lib/Target/RISCV/RISCVInstrInfoF.td b/lib/Target/RISCV/RISCVInstrInfoF.td
index 85ae1255d30..c325b58999f 100644
--- a/lib/Target/RISCV/RISCVInstrInfoF.td
+++ b/lib/Target/RISCV/RISCVInstrInfoF.td
@@ -16,10 +16,11 @@
 let Predicates = [HasStdExtF] in {
 
 let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in {
-class FPFMA_rr<bits<2> funct2, bits<3> funct3, bits<7> opcode, string OpcodeStr> :
-      FR4<funct2, funct3, opcode, (outs FPR32:$rd),
-          (ins FPR32:$rs1, FPR32:$rs2, FPR32:$rs3),
-          OpcodeStr#"\t$rd, $rs1, $rs2, $rs3", []>;
+class FPFMA_rr<bits<2> funct2, bits<3> funct3, bits<7> opcode,
+               RegisterClass regty, string OpcodeStr> :
+        FR4<funct2, funct3, opcode, (outs FPR32:$rd),
+            (ins FPR32:$rs1, FPR32:$rs2, FPR32:$rs3),
+            OpcodeStr#"\t$rd, $rs1, $rs2, $rs3", []>;
 
 class FPALU_rr<bits<7> funct7, bits<3> funct3, RegisterClass rdty,
                RegisterClass rs1ty, RegisterClass rs2ty, string OpcodeStr> :
@@ -48,10 +49,10 @@ def FSW : FS<0b010, 0b0100111, (outs), (ins FPR32:$rs2, GPR:$rs1, simm12:$imm12)
 // Hard-code the rounding mode to dynamic, as there doesn't seem to be any
 // standard RISC-V assembly syntax for specifying the rounding mode field
 
-def FMADD_S   : FPFMA_rr<0b00, 0b111, 0b1000011, "fmadd.s">;
-def FMSUB_S   : FPFMA_rr<0b00, 0b111, 0b1000111, "fmsub.s">;
-def FNMSUB_S  : FPFMA_rr<0b00, 0b111, 0b1001011, "fnmsub.s">;
-def FNMADD_S  : FPFMA_rr<0b00, 0b111, 0b1001111, "fnmadd.s">;
+def FMADD_S   : FPFMA_rr<0b00, 0b111, 0b1000011, FPR32, "fmadd.s">;
+def FMSUB_S   : FPFMA_rr<0b00, 0b111, 0b1000111, FPR32, "fmsub.s">;
+def FNMSUB_S  : FPFMA_rr<0b00, 0b111, 0b1001011, FPR32, "fnmsub.s">;
+def FNMADD_S  : FPFMA_rr<0b00, 0b111, 0b1001111, FPR32, "fnmadd.s">;
 
 
 def FADD_S    : FPALU_rr<0b0000000, 0b111, FPR32, FPR32, FPR32, "fadd.s">;
diff --git a/lib/Target/RISCV/RISCVSubtarget.h b/lib/Target/RISCV/RISCVSubtarget.h
index 0990e63675b..fffa9eaf5dd 100644
--- a/lib/Target/RISCV/RISCVSubtarget.h
+++ b/lib/Target/RISCV/RISCVSubtarget.h
@@ -33,6 +33,7 @@ class RISCVSubtarget : public RISCVGenSubtargetInfo {
   bool HasStdExtM = false;
   bool HasStdExtA = false;
   bool HasStdExtF = false;
+  bool HasStdExtD = false;
   bool HasRV64 = false;
   unsigned XLen = 32;
   MVT XLenVT = MVT::i32;
diff --git a/test/MC/RISCV/rv32d-invalid.s b/test/MC/RISCV/rv32d-invalid.s
new file mode 100644
index 00000000000..3c3e265bd28
--- /dev/null
+++ b/test/MC/RISCV/rv32d-invalid.s
@@ -0,0 +1,21 @@
+# RUN: not llvm-mc -triple riscv32 -mattr=+d < %s 2>&1 | FileCheck %s
+
+# Out of range immediates
+## simm12
+fld ft1, -2049(a0) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+fsd ft2, 2048(a1) # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+
+# Memory operand not formatted correctly
+fld ft1, a0, -200 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+fsd ft2, a1, 100 # CHECK: :[[@LINE]]:10: error: immediate must be an integer in the range [-2048, 2047]
+
+# Invalid register names
+fld ft15, 100(a0) # CHECK: :[[@LINE]]:5: error: invalid operand for instruction
+fld ft1, 100(a10) # CHECK: :[[@LINE]]:14: error: expected register
+fsgnjn.d fa100, fa2, fa3 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
+
+# Integer registers where FP regs are expected
+fadd.d a2, a1, a0 # CHECK: :[[@LINE]]:8: error: invalid operand for instruction
+
+# FP registers where integer regs are expected
+fcvt.wu.d ft2, a1 # CHECK: :[[@LINE]]:11: error: invalid operand for instruction
diff --git a/test/MC/RISCV/rv32d-valid.s b/test/MC/RISCV/rv32d-valid.s
new file mode 100644
index 00000000000..c62fdb7e029
--- /dev/null
+++ b/test/MC/RISCV/rv32d-valid.s
@@ -0,0 +1,118 @@
+# RUN: llvm-mc %s -triple=riscv32 -mattr=+d -show-encoding \
+# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
+# RUN: llvm-mc %s -triple=riscv64 -mattr=+d -show-encoding \
+# RUN:     | FileCheck -check-prefixes=CHECK,CHECK-INST %s
+# RUN: llvm-mc -filetype=obj -triple riscv32 -mattr=+d < %s \
+# RUN:     | llvm-objdump -mattr=+d -d - | FileCheck -check-prefix=CHECK-INST %s
+# RUN: llvm-mc -filetype=obj -triple riscv64 -mattr=+d < %s \
+# RUN:     | llvm-objdump -mattr=+d -d - | FileCheck -check-prefix=CHECK-INST %s
+
+# Support for the 'D' extension implies support for 'F'
+# CHECK-INST: fadd.s fs10, fs11, ft8
+# CHECK: encoding: [0x53,0xfd,0xcd,0x01]
+fadd.s f26, f27, f28
+
+# CHECK-INST: fld ft0, 12(a0)
+# CHECK: encoding: [0x07,0x30,0xc5,0x00]
+fld f0, 12(a0)
+# CHECK-INST: fld ft1, 4(ra)
+# CHECK: encoding: [0x87,0xb0,0x40,0x00]
+fld f1, +4(ra)
+# CHECK-INST: fld ft2, -2048(a3)
+# CHECK: encoding: [0x07,0xb1,0x06,0x80]
+fld f2, -2048(x13)
+# CHECK-INST: fld ft3, -2048(s1)
+# CHECK: encoding: [0x87,0xb1,0x04,0x80]
+fld f3, %lo(2048)(s1)
+# CHECK-INST: fld ft4, 2047(s2)
+# CHECK: encoding: [0x07,0x32,0xf9,0x7f]
+fld f4, 2047(s2)
+# CHECK-INST: fld ft5, 0(s3)
+# CHECK: encoding: [0x87,0xb2,0x09,0x00]
+fld f5, 0(s3)
+
+# CHECK-INST: fsd ft6, 2047(s4)
+# CHECK: encoding: [0xa7,0x3f,0x6a,0x7e]
+fsd f6, 2047(s4)
+# CHECK-INST: fsd ft7, -2048(s5)
+# CHECK: encoding: [0x27,0xb0,0x7a,0x80]
+fsd f7, -2048(s5)
+# CHECK-INST: fsd fs0, -2048(s6)
+# CHECK: encoding: [0x27,0x30,0x8b,0x80]
+fsd f8, %lo(2048)(s6)
+# CHECK-INST: fsd fs1, 999(s7)
+# CHECK: encoding: [0xa7,0xb3,0x9b,0x3e]
+fsd f9, 999(s7)
+
+# CHECK-INST: fmadd.d fa0, fa1, fa2, fa3
+# CHECK: encoding: [0x43,0xf5,0xc5,0x6a]
+fmadd.d f10, f11, f12, f13
+# CHECK-INST: fmsub.d fa4, fa5, fa6, fa7
+# CHECK: encoding: [0x47,0xf7,0x07,0x8b]
+fmsub.d f14, f15, f16, f17
+# CHECK-INST: fnmsub.d fs2, fs3, fs4, fs5
+# CHECK: encoding: [0x4b,0xf9,0x49,0xab]
+fnmsub.d f18, f19, f20, f21
+# CHECK-INST: fnmadd.d fs6, fs7, fs8, fs9
+# CHECK: encoding: [0x4f,0xfb,0x8b,0xcb]
+fnmadd.d f22, f23, f24, f25
+
+# CHECK-INST: fadd.d fs10, fs11, ft8
+# CHECK: encoding: [0x53,0xfd,0xcd,0x03]
+fadd.d f26, f27, f28
+# CHECK-INST: fsub.d ft9, ft10, ft11
+# CHECK: encoding: [0xd3,0x7e,0xff,0x0b]
+fsub.d f29, f30, f31
+# CHECK-INST: fmul.d ft0, ft1, ft2
+# CHECK: encoding: [0x53,0xf0,0x20,0x12]
+fmul.d ft0, ft1, ft2
+# CHECK-INST: fdiv.d ft3, ft4, ft5
+# CHECK: encoding: [0xd3,0x71,0x52,0x1a]
+fdiv.d ft3, ft4, ft5
+# CHECK-INST: fsqrt.d ft6, ft7
+# CHECK: encoding: [0x53,0xf3,0x03,0x5a]
+fsqrt.d ft6, ft7
+# CHECK-INST: fsgnj.d fs1, fa0, fa1
+# CHECK: encoding: [0xd3,0x04,0xb5,0x22]
+fsgnj.d fs1, fa0, fa1
+# CHECK-INST: fsgnjn.d fa1, fa3, fa4
+# CHECK: encoding: [0xd3,0x95,0xe6,0x22]
+fsgnjn.d fa1, fa3, fa4
+# CHECK-INST: fsgnjx.d fa3, fa2, fa1
+# CHECK: encoding: [0xd3,0x26,0xb6,0x22]
+fsgnjx.d fa3, fa2, fa1
+# CHECK-INST: fmin.d fa5, fa6, fa7
+# CHECK: encoding: [0xd3,0x07,0x18,0x2b]
+fmin.d fa5, fa6, fa7
+# CHECK-INST: fmax.d fs2, fs3, fs4
+# CHECK: encoding: [0x53,0x99,0x49,0x2b]
+fmax.d fs2, fs3, fs4
+
+# CHECK-INST: fcvt.s.d fs5, fs6
+# CHECK: encoding: [0xd3,0x7a,0x1b,0x40]
+fcvt.s.d fs5, fs6
+# CHECK-INST: fcvt.d.s fs7, fs8
+# CHECK: encoding: [0xd3,0x0b,0x0c,0x42]
+fcvt.d.s fs7, fs8
+# CHECK-INST: feq.d a1, fs8, fs9
+# CHECK: encoding: [0xd3,0x25,0x9c,0xa3]
+feq.d a1, fs8, fs9
+# CHECK-INST: flt.d a2, fs10, fs11
+# CHECK: encoding: [0x53,0x16,0xbd,0xa3]
+flt.d a2, fs10, fs11
+# CHECK-INST: fle.d a3, ft8, ft9
+# CHECK: encoding: [0xd3,0x06,0xde,0xa3]
+fle.d a3, ft8, ft9
+# CHECK-INST: fclass.d a3, ft10
+# CHECK: encoding: [0xd3,0x16,0x0f,0xe2]
+fclass.d a3, ft10
+
+# CHECK-INST: fcvt.w.d a4, ft11
+# CHECK: encoding: [0x53,0xf7,0x0f,0xc2]
+fcvt.w.d a4, ft11
+# CHECK-INST: fcvt.d.w ft0, a5
+# CHECK: encoding: [0x53,0x80,0x07,0xd2]
+fcvt.d.w ft0, a5
+# CHECK-INST: fcvt.d.wu ft1, a6
+# CHECK: encoding: [0xd3,0x00,0x18,0xd2]
+fcvt.d.wu ft1, a6
diff --git a/test/MC/RISCV/rv32f-invalid.s b/test/MC/RISCV/rv32f-invalid.s
index a5654bd1c22..1a209a2b19b 100644
--- a/test/MC/RISCV/rv32f-invalid.s
+++ b/test/MC/RISCV/rv32f-invalid.s
@@ -1,4 +1,4 @@
-# RUN: not llvm-mc -triple riscv32 < %s 2>&1 | FileCheck %s
+# RUN: not llvm-mc -triple riscv32 -mattr=+f < %s 2>&1 | FileCheck %s
 
 # Out of range immediates
 ## simm12
@@ -19,3 +19,6 @@ fmv.x.w fs7, a2 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
 
 # FP registers where integer regs are expected
 fmv.w.x a8, ft2 # CHECK: :[[@LINE]]:9: error: invalid operand for instruction
+
+# Using 'D' instructions for an 'F'-only target
+fadd.d ft0, ft1, ft2 # CHECK: :[[@LINE]]:1: error: instruction use requires an option to be enabled
-- 
2.14.2

