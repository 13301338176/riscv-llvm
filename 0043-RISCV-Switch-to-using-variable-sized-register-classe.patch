From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alex Bradbury <asb@lowrisc.org>
Subject: [RISCV] Switch to using variable-sized register classes

This allows patterns and instruction definitions to be shared between RV32 and
RV64.
---
 .../RISCV/Disassembler/RISCVDisassembler.cpp       |  16 +--
 .../RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp       |   2 +-
 lib/Target/RISCV/RISCV.td                          |   3 +
 lib/Target/RISCV/RISCVCallingConv.td               |   6 +-
 lib/Target/RISCV/RISCVFrameLowering.cpp            |  10 +-
 lib/Target/RISCV/RISCVISelDAGToDAG.cpp             |   2 +-
 lib/Target/RISCV/RISCVISelLowering.cpp             |  17 ++--
 lib/Target/RISCV/RISCVInstrInfo.h                  |   3 -
 lib/Target/RISCV/RISCVInstrInfo.td                 |  54 +++++-----
 lib/Target/RISCV/RISCVRegisterInfo.cpp             |  25 ++---
 lib/Target/RISCV/RISCVRegisterInfo.h               |   2 +-
 lib/Target/RISCV/RISCVRegisterInfo.td              | 111 ++++++++++-----------
 lib/Target/RISCV/RISCVSubtarget.cpp                |   2 +-
 lib/Target/RISCV/RISCVSubtarget.h                  |   5 +-
 14 files changed, 122 insertions(+), 136 deletions(-)

diff --git a/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp b/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
index 06e2f8ffe21..fd54c21e2d2 100644
--- a/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
+++ b/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp
@@ -56,14 +56,14 @@ extern "C" void LLVMInitializeRISCVDisassembler() {
 }
 
 static const unsigned GPRDecoderTable[] = {
-  RISCV::X0_32,  RISCV::X1_32,  RISCV::X2_32,  RISCV::X3_32,
-  RISCV::X4_32,  RISCV::X5_32,  RISCV::X6_32,  RISCV::X7_32,
-  RISCV::X8_32,  RISCV::X9_32,  RISCV::X10_32, RISCV::X11_32,
-  RISCV::X12_32, RISCV::X13_32, RISCV::X14_32, RISCV::X15_32,
-  RISCV::X16_32, RISCV::X17_32, RISCV::X18_32, RISCV::X19_32,
-  RISCV::X20_32, RISCV::X21_32, RISCV::X22_32, RISCV::X23_32,
-  RISCV::X24_32, RISCV::X25_32, RISCV::X26_32, RISCV::X27_32,
-  RISCV::X28_32, RISCV::X29_32, RISCV::X30_32, RISCV::X31_32
+  RISCV::X0,  RISCV::X1,  RISCV::X2,  RISCV::X3,
+  RISCV::X4,  RISCV::X5,  RISCV::X6,  RISCV::X7,
+  RISCV::X8,  RISCV::X9,  RISCV::X10, RISCV::X11,
+  RISCV::X12, RISCV::X13, RISCV::X14, RISCV::X15,
+  RISCV::X16, RISCV::X17, RISCV::X18, RISCV::X19,
+  RISCV::X20, RISCV::X21, RISCV::X22, RISCV::X23,
+  RISCV::X24, RISCV::X25, RISCV::X26, RISCV::X27,
+  RISCV::X28, RISCV::X29, RISCV::X30, RISCV::X31
 };
 
 static DecodeStatus DecodeGPRRegisterClass(MCInst &Inst, uint64_t RegNo,
diff --git a/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp b/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp
index bb12c2536e5..45de976ec6c 100644
--- a/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp
+++ b/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp
@@ -42,7 +42,7 @@ static MCInstrInfo *createRISCVMCInstrInfo() {
 
 static MCRegisterInfo *createRISCVMCRegisterInfo(const Triple &TT) {
   MCRegisterInfo *X = new MCRegisterInfo();
-  InitRISCVMCRegisterInfo(X, RISCV::X1_32);
+  InitRISCVMCRegisterInfo(X, RISCV::X1);
   return X;
 }
 
diff --git a/lib/Target/RISCV/RISCV.td b/lib/Target/RISCV/RISCV.td
index b2bc0d88d83..1e8fe6587f4 100644
--- a/lib/Target/RISCV/RISCV.td
+++ b/lib/Target/RISCV/RISCV.td
@@ -37,6 +37,9 @@ def HasStdExtD     :  Predicate<"Subtarget->hasStdExtD()">,
 def Feature64Bit   : SubtargetFeature<"64bit", "HasRV64", "true",
                            "Implements RV64">;
 
+def RV64           : HwMode<"+64bit">;
+def RV32           : HwMode<"-64bit">;
+
 //===----------------------------------------------------------------------===//
 // Register File, Calling Conv, Instruction Descriptions
 //===----------------------------------------------------------------------===//
diff --git a/lib/Target/RISCV/RISCVCallingConv.td b/lib/Target/RISCV/RISCVCallingConv.td
index 51a4470f5ca..a7645b9198c 100644
--- a/lib/Target/RISCV/RISCVCallingConv.td
+++ b/lib/Target/RISCV/RISCVCallingConv.td
@@ -12,13 +12,13 @@
 //===----------------------------------------------------------------------===//
 
 // RISCV 32-bit C return-value convention.
-def RetCC_RISCV32 : CallingConv<[CCIfType<[i32], CCAssignToReg<[X10_32, X11_32]>>]>;
+def RetCC_RISCV32 : CallingConv<[CCIfType<[i32], CCAssignToReg<[X10, X11]>>]>;
 
 // RISCV 32-bit C Calling convention.
 def CC_RISCV32 : CustomCallingConv;
 
-def CSR : CalleeSavedRegs<(add X1_32, X3_32, X4_32, X8_32, X9_32,
-                          (sequence "X%u_32", 18, 27))>;
+def CSR : CalleeSavedRegs<(add X1, X3, X4, X8, X9,
+                          (sequence "X%u", 18, 27))>;
 
 // Needed for implementation of RISCVRegisterInfo::getNoPreservedMask()
 def CSR_NoRegs : CalleeSavedRegs<(add)>;
diff --git a/lib/Target/RISCV/RISCVFrameLowering.cpp b/lib/Target/RISCV/RISCVFrameLowering.cpp
index 0877cf538f0..53e73352c8b 100644
--- a/lib/Target/RISCV/RISCVFrameLowering.cpp
+++ b/lib/Target/RISCV/RISCVFrameLowering.cpp
@@ -114,8 +114,8 @@ void RISCVFrameLowering::emitPrologue(MachineFunction &MF,
   RISCVMachineFunctionInfo *RVFI = MF.getInfo<RISCVMachineFunctionInfo>();
   MachineBasicBlock::iterator MBBI = MBB.begin();
 
-  unsigned FPReg = RISCV::X8_32;
-  unsigned SPReg = RISCV::X2_32;
+  unsigned FPReg = RISCV::X8;
+  unsigned SPReg = RISCV::X2;
 
   // Debug location must be unknown since the first debug location is used
   // to determine the end of the prologue.
@@ -161,8 +161,8 @@ void RISCVFrameLowering::emitEpilogue(MachineFunction &MF,
   MachineFrameInfo &MFI = MF.getFrameInfo();
   RISCVMachineFunctionInfo *RVFI = MF.getInfo<RISCVMachineFunctionInfo>();
   DebugLoc DL = MBBI->getDebugLoc();
-  unsigned FPReg = RISCV::X8_32;
-  unsigned SPReg = RISCV::X2_32;
+  unsigned FPReg = RISCV::X8;
+  unsigned SPReg = RISCV::X2;
 
   // Skip to before the restores of callee-saved registers
   MachineBasicBlock::iterator Begin = MBB.begin();
@@ -192,7 +192,7 @@ void RISCVFrameLowering::determineCalleeSaves(MachineFunction &MF,
                                               BitVector &SavedRegs,
                                               RegScavenger *RS) const {
   TargetFrameLowering::determineCalleeSaves(MF, SavedRegs, RS);
-  SavedRegs.set(RISCV::X8_32);
+  SavedRegs.set(RISCV::X8);
   return;
 }
 
diff --git a/lib/Target/RISCV/RISCVISelDAGToDAG.cpp b/lib/Target/RISCV/RISCVISelDAGToDAG.cpp
index 076a0d0cbbe..72d592b8880 100644
--- a/lib/Target/RISCV/RISCVISelDAGToDAG.cpp
+++ b/lib/Target/RISCV/RISCVISelDAGToDAG.cpp
@@ -76,7 +76,7 @@ void RISCVDAGToDAGISel::Select(SDNode *Node) {
       // to propagate these into other instructions.
       if (ConstNode->isNullValue()) {
         SDValue New = CurDAG->getCopyFromReg(
-            CurDAG->getEntryNode(), SDLoc(Node), RISCV::X0_32, MVT::i32);
+            CurDAG->getEntryNode(), SDLoc(Node), RISCV::X0, MVT::i32);
         return ReplaceNode(Node, New.getNode());
       }
     }
diff --git a/lib/Target/RISCV/RISCVISelLowering.cpp b/lib/Target/RISCV/RISCVISelLowering.cpp
index 4720c572b96..5d11bb2aa13 100644
--- a/lib/Target/RISCV/RISCVISelLowering.cpp
+++ b/lib/Target/RISCV/RISCVISelLowering.cpp
@@ -41,12 +41,15 @@ RISCVTargetLowering::RISCVTargetLowering(const TargetMachine &TM,
     : TargetLowering(TM), Subtarget(STI) {
 
   // Set up the register classes.
-  addRegisterClass(MVT::i32, &RISCV::GPRRegClass);
+  if (Subtarget.is64Bit())
+    addRegisterClass(MVT::i64, &RISCV::GPRRegClass);
+  else
+    addRegisterClass(MVT::i32, &RISCV::GPRRegClass);
 
   // Compute derived properties from the register classes.
   computeRegisterProperties(STI.getRegisterInfo());
 
-  setStackPointerRegisterToSaveRestore(RISCV::X2_32);
+  setStackPointerRegisterToSaveRestore(RISCV::X2);
 
   for (auto N : {ISD::EXTLOAD, ISD::SEXTLOAD, ISD::ZEXTLOAD})
     setLoadExtAction(N, MVT::i32, MVT::i1, Promote);
@@ -387,8 +390,8 @@ RISCVTargetLowering::EmitInstrWithCustomInserter(MachineInstr &MI,
 }
 
 static const MCPhysReg RV32ArgGPRs[] = {
-    RISCV::X10_32, RISCV::X11_32, RISCV::X12_32, RISCV::X13_32,
-    RISCV::X14_32, RISCV::X15_32, RISCV::X16_32, RISCV::X17_32};
+    RISCV::X10, RISCV::X11, RISCV::X12, RISCV::X13,
+    RISCV::X14, RISCV::X15, RISCV::X16, RISCV::X17};
 
 // Calling Convention Implementation.
 // The expectations for frontend ABI lowering vary from target to target.
@@ -416,8 +419,8 @@ static const MCPhysReg RV32ArgGPRs[] = {
 // arguments.
 
 static const MCPhysReg ArgGPRs[] = {
-  RISCV::X10_32, RISCV::X11_32, RISCV::X12_32, RISCV::X13_32,
-  RISCV::X14_32, RISCV::X15_32, RISCV::X16_32, RISCV::X17_32
+  RISCV::X10, RISCV::X11, RISCV::X12, RISCV::X13,
+  RISCV::X14, RISCV::X15, RISCV::X16, RISCV::X17
 };
 
 // Pass a 2xlen argument that has been split in to two xlen values through
@@ -842,7 +845,7 @@ SDValue RISCVTargetLowering::LowerCall(CallLoweringInfo &CLI,
 
       // Work out the address of the stack slot.
       if (!StackPtr.getNode())
-        StackPtr = DAG.getCopyFromReg(Chain, DL, RISCV::X2_32, PtrVT);
+        StackPtr = DAG.getCopyFromReg(Chain, DL, RISCV::X2, PtrVT);
       SDValue Address =
           DAG.getNode(ISD::ADD, DL, PtrVT, StackPtr,
                       DAG.getIntPtrConstant(VA.getLocMemOffset(), DL));
diff --git a/lib/Target/RISCV/RISCVInstrInfo.h b/lib/Target/RISCV/RISCVInstrInfo.h
index abb72bc399c..2dd4e321aa9 100644
--- a/lib/Target/RISCV/RISCVInstrInfo.h
+++ b/lib/Target/RISCV/RISCVInstrInfo.h
@@ -23,13 +23,10 @@
 namespace llvm {
 
 class RISCVInstrInfo : public RISCVGenInstrInfo {
-  const RISCVRegisterInfo RI;
 
 public:
   RISCVInstrInfo();
 
-  const RISCVRegisterInfo &getRegisterInfo() const { return RI; }
-
   void copyPhysReg(MachineBasicBlock &MBB, MachineBasicBlock::iterator Position,
                    const DebugLoc &DL, unsigned DestinationRegister,
                    unsigned SourceRegister, bool KillSource) const override;
diff --git a/lib/Target/RISCV/RISCVInstrInfo.td b/lib/Target/RISCV/RISCVInstrInfo.td
index 3fb7e353b29..af368a08a88 100644
--- a/lib/Target/RISCV/RISCVInstrInfo.td
+++ b/lib/Target/RISCV/RISCVInstrInfo.td
@@ -55,24 +55,24 @@ def FenceArg : AsmOperandClass {
   let DiagnosticType = "InvalidFenceArg";
 }
 
-def fencearg : Operand<i32> {
+def fencearg : Operand<XLenVT> {
   let ParserMatchClass = FenceArg;
   let PrintMethod = "printFenceArg";
   let DecoderMethod = "decodeUImmOperand<4>";
 }
 
-def uimm5 : Operand<i32>, ImmLeaf<i32, [{return isUInt<5>(Imm);}]> {
+def uimm5 : Operand<XLenVT>, ImmLeaf<XLenVT, [{return isUInt<5>(Imm);}]> {
   let ParserMatchClass = UImmAsmOperand<5>;
   let DecoderMethod = "decodeUImmOperand<5>";
 }
 
-def simm12 : Operand<i32>, ImmLeaf<i32, [{return isInt<12>(Imm);}]> {
+def simm12 : Operand<XLenVT>, ImmLeaf<XLenVT, [{return isInt<12>(Imm);}]> {
   let ParserMatchClass = SImmAsmOperand<12>;
   let EncoderMethod = "getImmOpValue";
   let DecoderMethod = "decodeSImmOperand<12>";
 }
 
-def uimm12 : Operand<i32> {
+def uimm12 : Operand<XLenVT> {
   let ParserMatchClass = UImmAsmOperand<12>;
   let DecoderMethod = "decodeUImmOperand<12>";
 }
@@ -84,7 +84,7 @@ def simm13_lsb0 : Operand<OtherVT> {
   let DecoderMethod = "decodeSImmOperandAndLsl1<13>";
 }
 
-def uimm20 : Operand<i32> {
+def uimm20 : Operand<XLenVT> {
   let ParserMatchClass = UImmAsmOperand<20>;
   let EncoderMethod = "getImmOpValue";
   let DecoderMethod = "decodeUImmOperand<20>";
@@ -98,18 +98,20 @@ def simm21_lsb0 : Operand<OtherVT> {
 }
 
 // Addressing modes
-def ADDRii : ComplexPattern<i32, 2, "SelectADDRii", [add, frameindex], []>;
+def ADDRii : ComplexPattern<iPTR, 2, "SelectADDRii", [add, frameindex], []>;
+
+def ixlenimm : Operand<XLenVT>;
 
 // Address operands
-def MEMii : Operand<i32> {
-  let MIOperandInfo = (ops i32imm, i32imm);
+def MEMii : Operand<XLenVT> {
+  let MIOperandInfo = (ops ixlenimm, ixlenimm);
 }
 
 // Extract least significant 12 bits from an immediate value and sign extend
 // them.
 def LO12Sext : SDNodeXForm<imm, [{
   return CurDAG->getTargetConstant(SignExtend64<12>(N->getZExtValue()),
-                                   SDLoc(N), MVT::i32);
+                                   SDLoc(N), N->getValueType(0));
 }]>;
 
 // Extract the most significant 20 bits from an immediate value. Add 1 if bit
@@ -117,18 +119,10 @@ def LO12Sext : SDNodeXForm<imm, [{
 // or ld/st being negative.
 def HI20 : SDNodeXForm<imm, [{
   return CurDAG->getTargetConstant(((N->getZExtValue()+0x800) >> 12) & 0xfffff,
-                                   SDLoc(N), MVT::i32);
+                                   SDLoc(N), N->getValueType(0));
 }]>;
 
 
-// As noted in RISCVRegisterInfo.td, the hope is that support for
-// variable-sized register classes will mean that instruction definitions do
-// not need to be duplicated for 32-bit and 64-bit register classes. For now
-// we use 'GPR', which is 32-bit. When codegen for both RV32 and RV64 is
-// added, we will need to duplicate instruction definitions unless a proposal
-// like <http://lists.llvm.org/pipermail/llvm-dev/2016-September/105027.html>
-// is adopted.
-
 let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in {
 def LUI : FU<0b0110111, (outs GPR:$rd), (ins uimm20:$imm20),
              "lui\t$rd, $imm20", []>;
@@ -284,8 +278,8 @@ class PatGprUimm5<SDPatternOperator OpNode, FI32Shift Inst> :
 
 /// Immediates
 
-def : Pat<(simm12:$imm), (ADDI X0_32, simm12:$imm)>;
-def : Pat<(i32 imm:$imm), (ADDI (LUI (HI20 imm:$imm)), (LO12Sext imm:$imm))>;
+def : Pat<(simm12:$imm), (ADDI X0, simm12:$imm)>;
+def : Pat<(XLenVT imm:$imm), (ADDI (LUI (HI20 imm:$imm)), (LO12Sext imm:$imm))>;
 
 /// Simple arithmetic operations
 
@@ -319,7 +313,7 @@ def : PatGprSimm12<setult, SLTIU>;
 // Define pattern expansions for setcc operations that aren't directly
 // handled by a RISC-V instruction
 def : Pat<(seteq GPR:$rs1, GPR:$rs2), (SLTIU (XOR GPR:$rs1, GPR:$rs2), 1)>;
-def : Pat<(setne GPR:$rs1, GPR:$rs2), (SLTU X0_32, (XOR GPR:$rs1, GPR:$rs2))>;
+def : Pat<(setne GPR:$rs1, GPR:$rs2), (SLTU X0, (XOR GPR:$rs1, GPR:$rs2))>;
 def : Pat<(setugt GPR:$rs1, GPR:$rs2), (SLTU GPR:$rs2, GPR:$rs1)>;
 def : Pat<(setuge GPR:$rs1, GPR:$rs2), (XORI (SLTU GPR:$rs1, GPR:$rs2), 1)>;
 def : Pat<(setule GPR:$rs1, GPR:$rs2), (XORI (SLTU GPR:$rs2, GPR:$rs1), 1)>;
@@ -361,29 +355,29 @@ def : BccSwapPat<setule, BGEU>;
 
 // An extra pattern is needed for a brcond without a setcc (i.e. where the
 // condition was calculated elsewhere).
-def : Pat<(brcond GPR:$cond, bb:$imm12), (BNE GPR:$cond, X0_32, bb:$imm12)>;
+def : Pat<(brcond GPR:$cond, bb:$imm12), (BNE GPR:$cond, X0, bb:$imm12)>;
 
 let isBarrier = 1, isBranch = 1, isTerminator = 1 in
 def PseudoBR : Pseudo<(outs), (ins simm21_lsb0:$imm20), [(br bb:$imm20)]>,
-               PseudoInstExpansion<(JAL X0_32, simm21_lsb0:$imm20)>;
+               PseudoInstExpansion<(JAL X0, simm21_lsb0:$imm20)>;
 
 let isBarrier = 1, isBranch = 1, isIndirectBranch = 1, isTerminator = 1 in
 def PseudoBRIND : Pseudo<(outs), (ins GPR:$rs1, simm12:$imm12), []>,
-                  PseudoInstExpansion<(JALR X0_32, GPR:$rs1, simm12:$imm12)>;
+                  PseudoInstExpansion<(JALR X0, GPR:$rs1, simm12:$imm12)>;
 
 def : Pat<(brind GPR:$rs1), (PseudoBRIND GPR:$rs1, 0)>;
 def : Pat<(brind (add GPR:$rs1, simm12:$imm12)), (PseudoBRIND GPR:$rs1, simm12:$imm12)>;
 
-let isCall = 1, Defs = [X1_32] in
+let isCall = 1, Defs = [X1] in
 def PseudoCALL : Pseudo<(outs), (ins GPR:$rs1), [(Call GPR:$rs1)]>,
-                 PseudoInstExpansion<(JALR X1_32, GPR:$rs1, 0)>;
+                 PseudoInstExpansion<(JALR X1, GPR:$rs1, 0)>;
 
-// FIXME: PseudoRET doesn't really modify X1_32 (RA), however marking it as
+// FIXME: PseudoRET doesn't really modify X1 (RA), however marking it as
 // such does ensure the the return address is always given a stack slot.
 
-let Defs = [X1_32], isBarrier = 1, isReturn = 1, isTerminator = 1 in
+let Defs = [X1], isBarrier = 1, isReturn = 1, isTerminator = 1 in
 def PseudoRET : Pseudo<(outs), (ins), [(RetFlag)]>,
-                PseudoInstExpansion<(JALR X0_32, X1_32, 0)>;
+                PseudoInstExpansion<(JALR X0, X1, 0)>;
 
 /// Loads
 
@@ -423,7 +417,7 @@ def SW_FI : Pseudo<(outs), (ins GPR:$src, MEMii:$addr),
 /// Other pseudo-instructions
 
 // Pessimistically assume the stack pointer will be clobbered
-let Defs = [X2_32], Uses = [X2_32] in {
+let Defs = [X2], Uses = [X2] in {
   def ADJCALLSTACKDOWN : Pseudo<(outs), (ins i32imm:$amt1, i32imm:$amt2),
                                 [(CallSeqStart timm:$amt1, timm:$amt2)]>;
   def ADJCALLSTACKUP   : Pseudo<(outs), (ins i32imm:$amt1, i32imm:$amt2),
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.cpp b/lib/Target/RISCV/RISCVRegisterInfo.cpp
index b8fdc09c4c9..6d05adc6e9f 100644
--- a/lib/Target/RISCV/RISCVRegisterInfo.cpp
+++ b/lib/Target/RISCV/RISCVRegisterInfo.cpp
@@ -28,7 +28,8 @@
 
 using namespace llvm;
 
-RISCVRegisterInfo::RISCVRegisterInfo() : RISCVGenRegisterInfo(RISCV::X1_32) {}
+RISCVRegisterInfo::RISCVRegisterInfo(unsigned HwMode)
+  : RISCVGenRegisterInfo(RISCV::X1, /*DwarfFlavour*/0, /*EHFlavor*/0, /*PC*/0, HwMode) {}
 
 const MCPhysReg *
 RISCVRegisterInfo::getCalleeSavedRegs(const MachineFunction *MF) const {
@@ -39,18 +40,12 @@ BitVector RISCVRegisterInfo::getReservedRegs(const MachineFunction &MF) const {
   BitVector Reserved(getNumRegs());
 
   // Use markSuperRegs to ensure any register aliases are also reserved
-  markSuperRegs(Reserved, RISCV::X0_64); // zero
-  markSuperRegs(Reserved, RISCV::X0_32); // zero
-  markSuperRegs(Reserved, RISCV::X1_64); // ra
-  markSuperRegs(Reserved, RISCV::X1_32); // ra
-  markSuperRegs(Reserved, RISCV::X2_64); // sp
-  markSuperRegs(Reserved, RISCV::X2_32); // sp
-  markSuperRegs(Reserved, RISCV::X3_64); // gp
-  markSuperRegs(Reserved, RISCV::X3_32); // gp
-  markSuperRegs(Reserved, RISCV::X4_64); // tp
-  markSuperRegs(Reserved, RISCV::X4_32); // tp
-  markSuperRegs(Reserved, RISCV::X8_64); // fp
-  markSuperRegs(Reserved, RISCV::X8_32); // fp
+  markSuperRegs(Reserved, RISCV::X0); // zero
+  markSuperRegs(Reserved, RISCV::X1); // ra
+  markSuperRegs(Reserved, RISCV::X2); // sp
+  markSuperRegs(Reserved, RISCV::X3); // gp
+  markSuperRegs(Reserved, RISCV::X4); // tp
+  markSuperRegs(Reserved, RISCV::X8); // fp
   assert(checkAllSuperRegsMarked(Reserved));
   return Reserved;
 }
@@ -91,7 +86,7 @@ void RISCVRegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,
   }
 
   if ((FrameIndex >= MinCSFI && FrameIndex <= MaxCSFI)) {
-    FrameReg = RISCV::X2_32;
+    FrameReg = RISCV::X2;
     Offset += MF.getFrameInfo().getStackSize();
   } else {
     FrameReg = getFrameRegister(MF);
@@ -156,7 +151,7 @@ void RISCVRegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,
 }
 
 unsigned RISCVRegisterInfo::getFrameRegister(const MachineFunction &MF) const {
-  return RISCV::X8_32;
+  return RISCV::X8;
 }
 
 const uint32_t *
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.h b/lib/Target/RISCV/RISCVRegisterInfo.h
index 9bfac490a06..669d989deed 100644
--- a/lib/Target/RISCV/RISCVRegisterInfo.h
+++ b/lib/Target/RISCV/RISCVRegisterInfo.h
@@ -23,7 +23,7 @@ namespace llvm {
 
 struct RISCVRegisterInfo : public RISCVGenRegisterInfo {
 
-  RISCVRegisterInfo();
+  RISCVRegisterInfo(unsigned HwMode);
 
   const uint32_t *getCallPreservedMask(const MachineFunction &MF,
                                        CallingConv::ID) const override;
diff --git a/lib/Target/RISCV/RISCVRegisterInfo.td b/lib/Target/RISCV/RISCVRegisterInfo.td
index 3ce1d7eb810..c458ad29516 100644
--- a/lib/Target/RISCV/RISCVRegisterInfo.td
+++ b/lib/Target/RISCV/RISCVRegisterInfo.td
@@ -33,71 +33,66 @@ let Namespace = "RISCV" in {
   def ABIRegAltName : RegAltNameIndex;
 }
 
-// Integer registers
-let RegAltNameIndices = [ABIRegAltName] in {
-  def X0_32    : RISCVReg32<0, "x0", ["zero"]>, DwarfRegNum<[0]>;
-  def X1_32    : RISCVReg32<1, "x1", ["ra"]>, DwarfRegNum<[1]>;
-  def X2_32    : RISCVReg32<2, "x2", ["sp"]>, DwarfRegNum<[2]>;
-  def X3_32    : RISCVReg32<3, "x3", ["gp"]>, DwarfRegNum<[3]>;
-  def X4_32    : RISCVReg32<4, "x4", ["tp"]>, DwarfRegNum<[4]>;
-  def X5_32    : RISCVReg32<5, "x5", ["t0"]>, DwarfRegNum<[5]>;
-  def X6_32    : RISCVReg32<6, "x6", ["t1"]>, DwarfRegNum<[6]>;
-  def X7_32    : RISCVReg32<7, "x7", ["t2"]>, DwarfRegNum<[7]>;
-  def X8_32    : RISCVReg32<8, "x8", ["s0"]>, DwarfRegNum<[8]>;
-  def X9_32    : RISCVReg32<9, "x9", ["s1"]>, DwarfRegNum<[9]>;
-  def X10_32   : RISCVReg32<10,"x10", ["a0"]>, DwarfRegNum<[10]>;
-  def X11_32   : RISCVReg32<11,"x11", ["a1"]>, DwarfRegNum<[11]>;
-  def X12_32   : RISCVReg32<12,"x12", ["a2"]>, DwarfRegNum<[12]>;
-  def X13_32   : RISCVReg32<13,"x13", ["a3"]>, DwarfRegNum<[13]>;
-  def X14_32   : RISCVReg32<14,"x14", ["a4"]>, DwarfRegNum<[14]>;
-  def X15_32   : RISCVReg32<15,"x15", ["a5"]>, DwarfRegNum<[15]>;
-  def X16_32   : RISCVReg32<16,"x16", ["a6"]>, DwarfRegNum<[16]>;
-  def X17_32   : RISCVReg32<17,"x17", ["a7"]>, DwarfRegNum<[17]>;
-  def X18_32   : RISCVReg32<18,"x18", ["s2"]>, DwarfRegNum<[18]>;
-  def X19_32   : RISCVReg32<19,"x19", ["s3"]>, DwarfRegNum<[19]>;
-  def X20_32   : RISCVReg32<20,"x20", ["s4"]>, DwarfRegNum<[20]>;
-  def X21_32   : RISCVReg32<21,"x21", ["s5"]>, DwarfRegNum<[21]>;
-  def X22_32   : RISCVReg32<22,"x22", ["s6"]>, DwarfRegNum<[22]>;
-  def X23_32   : RISCVReg32<23,"x23", ["s7"]>, DwarfRegNum<[23]>;
-  def X24_32   : RISCVReg32<24,"x24", ["s8"]>, DwarfRegNum<[24]>;
-  def X25_32   : RISCVReg32<25,"x25", ["s9"]>, DwarfRegNum<[25]>;
-  def X26_32   : RISCVReg32<26,"x26", ["s10"]>, DwarfRegNum<[26]>;
-  def X27_32   : RISCVReg32<27,"x27", ["s11"]>, DwarfRegNum<[27]>;
-  def X28_32   : RISCVReg32<28,"x28", ["t3"]>, DwarfRegNum<[28]>;
-  def X29_32   : RISCVReg32<29,"x29", ["t4"]>, DwarfRegNum<[29]>;
-  def X30_32   : RISCVReg32<30,"x30", ["t5"]>, DwarfRegNum<[30]>;
-  def X31_32   : RISCVReg32<31,"x31", ["t6"]>, DwarfRegNum<[31]>;
+// This should replace the old RISCVReg32/RISCVReg64 for GPRs
+let Namespace = "RISCV" in {
+  class RISCVReg<bits<5> Enc, string n, list<string> alt = []> : Register<n> {
+    let HWEncoding{4-0} = Enc;
+    let AltNames = alt;
+  }
 }
 
-foreach Index = 0-31 in {
-  def X#Index#_64 : RISCVReg64<!cast<RISCVReg32>("X"#Index#"_32")>, DwarfRegNum<[Index]>;
+// Integer registers
+let RegAltNameIndices = [ABIRegAltName] in {
+  def X0  : RISCVReg<0, "x0", ["zero"]>, DwarfRegNum<[0]>;
+  def X1  : RISCVReg<1, "x1", ["ra"]>, DwarfRegNum<[1]>;
+  def X2  : RISCVReg<2, "x2", ["sp"]>, DwarfRegNum<[2]>;
+  def X3  : RISCVReg<3, "x3", ["gp"]>, DwarfRegNum<[3]>;
+  def X4  : RISCVReg<4, "x4", ["tp"]>, DwarfRegNum<[4]>;
+  def X5  : RISCVReg<5, "x5", ["t0"]>, DwarfRegNum<[5]>;
+  def X6  : RISCVReg<6, "x6", ["t1"]>, DwarfRegNum<[6]>;
+  def X7  : RISCVReg<7, "x7", ["t2"]>, DwarfRegNum<[7]>;
+  def X8  : RISCVReg<8, "x8", ["s0"]>, DwarfRegNum<[8]>;
+  def X9  : RISCVReg<9, "x9", ["s1"]>, DwarfRegNum<[9]>;
+  def X10 : RISCVReg<10,"x10", ["a0"]>, DwarfRegNum<[10]>;
+  def X11 : RISCVReg<11,"x11", ["a1"]>, DwarfRegNum<[11]>;
+  def X12 : RISCVReg<12,"x12", ["a2"]>, DwarfRegNum<[12]>;
+  def X13 : RISCVReg<13,"x13", ["a3"]>, DwarfRegNum<[13]>;
+  def X14 : RISCVReg<14,"x14", ["a4"]>, DwarfRegNum<[14]>;
+  def X15 : RISCVReg<15,"x15", ["a5"]>, DwarfRegNum<[15]>;
+  def X16 : RISCVReg<16,"x16", ["a6"]>, DwarfRegNum<[16]>;
+  def X17 : RISCVReg<17,"x17", ["a7"]>, DwarfRegNum<[17]>;
+  def X18 : RISCVReg<18,"x18", ["s2"]>, DwarfRegNum<[18]>;
+  def X19 : RISCVReg<19,"x19", ["s3"]>, DwarfRegNum<[19]>;
+  def X20 : RISCVReg<20,"x20", ["s4"]>, DwarfRegNum<[20]>;
+  def X21 : RISCVReg<21,"x21", ["s5"]>, DwarfRegNum<[21]>;
+  def X22 : RISCVReg<22,"x22", ["s6"]>, DwarfRegNum<[22]>;
+  def X23 : RISCVReg<23,"x23", ["s7"]>, DwarfRegNum<[23]>;
+  def X24 : RISCVReg<24,"x24", ["s8"]>, DwarfRegNum<[24]>;
+  def X25 : RISCVReg<25,"x25", ["s9"]>, DwarfRegNum<[25]>;
+  def X26 : RISCVReg<26,"x26", ["s10"]>, DwarfRegNum<[26]>;
+  def X27 : RISCVReg<27,"x27", ["s11"]>, DwarfRegNum<[27]>;
+  def X28 : RISCVReg<28,"x28", ["t3"]>, DwarfRegNum<[28]>;
+  def X29 : RISCVReg<29,"x29", ["t4"]>, DwarfRegNum<[29]>;
+  def X30 : RISCVReg<30,"x30", ["t5"]>, DwarfRegNum<[30]>;
+  def X31 : RISCVReg<31,"x31", ["t6"]>, DwarfRegNum<[31]>;
 }
 
-// We currently define separate register classes for the 32-bit and 64-bit
-// GPRs. Once variable-sized register classes
-// <http://lists.llvm.org/pipermail/llvm-dev/2016-September/105027.html> or
-// similar are implemented, we can just use one 'GPR' class for most
-// instruction definitions.
+def XLenVT : ValueTypeByHwMode<[RV32, RV64, DefaultMode],
+                               [i32,  i64,  i32]>;
 
 // The order of registers represents the preferred allocation sequence.
 // Registers are listed in the order caller-save, callee-save, specials.
-def GPR : RegisterClass<"RISCV", [i32], 32, (add
-  (sequence "X%u_32", 10, 17),
-  (sequence "X%u_32", 5, 7),
-  (sequence "X%u_32", 28, 31),
-  (sequence "X%u_32", 8, 9),
-  (sequence "X%u_32", 18, 27),
-  (sequence "X%u_32", 0, 4)
-)>;
-
-def GPR64 : RegisterClass<"RISCV", [i64], 64, (add
-  (sequence "X%u_64", 10, 17),
-  (sequence "X%u_64", 5, 7),
-  (sequence "X%u_64", 28, 31),
-  (sequence "X%u_64", 8, 9),
-  (sequence "X%u_64", 18, 27),
-  (sequence "X%u_64", 0, 4)
-)>;
+def GPR : RegisterClass<"RISCV", [XLenVT], 32, (add
+  (sequence "X%u", 10, 17),
+  (sequence "X%u", 5, 7),
+  (sequence "X%u", 28, 31),
+  (sequence "X%u", 8, 9),
+  (sequence "X%u", 18, 27),
+  (sequence "X%u", 0, 4)
+  )> {
+  let RegInfos = RegInfoByHwMode<[RV32, RV64, DefaultMode],
+    [RegInfo<32,32,32>, RegInfo<64,64,64>, RegInfo<32,32,32>]>;
+}
 
 // Floating point registers
 let RegAltNameIndices = [ABIRegAltName] in {
diff --git a/lib/Target/RISCV/RISCVSubtarget.cpp b/lib/Target/RISCV/RISCVSubtarget.cpp
index 2c1ba7ff2b0..b221ea84a33 100644
--- a/lib/Target/RISCV/RISCVSubtarget.cpp
+++ b/lib/Target/RISCV/RISCVSubtarget.cpp
@@ -45,4 +45,4 @@ RISCVSubtarget::RISCVSubtarget(const Triple &TT, const std::string &CPU,
                                const std::string &FS, const TargetMachine &TM)
     : RISCVGenSubtargetInfo(TT, CPU, FS),
       FrameLowering(initializeSubtargetDependencies(CPU, FS, TT.isArch64Bit())),
-      InstrInfo(), TLInfo(TM, *this) {}
+      InstrInfo(), RegInfo(getHwMode()), TLInfo(TM, *this) {}
diff --git a/lib/Target/RISCV/RISCVSubtarget.h b/lib/Target/RISCV/RISCVSubtarget.h
index fffa9eaf5dd..25e07737789 100644
--- a/lib/Target/RISCV/RISCVSubtarget.h
+++ b/lib/Target/RISCV/RISCVSubtarget.h
@@ -39,6 +39,7 @@ class RISCVSubtarget : public RISCVGenSubtargetInfo {
   MVT XLenVT = MVT::i32;
   RISCVFrameLowering FrameLowering;
   RISCVInstrInfo InstrInfo;
+  RISCVRegisterInfo RegInfo;
   RISCVTargetLowering TLInfo;
   SelectionDAGTargetInfo TSInfo;
 
@@ -60,9 +61,7 @@ public:
     return &FrameLowering;
   }
   const RISCVInstrInfo *getInstrInfo() const override { return &InstrInfo; }
-  const RISCVRegisterInfo *getRegisterInfo() const override {
-    return &InstrInfo.getRegisterInfo();
-  }
+  const RISCVRegisterInfo *getRegisterInfo() const override { return &RegInfo; }
   const RISCVTargetLowering *getTargetLowering() const override {
     return &TLInfo;
   }
-- 
2.14.1

